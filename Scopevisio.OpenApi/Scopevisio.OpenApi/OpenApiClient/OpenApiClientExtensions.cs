// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace CompuMaster.Scopevisio.OpenScopeApi
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for OpenApiClient.
    /// </summary>
    public static partial class OpenApiClientExtensions
    {
            /// <summary>
            /// Returns accounting info details.
            /// </summary>
            /// Required profiles: &lt;i&gt;Stammdaten (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetAccountingInfos(this IOpenApiClient operations)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetAccountingInfosAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns accounting info details.
            /// </summary>
            /// Required profiles: &lt;i&gt;Stammdaten (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAccountingInfosAsync(this IOpenApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetAccountingInfosWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// creates a new cashbook entry
            /// </summary>
            /// Creates a new Scopevisio cashbook entry.
            /// Required profile(s): &lt;i&gt;Kassenbewegung eingeben
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// content in JSON format, topic is required
            /// </param>
            public static void CreateCashbookEntry(this IOpenApiClient operations, CashbookEntryForm body)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateCashbookEntryAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// creates a new cashbook entry
            /// </summary>
            /// Creates a new Scopevisio cashbook entry.
            /// Required profile(s): &lt;i&gt;Kassenbewegung eingeben
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// content in JSON format, topic is required
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateCashbookEntryAsync(this IOpenApiClient operations, CashbookEntryForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateCashbookEntryWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// cashbooks
            /// </summary>
            /// Returns Scopevisio cashbooks settings.
            /// Required profile(s): &lt;i&gt;Kassenbücher Dashboard (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetCashbooks(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetCashbooksAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// cashbooks
            /// </summary>
            /// Returns Scopevisio cashbooks settings.
            /// Required profile(s): &lt;i&gt;Kassenbücher Dashboard (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetCashbooksAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetCashbooksWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// cashbook sheets
            /// </summary>
            /// Returns Scopevisio cashbook sheets.
            /// Required profile(s): &lt;i&gt;Abgeschlossene Kassenblätter, Kassenbewegung
            /// eingeben (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetCashbookSheets(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetCashbookSheetsAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// cashbook sheets
            /// </summary>
            /// Returns Scopevisio cashbook sheets.
            /// Required profile(s): &lt;i&gt;Abgeschlossene Kassenblätter, Kassenbewegung
            /// eingeben (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetCashbookSheetsAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetCashbookSheetsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get contact property (allgemeine Information) by id
            /// </summary>
            /// Returns the contact property (allgemeine Information) with the given
            /// propertyId of the given contactId.
            /// Required profile(s): &lt;i&gt;Kontakte bearbeiten (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyId'>
            /// id of a Scopevisio property
            /// </param>
            /// <param name='fields'>
            /// Comma separated list of fields to show in response
            /// 
            /// id,type,subType
            /// </param>
            public static void GetProperty(this IOpenApiClient operations, long propertyId, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetPropertyAsync(propertyId, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get contact property (allgemeine Information) by id
            /// </summary>
            /// Returns the contact property (allgemeine Information) with the given
            /// propertyId of the given contactId.
            /// Required profile(s): &lt;i&gt;Kontakte bearbeiten (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyId'>
            /// id of a Scopevisio property
            /// </param>
            /// <param name='fields'>
            /// Comma separated list of fields to show in response
            /// 
            /// id,type,subType
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetPropertyAsync(this IOpenApiClient operations, long propertyId, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetPropertyWithHttpMessagesAsync(propertyId, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Update contact property (allgemeine Information) by id
            /// </summary>
            /// Updates the property (allgemeine Information) of a Scopevisio contact with
            /// the given propertyId.
            /// Required profile(s): &lt;i&gt;Kontakte bearbeiten (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyId'>
            /// </param>
            /// <param name='body'>
            /// content in JSON format
            /// </param>
            public static void UpdateProperty(this IOpenApiClient operations, long propertyId, ContactPropertyForm body)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).UpdatePropertyAsync(propertyId, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update contact property (allgemeine Information) by id
            /// </summary>
            /// Updates the property (allgemeine Information) of a Scopevisio contact with
            /// the given propertyId.
            /// Required profile(s): &lt;i&gt;Kontakte bearbeiten (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyId'>
            /// </param>
            /// <param name='body'>
            /// content in JSON format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdatePropertyAsync(this IOpenApiClient operations, long propertyId, ContactPropertyForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdatePropertyWithHttpMessagesAsync(propertyId, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// create a new contact
            /// </summary>
            /// Creates a new Scopevisio Contact.
            /// Required profile(s): &lt;i&gt;Kontakte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void CreateContact(this IOpenApiClient operations, KontaktForm body = default(KontaktForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateContactAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a new contact
            /// </summary>
            /// Creates a new Scopevisio Contact.
            /// Required profile(s): &lt;i&gt;Kontakte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateContactAsync(this IOpenApiClient operations, KontaktForm body = default(KontaktForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateContactWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Delete a contact by contactId or legacyNumber
            /// </summary>
            /// Delets a Scopevisio contact.
            /// Required profile(s): &lt;i&gt;Kontakte (Bearbeiten)&lt;/i&gt;.
            /// &lt;strong&gt;If the contact has the sphereEmployee set then you needthe
            /// additional user profile &lt;em&gt;Personal&lt;/em&gt;&lt;/strong&gt;
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contactIdOrLegacyNumber'>
            /// contactId or legacyNumber of a Scopevisio contact
            /// </param>
            public static void DeleteContactById(this IOpenApiClient operations, string contactIdOrLegacyNumber)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).DeleteContactByIdAsync(contactIdOrLegacyNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a contact by contactId or legacyNumber
            /// </summary>
            /// Delets a Scopevisio contact.
            /// Required profile(s): &lt;i&gt;Kontakte (Bearbeiten)&lt;/i&gt;.
            /// &lt;strong&gt;If the contact has the sphereEmployee set then you needthe
            /// additional user profile &lt;em&gt;Personal&lt;/em&gt;&lt;/strong&gt;
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contactIdOrLegacyNumber'>
            /// contactId or legacyNumber of a Scopevisio contact
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteContactByIdAsync(this IOpenApiClient operations, string contactIdOrLegacyNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteContactByIdWithHttpMessagesAsync(contactIdOrLegacyNumber, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Assign mail to a contact.
            /// </summary>
            /// Assigns the mail with the given mailId to the contact with the given
            /// contactIdOrLegacyNumber.
            /// Required profile(s): &lt;i&gt;Kontakte, Mailbot, Mailagent
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contactIdOrLegacyNumber'>
            /// </param>
            /// <param name='body'>
            /// content in JSON format
            /// </param>
            public static void AssignMailContact(this IOpenApiClient operations, string contactIdOrLegacyNumber, AssignMailForm body)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).AssignMailContactAsync(contactIdOrLegacyNumber, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assign mail to a contact.
            /// </summary>
            /// Assigns the mail with the given mailId to the contact with the given
            /// contactIdOrLegacyNumber.
            /// Required profile(s): &lt;i&gt;Kontakte, Mailbot, Mailagent
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contactIdOrLegacyNumber'>
            /// </param>
            /// <param name='body'>
            /// content in JSON format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AssignMailContactAsync(this IOpenApiClient operations, string contactIdOrLegacyNumber, AssignMailForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AssignMailContactWithHttpMessagesAsync(contactIdOrLegacyNumber, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Comments by contactIdOrLegacyNumber.
            /// </summary>
            /// Returns the Scopevisio comments with the given contactIdOrLegacyNumber.
            /// Required profile(s): &lt;i&gt;Kontakte, Pinnwand (Anzeigen)&lt;/i&gt;
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contactIdOrLegacyNumber'>
            /// id (Master ID) or legacyNumber (ID Vorsystem) of a Scopevisio contact
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,blogId,body
            /// </param>
            public static void GetBlogEntriesByContactId(this IOpenApiClient operations, string contactIdOrLegacyNumber, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetBlogEntriesByContactIdAsync(contactIdOrLegacyNumber, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Comments by contactIdOrLegacyNumber.
            /// </summary>
            /// Returns the Scopevisio comments with the given contactIdOrLegacyNumber.
            /// Required profile(s): &lt;i&gt;Kontakte, Pinnwand (Anzeigen)&lt;/i&gt;
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contactIdOrLegacyNumber'>
            /// id (Master ID) or legacyNumber (ID Vorsystem) of a Scopevisio contact
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,blogId,body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetBlogEntriesByContactIdAsync(this IOpenApiClient operations, string contactIdOrLegacyNumber, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetBlogEntriesByContactIdWithHttpMessagesAsync(contactIdOrLegacyNumber, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a contact property (allgemeine Information)
            /// </summary>
            /// Creates a new property (allgemeine Information) for a Scopevisio contact.
            /// Required profile(s): &lt;i&gt;Kontakte bearbeiten (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contactIdOrLegacyNumber'>
            /// </param>
            /// <param name='body'>
            /// content in JSON format
            /// </param>
            public static void CreateProperty(this IOpenApiClient operations, string contactIdOrLegacyNumber, ContactPropertyForm body)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreatePropertyAsync(contactIdOrLegacyNumber, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a contact property (allgemeine Information)
            /// </summary>
            /// Creates a new property (allgemeine Information) for a Scopevisio contact.
            /// Required profile(s): &lt;i&gt;Kontakte bearbeiten (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contactIdOrLegacyNumber'>
            /// </param>
            /// <param name='body'>
            /// content in JSON format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreatePropertyAsync(this IOpenApiClient operations, string contactIdOrLegacyNumber, ContactPropertyForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreatePropertyWithHttpMessagesAsync(contactIdOrLegacyNumber, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Add a file to a Scopevisio contact
            /// </summary>
            /// Adds a file to a Scopevisio contact entry.
            /// Required profile(s): &lt;i&gt;Kontakte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contactIdOrLegacyNumber'>
            /// contactId or legacyNumber of a Scopevisio contact
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void AddContactFile(this IOpenApiClient operations, string contactIdOrLegacyNumber, TeamworkFileForm body = default(TeamworkFileForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).AddContactFileAsync(contactIdOrLegacyNumber, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a file to a Scopevisio contact
            /// </summary>
            /// Adds a file to a Scopevisio contact entry.
            /// Required profile(s): &lt;i&gt;Kontakte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contactIdOrLegacyNumber'>
            /// contactId or legacyNumber of a Scopevisio contact
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddContactFileAsync(this IOpenApiClient operations, string contactIdOrLegacyNumber, TeamworkFileForm body = default(TeamworkFileForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AddContactFileWithHttpMessagesAsync(contactIdOrLegacyNumber, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a new comment.
            /// </summary>
            /// Creates a new comment.
            /// Required profile(s): &lt;i&gt;Kontakte, Pinnwand (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contactId'>
            /// contactId of a Scopevisio contact
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void CreateContactComment(this IOpenApiClient operations, long contactId, BlogEntryForm body = default(BlogEntryForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateContactCommentAsync(contactId, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new comment.
            /// </summary>
            /// Creates a new comment.
            /// Required profile(s): &lt;i&gt;Kontakte, Pinnwand (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contactId'>
            /// contactId of a Scopevisio contact
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateContactCommentAsync(this IOpenApiClient operations, long contactId, BlogEntryForm body = default(BlogEntryForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateContactCommentWithHttpMessagesAsync(contactId, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get contact by id
            /// </summary>
            /// Returns the Scopevisio contact with the given id.
            /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio contact
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, lastname
            /// </param>
            public static void GetContactById(this IOpenApiClient operations, long id, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetContactByIdAsync(id, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get contact by id
            /// </summary>
            /// Returns the Scopevisio contact with the given id.
            /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio contact
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, lastname
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetContactByIdAsync(this IOpenApiClient operations, long id, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetContactByIdWithHttpMessagesAsync(id, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// update contact by id
            /// </summary>
            /// Updates the Scopevisio Contact with the given id.
            /// Required profile(s): &lt;i&gt;Kontakte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Contact
            /// </param>
            /// <param name='body'>
            /// Content in JSON format. Please refer to KontaktForm for example values and
            /// to our  &lt;a href='../browser/index.html#!/documentation'&gt;general
            /// documentation&lt;/a&gt; for update information.
            /// </param>
            public static void UpdateContactById(this IOpenApiClient operations, long id, KontaktForm body = default(KontaktForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).UpdateContactByIdAsync(id, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// update contact by id
            /// </summary>
            /// Updates the Scopevisio Contact with the given id.
            /// Required profile(s): &lt;i&gt;Kontakte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Contact
            /// </param>
            /// <param name='body'>
            /// Content in JSON format. Please refer to KontaktForm for example values and
            /// to our  &lt;a href='../browser/index.html#!/documentation'&gt;general
            /// documentation&lt;/a&gt; for update information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateContactByIdAsync(this IOpenApiClient operations, long id, KontaktForm body = default(KontaktForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateContactByIdWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// employees of an organisation contact
            /// </summary>
            /// Returns the employees of the Scopevisio organisation contact with the
            /// given id.
            /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio organisation contact
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,contactId,lastname
            /// </param>
            public static void GetContactEmployees(this IOpenApiClient operations, long id, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetContactEmployeesAsync(id, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// employees of an organisation contact
            /// </summary>
            /// Returns the employees of the Scopevisio organisation contact with the
            /// given id.
            /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio organisation contact
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,contactId,lastname
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetContactEmployeesAsync(this IOpenApiClient operations, long id, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetContactEmployeesWithHttpMessagesAsync(id, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// employers of a personal contact
            /// </summary>
            /// Returns the employers of the Scopevisio personal contact with the given
            /// id.
            /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio personal contact
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,contactId,company
            /// </param>
            public static void GetContactEmployers(this IOpenApiClient operations, long id, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetContactEmployersAsync(id, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// employers of a personal contact
            /// </summary>
            /// Returns the employers of the Scopevisio personal contact with the given
            /// id.
            /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio personal contact
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,contactId,company
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetContactEmployersAsync(this IOpenApiClient operations, long id, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetContactEmployersWithHttpMessagesAsync(id, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// contact propeties for the given contact
            /// </summary>
            /// Returns the Scopevisio contact custom property fields with the given id.
            /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio contact
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, description
            /// </param>
            public static void GetContactProperties(this IOpenApiClient operations, long id, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetContactPropertiesAsync(id, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// contact propeties for the given contact
            /// </summary>
            /// Returns the Scopevisio contact custom property fields with the given id.
            /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio contact
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, description
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetContactPropertiesAsync(this IOpenApiClient operations, long id, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetContactPropertiesWithHttpMessagesAsync(id, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// thumbnail image of contact
            /// </summary>
            /// Returns the thumb of a Scopevisio contact with the given id.
            /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio contact
            /// </param>
            public static void GetImage(this IOpenApiClient operations, long id)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetImageAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// thumbnail image of contact
            /// </summary>
            /// Returns the thumb of a Scopevisio contact with the given id.
            /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio contact
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetImageAsync(this IOpenApiClient operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetImageWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get contact by id matching the field stated as key identifier
            /// </summary>
            /// Returns the Scopevisio contact with the given id matching the field stated
            /// as key identifier.
            /// If more than one contact is found for the given legacyNumber, then a HTTP
            /// 404 error will be returned. Please use the endpoint /contacts if you do
            /// not have distinct values for your key identfiers.
            /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keyIdentifier'>
            /// key identifier [ID, LEGACYNUMBER], default key identifier: ID. Possible
            /// values include: 'ID', 'LEGACYNUMBER'
            /// </param>
            /// <param name='id'>
            /// id or legacyNumber of a Scopevisio contact, depending on the key
            /// identifier context
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, lastname
            /// </param>
            public static void GetContactByKeyIdentifierId(this IOpenApiClient operations, string keyIdentifier, string id, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetContactByKeyIdentifierIdAsync(keyIdentifier, id, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get contact by id matching the field stated as key identifier
            /// </summary>
            /// Returns the Scopevisio contact with the given id matching the field stated
            /// as key identifier.
            /// If more than one contact is found for the given legacyNumber, then a HTTP
            /// 404 error will be returned. Please use the endpoint /contacts if you do
            /// not have distinct values for your key identfiers.
            /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keyIdentifier'>
            /// key identifier [ID, LEGACYNUMBER], default key identifier: ID. Possible
            /// values include: 'ID', 'LEGACYNUMBER'
            /// </param>
            /// <param name='id'>
            /// id or legacyNumber of a Scopevisio contact, depending on the key
            /// identifier context
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, lastname
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetContactByKeyIdentifierIdAsync(this IOpenApiClient operations, string keyIdentifier, string id, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetContactByKeyIdentifierIdWithHttpMessagesAsync(keyIdentifier, id, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// contacts
            /// </summary>
            /// Returns Scopevisio contacts.
            /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetContacts(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetContactsAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// contacts
            /// </summary>
            /// Returns Scopevisio contacts.
            /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetContactsAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetContactsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create debitor for a given contact, if the contact is not already a
            /// debitor.
            /// </summary>
            /// Required profiles: &lt;i&gt;Datenimport (Bearbeiten), Kontakte bearbeiten
            /// (Bearbeiten)&lt;/i&gt;.
            /// At least one of the parameters in the body description below is needed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void CreateDebitor(this IOpenApiClient operations, PersonalAccountForm body = default(PersonalAccountForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateDebitorAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create debitor for a given contact, if the contact is not already a
            /// debitor.
            /// </summary>
            /// Required profiles: &lt;i&gt;Datenimport (Bearbeiten), Kontakte bearbeiten
            /// (Bearbeiten)&lt;/i&gt;.
            /// At least one of the parameters in the body description below is needed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateDebitorAsync(this IOpenApiClient operations, PersonalAccountForm body = default(PersonalAccountForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateDebitorWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// import impersonalaccounts
            /// </summary>
            /// Required profiles: &lt;i&gt;Datenimport (Bearbeiten)&lt;/i&gt;.
            /// The examples and allowable values refer to chart of accounts SKR03. If you
            /// use another chart of accounts you should check your settings in the
            /// Scopevisio desktop application.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void CreateImpersonalAcocunts(this IOpenApiClient operations, ImpersonalAccountsForm body = default(ImpersonalAccountsForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateImpersonalAcocuntsAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// import impersonalaccounts
            /// </summary>
            /// Required profiles: &lt;i&gt;Datenimport (Bearbeiten)&lt;/i&gt;.
            /// The examples and allowable values refer to chart of accounts SKR03. If you
            /// use another chart of accounts you should check your settings in the
            /// Scopevisio desktop application.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateImpersonalAcocuntsAsync(this IOpenApiClient operations, ImpersonalAccountsForm body = default(ImpersonalAccountsForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateImpersonalAcocuntsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create vendor for a given contact, if the contact is not already a vendor
            /// </summary>
            /// Required profile(s): &lt;i&gt;Datenimport (Bearbeiten), Kontakte
            /// bearbeiten (Bearbeiten)&lt;/i&gt;.
            /// At least one of the parameters in the body description below is needed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void CreateKreditor(this IOpenApiClient operations, PersonalAccountForm body = default(PersonalAccountForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateKreditorAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create vendor for a given contact, if the contact is not already a vendor
            /// </summary>
            /// Required profile(s): &lt;i&gt;Datenimport (Bearbeiten), Kontakte
            /// bearbeiten (Bearbeiten)&lt;/i&gt;.
            /// At least one of the parameters in the body description below is needed.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateKreditorAsync(this IOpenApiClient operations, PersonalAccountForm body = default(PersonalAccountForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateKreditorWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// credit for number (interne Nummer)
            /// </summary>
            /// Returns the Scopevisio credit with the given number (interne Nummer).
            /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio credit
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            public static void GetCredit(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetCreditAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// credit for number (interne Nummer)
            /// </summary>
            /// Returns the Scopevisio credit with the given number (interne Nummer).
            /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio credit
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetCreditAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetCreditWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// the parent of a credit with the given document number
            /// </summary>
            /// Returns the Scopevisio outgoing invoice document which is parent of the
            /// credit with the given document number.
            /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// document number of a Scopevisio credit
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            public static void GetCreditParent(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetCreditParentAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// the parent of a credit with the given document number
            /// </summary>
            /// Returns the Scopevisio outgoing invoice document which is parent of the
            /// credit with the given document number.
            /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// document number of a Scopevisio credit
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetCreditParentAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetCreditParentWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// get outgoing invoice positions for the given number(interne Nummer)
            /// </summary>
            /// Returns the positions for the outgoing invoice with the given
            /// number(interne Nummer).
            /// Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
            /// Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number(interne Nummer) of a Scopevisio credit
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,name
            /// </param>
            public static void GetCreditPositions(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetCreditPositionsAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get outgoing invoice positions for the given number(interne Nummer)
            /// </summary>
            /// Returns the positions for the outgoing invoice with the given
            /// number(interne Nummer).
            /// Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
            /// Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number(interne Nummer) of a Scopevisio credit
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetCreditPositionsAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetCreditPositionsWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Post a credit.
            /// </summary>
            /// Post the credit with the given number(interne Nummer).
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio credit.
            /// </param>
            public static void PostCredit(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).PostCreditAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post a credit.
            /// </summary>
            /// Post the credit with the given number(interne Nummer).
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio credit.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostCreditAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PostCreditWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// credits
            /// </summary>
            /// Returns the Scopevisio credits. &lt;i&gt;
            /// Required profile(s): Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetCredits(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetCreditsAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// credits
            /// </summary>
            /// Returns the Scopevisio credits. &lt;i&gt;
            /// Required profile(s): Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetCreditsAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetCreditsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// export postings in DATEV EXTF format
            /// </summary>
            /// Required profiles: &lt;i&gt;Datenexport (Anzeigen)&lt;/i&gt;.
            /// Export postings in DATEV EXTF format.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void ExportDatev(this IOpenApiClient operations, DatevExportSettingsForm body = default(DatevExportSettingsForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ExportDatevAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// export postings in DATEV EXTF format
            /// </summary>
            /// Required profiles: &lt;i&gt;Datenexport (Anzeigen)&lt;/i&gt;.
            /// Export postings in DATEV EXTF format.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ExportDatevAsync(this IOpenApiClient operations, DatevExportSettingsForm body = default(DatevExportSettingsForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ExportDatevWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// import postings in DATEV-Format
            /// </summary>
            /// Required profiles: &lt;i&gt;Datenimport (Bearbeiten)&lt;/i&gt;.
            /// Import postings in DATEV-Format.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void ImportDatevData(this IOpenApiClient operations, DatevPostings body = default(DatevPostings))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ImportDatevDataAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// import postings in DATEV-Format
            /// </summary>
            /// Required profiles: &lt;i&gt;Datenimport (Bearbeiten)&lt;/i&gt;.
            /// Import postings in DATEV-Format.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ImportDatevDataAsync(this IOpenApiClient operations, DatevPostings body = default(DatevPostings), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ImportDatevDataWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// debitor accounts
            /// </summary>
            /// Returns the Debitor-Accounts
            /// Required profile(s): &lt;i&gt;Stammdaten, Debitorenstamm
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetDebitorAccounts(this IOpenApiClient operations, string body)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetDebitorAccountsAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// debitor accounts
            /// </summary>
            /// Returns the Debitor-Accounts
            /// Required profile(s): &lt;i&gt;Stammdaten, Debitorenstamm
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetDebitorAccountsAsync(this IOpenApiClient operations, string body, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetDebitorAccountsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Update a debitor by accountNumber (Kontonummer).
            /// </summary>
            /// Updates the debitor with the given accountNumber.
            /// Required profile(s): &lt;i&gt;Stammdaten, Debitorenstamm
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountNumber'>
            /// </param>
            /// <param name='body'>
            /// content in JSON format
            /// </param>
            public static void UpdateDebitor(this IOpenApiClient operations, string accountNumber, UpdatePersonalAccountForm body)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).UpdateDebitorAsync(accountNumber, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a debitor by accountNumber (Kontonummer).
            /// </summary>
            /// Updates the debitor with the given accountNumber.
            /// Required profile(s): &lt;i&gt;Stammdaten, Debitorenstamm
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountNumber'>
            /// </param>
            /// <param name='body'>
            /// content in JSON format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDebitorAsync(this IOpenApiClient operations, string accountNumber, UpdatePersonalAccountForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateDebitorWithHttpMessagesAsync(accountNumber, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a new bank connection for debitor.
            /// </summary>
            /// Creates a new bank connection for the debitor with the given accountNumber
            /// Required profile(s): &lt;i&gt;Stammdaten, Debitorenstamm
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountNumber'>
            /// accountNumber (Kontonummer)of a Scopevisio debitor
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object CreateDebitorBankConnection(this IOpenApiClient operations, string accountNumber, BankConnectionForm body = default(BankConnectionForm))
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateDebitorBankConnectionAsync(accountNumber, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new bank connection for debitor.
            /// </summary>
            /// Creates a new bank connection for the debitor with the given accountNumber
            /// Required profile(s): &lt;i&gt;Stammdaten, Debitorenstamm
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountNumber'>
            /// accountNumber (Kontonummer)of a Scopevisio debitor
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateDebitorBankConnectionAsync(this IOpenApiClient operations, string accountNumber, BankConnectionForm body = default(BankConnectionForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDebitorBankConnectionWithHttpMessagesAsync(accountNumber, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Bank connections for a Scopevisio debitor account.
            /// </summary>
            /// Returns the bank connections for the debitor account with the given
            /// accountNumber.
            /// Required profile(s): &lt;i&gt;Stammdaten, Debitorenstamm
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountNumber'>
            /// accountNumber (Kontonummer) of a Scopevisio debitor.
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// documentNumber, postingDate
            /// </param>
            public static void GetBankConnectionsForDebitor(this IOpenApiClient operations, string accountNumber, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetBankConnectionsForDebitorAsync(accountNumber, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Bank connections for a Scopevisio debitor account.
            /// </summary>
            /// Returns the bank connections for the debitor account with the given
            /// accountNumber.
            /// Required profile(s): &lt;i&gt;Stammdaten, Debitorenstamm
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountNumber'>
            /// accountNumber (Kontonummer) of a Scopevisio debitor.
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// documentNumber, postingDate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetBankConnectionsForDebitorAsync(this IOpenApiClient operations, string accountNumber, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetBankConnectionsForDebitorWithHttpMessagesAsync(accountNumber, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// dimensions
            /// </summary>
            /// Returns all of the dimensions.
            /// Required profile(s): &lt;i&gt;Journal (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetAllDimensionEntries(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetAllDimensionEntriesAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// dimensions
            /// </summary>
            /// Returns all of the dimensions.
            /// Required profile(s): &lt;i&gt;Journal (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAllDimensionEntriesAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetAllDimensionEntriesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// dimension entries
            /// </summary>
            /// Returns the entries for a given dimension.
            /// Required profile(s): &lt;i&gt;Berichte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dimensionNameOrNumber'>
            /// the name or the number of of the dimension. Example:
            /// /dimensions/Kostenstellen/dimensionentries, /dimesions/1/dimensionentries
            /// </param>
            public static void GetDimensionReportEntries(this IOpenApiClient operations, string dimensionNameOrNumber)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetDimensionReportEntriesAsync(dimensionNameOrNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// dimension entries
            /// </summary>
            /// Returns the entries for a given dimension.
            /// Required profile(s): &lt;i&gt;Berichte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dimensionNameOrNumber'>
            /// the name or the number of of the dimension. Example:
            /// /dimensions/Kostenstellen/dimensionentries, /dimesions/1/dimensionentries
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetDimensionReportEntriesAsync(this IOpenApiClient operations, string dimensionNameOrNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetDimensionReportEntriesWithHttpMessagesAsync(dimensionNameOrNumber, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Updates the name of a dimension entry.
            /// </summary>
            /// Updates the name of the Scopevisio dimension entry with the given number.
            /// Required profile(s): &lt;i&gt;Berichte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dimensionNameOrNumber'>
            /// the name or the number of of the dimension. Example:
            /// /dimensions/Kostenstellen/dimensionentries, /dimesions/1/dimensionentries
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void UpdateDimensionEntry(this IOpenApiClient operations, string dimensionNameOrNumber, DimensionEntryForm body)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).UpdateDimensionEntryAsync(dimensionNameOrNumber, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the name of a dimension entry.
            /// </summary>
            /// Updates the name of the Scopevisio dimension entry with the given number.
            /// Required profile(s): &lt;i&gt;Berichte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dimensionNameOrNumber'>
            /// the name or the number of of the dimension. Example:
            /// /dimensions/Kostenstellen/dimensionentries, /dimesions/1/dimensionentries
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDimensionEntryAsync(this IOpenApiClient operations, string dimensionNameOrNumber, DimensionEntryForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateDimensionEntryWithHttpMessagesAsync(dimensionNameOrNumber, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Add a dimensionEntry to a dimension
            /// </summary>
            /// Adds a new dimension entry to a dimension.
            /// Required profile(s): &lt;i&gt;Berichte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dimensionNameOrNumber'>
            /// the name or the number of of the dimension. Example:
            /// /dimensions/Kostenstellen/dimensionentries, /dimesions/1/dimensionentries
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void AddDimensionEntry(this IOpenApiClient operations, string dimensionNameOrNumber, DimensionEntryForm body)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).AddDimensionEntryAsync(dimensionNameOrNumber, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a dimensionEntry to a dimension
            /// </summary>
            /// Adds a new dimension entry to a dimension.
            /// Required profile(s): &lt;i&gt;Berichte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dimensionNameOrNumber'>
            /// the name or the number of of the dimension. Example:
            /// /dimensions/Kostenstellen/dimensionentries, /dimesions/1/dimensionentries
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddDimensionEntryAsync(this IOpenApiClient operations, string dimensionNameOrNumber, DimensionEntryForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AddDimensionEntryWithHttpMessagesAsync(dimensionNameOrNumber, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// get dispatch with number (interne Nummer)
            /// </summary>
            /// Returns the Scopevisio dispatch with the given number (interne Nummer).
            /// Required profile(s) : &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio dispatch
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            public static void GetDispatch(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetDispatchAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get dispatch with number (interne Nummer)
            /// </summary>
            /// Returns the Scopevisio dispatch with the given number (interne Nummer).
            /// Required profile(s) : &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio dispatch
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetDispatchAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetDispatchWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// the parent of the dispatch with the given document number
            /// </summary>
            /// Returns the Scopevisio outgoing invoice document which is parent of the
            /// dispatch with the given document number.
            /// Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// document number of a Scopevisio dispatch
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            public static void GetDispatchParent(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetDispatchParentAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// the parent of the dispatch with the given document number
            /// </summary>
            /// Returns the Scopevisio outgoing invoice document which is parent of the
            /// dispatch with the given document number.
            /// Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// document number of a Scopevisio dispatch
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetDispatchParentAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetDispatchParentWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// get the positions for the dispatch with the given number (interne Nummer)
            /// </summary>
            /// Returns the positions of the dispatch with the given number (interne
            /// Nummer).
            /// Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio dispatch
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,name
            /// </param>
            public static void GetDispatchPositions(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetDispatchPositionsAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get the positions for the dispatch with the given number (interne Nummer)
            /// </summary>
            /// Returns the positions of the dispatch with the given number (interne
            /// Nummer).
            /// Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio dispatch
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetDispatchPositionsAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetDispatchPositionsWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Dispatches
            /// </summary>
            /// Returns all Scopevisio dispatches.
            /// Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetDispatches(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetDispatchesAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Dispatches
            /// </summary>
            /// Returns all Scopevisio dispatches.
            /// Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetDispatchesAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetDispatchesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// events
            /// </summary>
            /// Returns Events of Scopevisio.
            /// Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format
            /// </param>
            public static void GetEvents(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetEventsAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// events
            /// </summary>
            /// Returns Events of Scopevisio.
            /// Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetEventsAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetEventsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// simple hello world call.
            /// </summary>
            /// Returns 'Hello world' test data.
            /// No profiles required.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void HelloJson(this IOpenApiClient operations)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).HelloJsonAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// simple hello world call.
            /// </summary>
            /// Returns 'Hello world' test data.
            /// No profiles required.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HelloJsonAsync(this IOpenApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.HelloJsonWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get human resources
            /// </summary>
            /// Get human resources.
            /// Required profile(s): &lt;i&gt;Human-Ressourcen Verwaltung
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static object GetHumanResources(this IOpenApiClient operations, string body = default(string))
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).GetHumanResourcesAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get human resources
            /// </summary>
            /// Get human resources.
            /// Required profile(s): &lt;i&gt;Human-Ressourcen Verwaltung
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetHumanResourcesAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHumanResourcesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get availability of human resources.
            /// </summary>
            /// Return availability of human resources for the given time range. The both
            /// parameters validFrom and validTill specify the start and end time for
            /// which the availability of human resources should be retrieved.
            /// Required profile(s): &lt;i&gt;Human-Ressourcen Verwaltung
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='validFrom'>
            /// validFrom (Planungszeit von). The start of the time range to show the
            /// availability of the human resources. It must be provided as an epoch
            /// timestamp in milliseconds.
            /// </param>
            /// <param name='validTill'>
            /// validTill (Planungszeit bis). The end of the time range to show the
            /// availability of the human resources. It must be provided as an epoch
            /// timestamp in milliseconds.
            /// </param>
            /// <param name='searchSpecification'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// &lt;b&gt;Please consider: the fields "month","available","id" are excluded
            /// from the search.&lt;/b&gt;
            /// </param>
            public static object GetHumanResourcesYear(this IOpenApiClient operations, long validFrom, long validTill, string searchSpecification = default(string))
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).GetHumanResourcesYearAsync(validFrom, validTill, searchSpecification), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get availability of human resources.
            /// </summary>
            /// Return availability of human resources for the given time range. The both
            /// parameters validFrom and validTill specify the start and end time for
            /// which the availability of human resources should be retrieved.
            /// Required profile(s): &lt;i&gt;Human-Ressourcen Verwaltung
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='validFrom'>
            /// validFrom (Planungszeit von). The start of the time range to show the
            /// availability of the human resources. It must be provided as an epoch
            /// timestamp in milliseconds.
            /// </param>
            /// <param name='validTill'>
            /// validTill (Planungszeit bis). The end of the time range to show the
            /// availability of the human resources. It must be provided as an epoch
            /// timestamp in milliseconds.
            /// </param>
            /// <param name='searchSpecification'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// &lt;b&gt;Please consider: the fields "month","available","id" are excluded
            /// from the search.&lt;/b&gt;
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetHumanResourcesYearAsync(this IOpenApiClient operations, long validFrom, long validTill, string searchSpecification = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHumanResourcesYearWithHttpMessagesAsync(validFrom, validTill, searchSpecification, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// impersonal accounts
            /// </summary>
            /// Returns the impersonalaccounts
            /// Required profile(s): &lt;i&gt;Stammdaten, Kontenplan (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetImpersonalAccounts(this IOpenApiClient operations, string body)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetImpersonalAccountsAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// impersonal accounts
            /// </summary>
            /// Returns the impersonalaccounts
            /// Required profile(s): &lt;i&gt;Stammdaten, Kontenplan (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetImpersonalAccountsAsync(this IOpenApiClient operations, string body, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetImpersonalAccountsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Import an incoming invoice.
            /// </summary>
            /// Required profiles: &lt;i&gt;Rechnungseingangsbuch (Bearbeiten)&lt;/i&gt;.
            /// The invoice should be provided as a base64 encoded pdf file. The maximum
            /// size allowed is 20 MB.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void CreateIncomingInvoice(this IOpenApiClient operations, IncomingInvoiceForm body = default(IncomingInvoiceForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateIncomingInvoiceAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Import an incoming invoice.
            /// </summary>
            /// Required profiles: &lt;i&gt;Rechnungseingangsbuch (Bearbeiten)&lt;/i&gt;.
            /// The invoice should be provided as a base64 encoded pdf file. The maximum
            /// size allowed is 20 MB.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateIncomingInvoiceAsync(this IOpenApiClient operations, IncomingInvoiceForm body = default(IncomingInvoiceForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateIncomingInvoiceWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// incoming invoice for the given idOrNumber (id or interne Nummer)
            /// </summary>
            /// Returns the Scopevisio incoming invoices with the given idOrNumber (id or
            /// interne Nummer).
            /// Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrNumber'>
            /// document idOrNumber (id or interne Nummer) of a Scopevisio invcoming
            /// invoice
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,documentNumber
            /// </param>
            public static void GetInvoice(this IOpenApiClient operations, string idOrNumber, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetInvoiceAsync(idOrNumber, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// incoming invoice for the given idOrNumber (id or interne Nummer)
            /// </summary>
            /// Returns the Scopevisio incoming invoices with the given idOrNumber (id or
            /// interne Nummer).
            /// Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrNumber'>
            /// document idOrNumber (id or interne Nummer) of a Scopevisio invcoming
            /// invoice
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,documentNumber
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetInvoiceAsync(this IOpenApiClient operations, string idOrNumber, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetInvoiceWithHttpMessagesAsync(idOrNumber, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// The file of incoming invoice with the given idOrNumber (id or Interne
            /// Nummer)
            /// </summary>
            /// Returns the main file of the Scopevisio incoming invoice with the given
            /// idOrNumber (id or Interne Nummer).
            /// Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrNumber'>
            /// id or number(Interne Nummer) of a Scopevisio invcoming invoice.
            /// </param>
            public static void GetInvoiceFile(this IOpenApiClient operations, string idOrNumber)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetInvoiceFileAsync(idOrNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// The file of incoming invoice with the given idOrNumber (id or Interne
            /// Nummer)
            /// </summary>
            /// Returns the main file of the Scopevisio incoming invoice with the given
            /// idOrNumber (id or Interne Nummer).
            /// Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrNumber'>
            /// id or number(Interne Nummer) of a Scopevisio invcoming invoice.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetInvoiceFileAsync(this IOpenApiClient operations, string idOrNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetInvoiceFileWithHttpMessagesAsync(idOrNumber, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Link to the main file for the incoming invoice in the teamwork web
            /// application
            /// </summary>
            /// Returns a link to the main file for the incoming invoice with the given
            /// idOrNumber (id or Interne Nummer) in the teamwork web application.You
            /// need to be logged in to the teamwork webapp.
            /// Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrNumber'>
            /// idOrNumber (id or Interne Nummer) of a Scopevisio incoming invoice.
            /// </param>
            public static void GetIncomingInvoiceTeamworkFileLink(this IOpenApiClient operations, string idOrNumber)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetIncomingInvoiceTeamworkFileLinkAsync(idOrNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Link to the main file for the incoming invoice in the teamwork web
            /// application
            /// </summary>
            /// Returns a link to the main file for the incoming invoice with the given
            /// idOrNumber (id or Interne Nummer) in the teamwork web application.You
            /// need to be logged in to the teamwork webapp.
            /// Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idOrNumber'>
            /// idOrNumber (id or Interne Nummer) of a Scopevisio incoming invoice.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetIncomingInvoiceTeamworkFileLinkAsync(this IOpenApiClient operations, string idOrNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetIncomingInvoiceTeamworkFileLinkWithHttpMessagesAsync(idOrNumber, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// incoming invoices
            /// </summary>
            /// Returns Scopevisio incoming invoices.
            /// Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// (optional) Apply a search filter in JSON. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetIncomingInvoices(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetIncomingInvoicesAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// incoming invoices
            /// </summary>
            /// Returns Scopevisio incoming invoices.
            /// Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// (optional) Apply a search filter in JSON. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetIncomingInvoicesAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetIncomingInvoicesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Import an incoming email.
            /// </summary>
            /// Required profiles: &lt;i&gt;Mailbot, Mailagent (Bearbeiten)&lt;/i&gt;.
            /// The service tries to assign the imported mail to the sender and receiver
            /// contacts if found and if they are not the current user or a vaild sender
            /// (see Scopevisio client, Systemadministration -&gt; Persönliche
            /// E-Mail-Adresse verwalten -&gt; Absender 1-5).The email should be provided
            /// as eml content.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void CreateIncomingMail(this IOpenApiClient operations, IncomingMailForm body = default(IncomingMailForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateIncomingMailAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Import an incoming email.
            /// </summary>
            /// Required profiles: &lt;i&gt;Mailbot, Mailagent (Bearbeiten)&lt;/i&gt;.
            /// The service tries to assign the imported mail to the sender and receiver
            /// contacts if found and if they are not the current user or a vaild sender
            /// (see Scopevisio client, Systemadministration -&gt; Persönliche
            /// E-Mail-Adresse verwalten -&gt; Absender 1-5).The email should be provided
            /// as eml content.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateIncomingMailAsync(this IOpenApiClient operations, IncomingMailForm body = default(IncomingMailForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateIncomingMailWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// general journal entries
            /// </summary>
            /// Returns the Scopevisio journal entries.
            /// Required profile(s): &lt;i&gt;Journal (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetJournalEntries(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetJournalEntriesAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// general journal entries
            /// </summary>
            /// Returns the Scopevisio journal entries.
            /// Required profile(s): &lt;i&gt;Journal (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetJournalEntriesAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetJournalEntriesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Posting by documentNumber
            /// </summary>
            /// Returns the Scopevisio posting rows with the given documentNumber.
            /// Required profile(s): &lt;i&gt;Journal (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentNumber'>
            /// documentNumber (Buchungsnummer) of a scopevisio posting.
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// documentNumber, postingDate
            /// </param>
            public static void GetJournalEntryByDocumentNumber(this IOpenApiClient operations, string documentNumber, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetJournalEntryByDocumentNumberAsync(documentNumber, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Posting by documentNumber
            /// </summary>
            /// Returns the Scopevisio posting rows with the given documentNumber.
            /// Required profile(s): &lt;i&gt;Journal (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentNumber'>
            /// documentNumber (Buchungsnummer) of a scopevisio posting.
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// documentNumber, postingDate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetJournalEntryByDocumentNumberAsync(this IOpenApiClient operations, string documentNumber, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetJournalEntryByDocumentNumberWithHttpMessagesAsync(documentNumber, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Cancels the posting with the given documentNumber.
            /// </summary>
            /// Cancels the posting with the given documentNumber. If the posting is
            /// already cancelled no error is thrown but the cancellation posting
            /// document number is returned.
            /// Required profiles: &lt;i&gt;Journal (Bearbeiten)&lt;/i&gt;
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentNumber'>
            /// Document number (Buchungsnummer) of a Scopevisio general journal entry.
            /// </param>
            public static void CancelPostingDocument(this IOpenApiClient operations, string documentNumber)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CancelPostingDocumentAsync(documentNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels the posting with the given documentNumber.
            /// </summary>
            /// Cancels the posting with the given documentNumber. If the posting is
            /// already cancelled no error is thrown but the cancellation posting
            /// document number is returned.
            /// Required profiles: &lt;i&gt;Journal (Bearbeiten)&lt;/i&gt;
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentNumber'>
            /// Document number (Buchungsnummer) of a Scopevisio general journal entry.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelPostingDocumentAsync(this IOpenApiClient operations, string documentNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CancelPostingDocumentWithHttpMessagesAsync(documentNumber, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns file for a journal entry if existing
            /// </summary>
            /// Returns the file of the general journal entry with the given document
            /// number.
            /// Required profile(s): &lt;i&gt;Journal (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentNumber'>
            /// document number of a Scopevisio general journal entry
            /// </param>
            public static void GetGeneralJournalEntryFile(this IOpenApiClient operations, string documentNumber)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetGeneralJournalEntryFileAsync(documentNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns file for a journal entry if existing
            /// </summary>
            /// Returns the file of the general journal entry with the given document
            /// number.
            /// Required profile(s): &lt;i&gt;Journal (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentNumber'>
            /// document number of a Scopevisio general journal entry
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetGeneralJournalEntryFileAsync(this IOpenApiClient operations, string documentNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetGeneralJournalEntryFileWithHttpMessagesAsync(documentNumber, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Add a file to a Scopevisio journal entry
            /// </summary>
            /// Adds a file to a Scopevisio journal entry.
            /// Required profile(s): &lt;i&gt;Journal (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentNumber'>
            /// document number of a Scopevisio general journal entry
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void AddFile(this IOpenApiClient operations, string documentNumber, FileForm body = default(FileForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).AddFileAsync(documentNumber, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a file to a Scopevisio journal entry
            /// </summary>
            /// Adds a file to a Scopevisio journal entry.
            /// Required profile(s): &lt;i&gt;Journal (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentNumber'>
            /// document number of a Scopevisio general journal entry
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddFileAsync(this IOpenApiClient operations, string documentNumber, FileForm body = default(FileForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AddFileWithHttpMessagesAsync(documentNumber, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// kreditor accounts
            /// </summary>
            /// Returns the Kreditor-Accounts
            /// Required profile(s): &lt;i&gt;Stammdaten, Kreditorenstamm
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetKreditorAccounts(this IOpenApiClient operations, string body)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetKreditorAccountsAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// kreditor accounts
            /// </summary>
            /// Returns the Kreditor-Accounts
            /// Required profile(s): &lt;i&gt;Stammdaten, Kreditorenstamm
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetKreditorAccountsAsync(this IOpenApiClient operations, string body, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetKreditorAccountsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Update a kreditor by accountNumber (Kontonummer).
            /// </summary>
            /// Updates the kreditor with the given accountNumber.
            /// Required profile(s): &lt;i&gt;Stammdaten, Kreditorenstamm
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountNumber'>
            /// </param>
            /// <param name='body'>
            /// content in JSON format
            /// </param>
            public static void UpdateKreditor(this IOpenApiClient operations, string accountNumber, UpdatePersonalAccountForm body)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).UpdateKreditorAsync(accountNumber, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a kreditor by accountNumber (Kontonummer).
            /// </summary>
            /// Updates the kreditor with the given accountNumber.
            /// Required profile(s): &lt;i&gt;Stammdaten, Kreditorenstamm
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountNumber'>
            /// </param>
            /// <param name='body'>
            /// content in JSON format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateKreditorAsync(this IOpenApiClient operations, string accountNumber, UpdatePersonalAccountForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateKreditorWithHttpMessagesAsync(accountNumber, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a new bank connection for kreditor.
            /// </summary>
            /// Creates a new bank connection for the kreditor with the given
            /// accountNumber
            /// Required profile(s): &lt;i&gt;Stammdaten, Kreditorenstamm
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountNumber'>
            /// accountNumber (Kontonummer)of a Scopevisio kreditor
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object CreateKebitorBankConnection(this IOpenApiClient operations, string accountNumber, BankConnectionForm body = default(BankConnectionForm))
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateKebitorBankConnectionAsync(accountNumber, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new bank connection for kreditor.
            /// </summary>
            /// Creates a new bank connection for the kreditor with the given
            /// accountNumber
            /// Required profile(s): &lt;i&gt;Stammdaten, Kreditorenstamm
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountNumber'>
            /// accountNumber (Kontonummer)of a Scopevisio kreditor
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateKebitorBankConnectionAsync(this IOpenApiClient operations, string accountNumber, BankConnectionForm body = default(BankConnectionForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateKebitorBankConnectionWithHttpMessagesAsync(accountNumber, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Bank connections for a Scopevisio kreditor account.
            /// </summary>
            /// Returns the bank connections for the kreditor account with the given
            /// accountNumber.
            /// Required profile(s): &lt;i&gt;Stammdaten, Kreditorenstamm
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountNumber'>
            /// accountNumber (Kontonummer) of a Scopevisio kreditor.
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// documentNumber, postingDate
            /// </param>
            public static void GetBankConnectionsForKreditor(this IOpenApiClient operations, string accountNumber, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetBankConnectionsForKreditorAsync(accountNumber, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Bank connections for a Scopevisio kreditor account.
            /// </summary>
            /// Returns the bank connections for the kreditor account with the given
            /// accountNumber.
            /// Required profile(s): &lt;i&gt;Stammdaten, Kreditorenstamm
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountNumber'>
            /// accountNumber (Kontonummer) of a Scopevisio kreditor.
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// documentNumber, postingDate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetBankConnectionsForKreditorAsync(this IOpenApiClient operations, string accountNumber, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetBankConnectionsForKreditorWithHttpMessagesAsync(accountNumber, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Scopevisio licences
            /// </summary>
            /// Returns the available Scopevisio licences and the assigned users.
            /// No profiles required.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetLicences(this IOpenApiClient operations)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetLicencesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Scopevisio licences
            /// </summary>
            /// Returns the available Scopevisio licences and the assigned users.
            /// No profiles required.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetLicencesAsync(this IOpenApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetLicencesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// customer account information
            /// </summary>
            /// Returns customer and user account info.
            /// No profiles required.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetApplicationContext(this IOpenApiClient operations)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetApplicationContextAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// customer account information
            /// </summary>
            /// Returns customer and user account info.
            /// No profiles required.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetApplicationContextAsync(this IOpenApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetApplicationContextWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// get offer with number (interne Nummer)
            /// </summary>
            /// Returns the Scopevisio offer with the given number (interne Nummer).
            /// Required profile(s) : &lt;i&gt;Angebote (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio offer
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            public static void GetOffer(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetOfferAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get offer with number (interne Nummer)
            /// </summary>
            /// Returns the Scopevisio offer with the given number (interne Nummer).
            /// Required profile(s) : &lt;i&gt;Angebote (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio offer
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOfferAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetOfferWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert offer to dispatch
            /// </summary>
            /// Convert the Scopevisio offer with the given number (interne Nummer) to an
            /// dispatch.
            /// Required profile(s): &lt;i&gt;Angebote (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio offer
            /// </param>
            public static void ConvertOfferToDispatch(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertOfferToDispatchAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert offer to dispatch
            /// </summary>
            /// Convert the Scopevisio offer with the given number (interne Nummer) to an
            /// dispatch.
            /// Required profile(s): &lt;i&gt;Angebote (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio offer
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertOfferToDispatchAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertOfferToDispatchWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert offer to opportunity
            /// </summary>
            /// Convert the Scopevisio offer with the given number (interne Nummer) to an
            /// opportunity.
            /// Required profile(s): &lt;i&gt;Angebote (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio offer
            /// </param>
            public static void ConvertOfferToOpportunity(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertOfferToOpportunityAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert offer to opportunity
            /// </summary>
            /// Convert the Scopevisio offer with the given number (interne Nummer) to an
            /// opportunity.
            /// Required profile(s): &lt;i&gt;Angebote (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio offer
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertOfferToOpportunityAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertOfferToOpportunityWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert offer to order
            /// </summary>
            /// Convert the Scopevisio offer with the given number (interne Nummer) to an
            /// order.
            /// Required profile(s): &lt;i&gt;Angebote (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio offer
            /// </param>
            public static void ConvertOfferToOrder(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertOfferToOrderAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert offer to order
            /// </summary>
            /// Convert the Scopevisio offer with the given number (interne Nummer) to an
            /// order.
            /// Required profile(s): &lt;i&gt;Angebote (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio offer
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertOfferToOrderAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertOfferToOrderWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert offer to outgoing invoice
            /// </summary>
            /// Convert the Scopevisio offer with the given number (interne Nummer) to an
            /// outgoing invoice.
            /// Required profile(s): &lt;i&gt;Angebote (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio offer
            /// </param>
            public static void ConvertOfferToOutgoingInvoice(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertOfferToOutgoingInvoiceAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert offer to outgoing invoice
            /// </summary>
            /// Convert the Scopevisio offer with the given number (interne Nummer) to an
            /// outgoing invoice.
            /// Required profile(s): &lt;i&gt;Angebote (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio offer
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertOfferToOutgoingInvoiceAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertOfferToOutgoingInvoiceWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert offer to recurring invoice
            /// </summary>
            /// Convert the Scopevisio offer with the given number (interne Nummer) to a
            /// recurring invoice.
            /// Required profile(s): &lt;i&gt;Angebote (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio offer
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void ConvertOfferToRecurringInvoice(this IOpenApiClient operations, string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertOfferToRecurringInvoiceAsync(number, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert offer to recurring invoice
            /// </summary>
            /// Convert the Scopevisio offer with the given number (interne Nummer) to a
            /// recurring invoice.
            /// Required profile(s): &lt;i&gt;Angebote (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio offer
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertOfferToRecurringInvoiceAsync(this IOpenApiClient operations, string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertOfferToRecurringInvoiceWithHttpMessagesAsync(number, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// the parent of an offer with the given document number
            /// </summary>
            /// Returns the Scopevisio outgoing invoice document which is parent of the
            /// outgoing invoice with the given document number.
            /// Required profile(s): &lt;i&gt;Angebote (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// document number of a Scopevisio offer
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            public static void GetOfferParent(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetOfferParentAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// the parent of an offer with the given document number
            /// </summary>
            /// Returns the Scopevisio outgoing invoice document which is parent of the
            /// outgoing invoice with the given document number.
            /// Required profile(s): &lt;i&gt;Angebote (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// document number of a Scopevisio offer
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOfferParentAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetOfferParentWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// get the positions for the offer with the given number (interne Nummer)
            /// </summary>
            /// Returns the positions of the offer with the given number (interne Nummer).
            /// Required profile(s): &lt;i&gt;Angebote (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio offer
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,name
            /// </param>
            public static void GetOfferPositions(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetOfferPositionsAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get the positions for the offer with the given number (interne Nummer)
            /// </summary>
            /// Returns the positions of the offer with the given number (interne Nummer).
            /// Required profile(s): &lt;i&gt;Angebote (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio offer
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOfferPositionsAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetOfferPositionsWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Offers
            /// </summary>
            /// Returns all Scopevisio offers.
            /// Required profile(s): &lt;i&gt;Angebote (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetOffers(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetOffersAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Offers
            /// </summary>
            /// Returns all Scopevisio offers.
            /// Required profile(s): &lt;i&gt;Angebote (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOffersAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetOffersWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Opportunities
            /// </summary>
            /// Returns all Scopevisio opportunites.
            /// Required profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
            /// Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetOpportunities(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetOpportunitiesAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Opportunities
            /// </summary>
            /// Returns all Scopevisio opportunites.
            /// Required profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
            /// Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOpportunitiesAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetOpportunitiesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// get opportunity with number (interne Nummer)
            /// </summary>
            /// Returns the Scopevisio sales potential with the given number (interne
            /// Nummer).
            /// Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            public static void GetOpportunity(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetOpportunityAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get opportunity with number (interne Nummer)
            /// </summary>
            /// Returns the Scopevisio sales potential with the given number (interne
            /// Nummer).
            /// Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOpportunityAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetOpportunityWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert opportunity to dispatch
            /// </summary>
            /// Convert the Scopevisio opportunity with the given number (interne Nummer)
            /// to an dispatch.
            /// Required profile(s): &lt;i&gt;Rechnungen, Potenziale
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio opportunity
            /// </param>
            public static void ConvertOpportunityToDispatch(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertOpportunityToDispatchAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert opportunity to dispatch
            /// </summary>
            /// Convert the Scopevisio opportunity with the given number (interne Nummer)
            /// to an dispatch.
            /// Required profile(s): &lt;i&gt;Rechnungen, Potenziale
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio opportunity
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertOpportunityToDispatchAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertOpportunityToDispatchWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert opportunity to offer
            /// </summary>
            /// Convert the Scopevisio opportunity with the given number (interne Nummer)
            /// to an offer.
            /// Required profile(s): &lt;i&gt;Rechnungen, Potenziale
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio opportunity
            /// </param>
            public static void ConvertOpportunityToOffer(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertOpportunityToOfferAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert opportunity to offer
            /// </summary>
            /// Convert the Scopevisio opportunity with the given number (interne Nummer)
            /// to an offer.
            /// Required profile(s): &lt;i&gt;Rechnungen, Potenziale
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio opportunity
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertOpportunityToOfferAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertOpportunityToOfferWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert opportunity to order
            /// </summary>
            /// Convert the Scopevisio opportunity with the given number (interne Nummer)
            /// to an order.
            /// Required profile(s): &lt;i&gt;Rechnungen, Potenziale
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio opportunity
            /// </param>
            public static void ConvertOpportunityToOrder(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertOpportunityToOrderAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert opportunity to order
            /// </summary>
            /// Convert the Scopevisio opportunity with the given number (interne Nummer)
            /// to an order.
            /// Required profile(s): &lt;i&gt;Rechnungen, Potenziale
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio opportunity
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertOpportunityToOrderAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertOpportunityToOrderWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert opportunity to outgoing invoice
            /// </summary>
            /// Convert the Scopevisio opportunity with the given number (interne Nummer)
            /// to an outgoing invoice.
            /// Required profile(s): &lt;i&gt;Rechnungen, Potenziale
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio opportunity
            /// </param>
            public static void ConvertOpportunityToOutgoingInvoice(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertOpportunityToOutgoingInvoiceAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert opportunity to outgoing invoice
            /// </summary>
            /// Convert the Scopevisio opportunity with the given number (interne Nummer)
            /// to an outgoing invoice.
            /// Required profile(s): &lt;i&gt;Rechnungen, Potenziale
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio opportunity
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertOpportunityToOutgoingInvoiceAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertOpportunityToOutgoingInvoiceWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert opportunity to recurring invoice
            /// </summary>
            /// Convert the Scopevisio opportunity with the given number (interne Nummer)
            /// to a recurring invoice.
            /// Required profile(s): &lt;i&gt;Rechnungen, Potenziale
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio opportunity
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void ConvertOpportunityToRecurringInvoice(this IOpenApiClient operations, string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertOpportunityToRecurringInvoiceAsync(number, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert opportunity to recurring invoice
            /// </summary>
            /// Convert the Scopevisio opportunity with the given number (interne Nummer)
            /// to a recurring invoice.
            /// Required profile(s): &lt;i&gt;Rechnungen, Potenziale
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio opportunity
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertOpportunityToRecurringInvoiceAsync(this IOpenApiClient operations, string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertOpportunityToRecurringInvoiceWithHttpMessagesAsync(number, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// get opportunity positions for the given number (interne Nummer)
            /// </summary>
            /// Returns the positions for the opportunity with the given number (interne
            /// Nummer).
            /// Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
            /// Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio potential
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,name
            /// </param>
            public static void GetOpportunityPositions(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetOpportunityPositionsAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get opportunity positions for the given number (interne Nummer)
            /// </summary>
            /// Returns the positions for the opportunity with the given number (interne
            /// Nummer).
            /// Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
            /// Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio potential
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOpportunityPositionsAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetOpportunityPositionsWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// get order with number (interne Nummer)
            /// </summary>
            /// Returns the Scopevisio order with the given number (interne Nummer).
            /// Required profile(s) : &lt;i&gt;Aufträge (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio order
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            public static void GetOrder(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetOrderAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get order with number (interne Nummer)
            /// </summary>
            /// Returns the Scopevisio order with the given number (interne Nummer).
            /// Required profile(s) : &lt;i&gt;Aufträge (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio order
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOrderAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetOrderWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert order to Dispatch
            /// </summary>
            /// Convert the Scopevisio order with the given number (interne Nummer) to an
            /// dispatch.
            /// Required profile(s): &lt;i&gt;Aufträge (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio order
            /// </param>
            public static void ConvertOrderToDispatch(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertOrderToDispatchAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert order to Dispatch
            /// </summary>
            /// Convert the Scopevisio order with the given number (interne Nummer) to an
            /// dispatch.
            /// Required profile(s): &lt;i&gt;Aufträge (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio order
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertOrderToDispatchAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertOrderToDispatchWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert order to offer
            /// </summary>
            /// Convert the Scopevisio order with the given number (interne Nummer) to an
            /// offer.
            /// Required profile(s): &lt;i&gt;Aufträge (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio order
            /// </param>
            public static void ConvertOrderToOffer(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertOrderToOfferAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert order to offer
            /// </summary>
            /// Convert the Scopevisio order with the given number (interne Nummer) to an
            /// offer.
            /// Required profile(s): &lt;i&gt;Aufträge (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio order
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertOrderToOfferAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertOrderToOfferWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert order to opportunity
            /// </summary>
            /// Convert the Scopevisio order with the given number (interne Nummer) to an
            /// opportunity.
            /// Required profile(s): &lt;i&gt;Aufträge (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio order
            /// </param>
            public static void ConvertOrderToOpportunity(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertOrderToOpportunityAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert order to opportunity
            /// </summary>
            /// Convert the Scopevisio order with the given number (interne Nummer) to an
            /// opportunity.
            /// Required profile(s): &lt;i&gt;Aufträge (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio order
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertOrderToOpportunityAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertOrderToOpportunityWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert order to outgoing invoice
            /// </summary>
            /// Convert the Scopevisio order with the given number (interne Nummer) to an
            /// outgoing invoice.
            /// Required profile(s): &lt;i&gt;Aufträge (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio order
            /// </param>
            public static void ConvertOrderToOutgoingInvoice(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertOrderToOutgoingInvoiceAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert order to outgoing invoice
            /// </summary>
            /// Convert the Scopevisio order with the given number (interne Nummer) to an
            /// outgoing invoice.
            /// Required profile(s): &lt;i&gt;Aufträge (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio order
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertOrderToOutgoingInvoiceAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertOrderToOutgoingInvoiceWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert order to recurring invoice
            /// </summary>
            /// Convert the Scopevisio order with the given number (interne Nummer) to a
            /// recurring invoice.
            /// Required profile(s): &lt;i&gt;Aufträge (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio order
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void ConvertOrderToRecurringInvoice(this IOpenApiClient operations, string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertOrderToRecurringInvoiceAsync(number, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert order to recurring invoice
            /// </summary>
            /// Convert the Scopevisio order with the given number (interne Nummer) to a
            /// recurring invoice.
            /// Required profile(s): &lt;i&gt;Aufträge (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio order
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertOrderToRecurringInvoiceAsync(this IOpenApiClient operations, string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertOrderToRecurringInvoiceWithHttpMessagesAsync(number, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// the parent of an order with the given document number
            /// </summary>
            /// Returns the Scopevisio outgoing invoice document which is parent of the
            /// order with the given document number.
            /// Required profile(s): &lt;i&gt;Aufträge (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// document number of a Scopevisio offer
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            public static void GetOrderParent(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetOrderParentAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// the parent of an order with the given document number
            /// </summary>
            /// Returns the Scopevisio outgoing invoice document which is parent of the
            /// order with the given document number.
            /// Required profile(s): &lt;i&gt;Aufträge (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// document number of a Scopevisio offer
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOrderParentAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetOrderParentWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// get the positions for the order with the given number (interne Nummer)
            /// </summary>
            /// Returns the positions of the order with the given number (interne Nummer).
            /// Required profile(s): &lt;i&gt;Aufträge (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio OfferPositions
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,name
            /// </param>
            public static void GetOrderPositions(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetOrderPositionsAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get the positions for the order with the given number (interne Nummer)
            /// </summary>
            /// Returns the positions of the order with the given number (interne Nummer).
            /// Required profile(s): &lt;i&gt;Aufträge (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio OfferPositions
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOrderPositionsAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetOrderPositionsWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Orders
            /// </summary>
            /// Returns all Scopevisio orders.
            /// Required profile(s): &lt;i&gt;Aufträge (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetOrders(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetOrdersAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Orders
            /// </summary>
            /// Returns all Scopevisio orders.
            /// Required profile(s): &lt;i&gt;Aufträge (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOrdersAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetOrdersWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a Scopevisio organisation.
            /// </summary>
            /// Creates a Scopevisio organisation with the given name (if not existing)
            /// and the given scoa (standard chart of accounts). &lt;strong&gt;The scoa
            /// set up takes some time. Please make sure you set your timeout to at least
            /// 5 min.&lt;/strong&gt;
            /// Required profiles: &lt;i&gt;Organisation (Bearbeiten)&lt;/i&gt;
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void CreateOrganisation(this IOpenApiClient operations, OrganisationForm body = default(OrganisationForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateOrganisationAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a Scopevisio organisation.
            /// </summary>
            /// Creates a Scopevisio organisation with the given name (if not existing)
            /// and the given scoa (standard chart of accounts). &lt;strong&gt;The scoa
            /// set up takes some time. Please make sure you set your timeout to at least
            /// 5 min.&lt;/strong&gt;
            /// Required profiles: &lt;i&gt;Organisation (Bearbeiten)&lt;/i&gt;
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateOrganisationAsync(this IOpenApiClient operations, OrganisationForm body = default(OrganisationForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateOrganisationWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// organisations
            /// </summary>
            /// Returns organisations of a customers instance the user has access to.
            /// No profiles required.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void OrganisationJson(this IOpenApiClient operations)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).OrganisationJsonAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// organisations
            /// </summary>
            /// Returns organisations of a customers instance the user has access to.
            /// No profiles required.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task OrganisationJsonAsync(this IOpenApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.OrganisationJsonWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Export templates for offer, opportunity, order, outgoing invoice, credit,
            /// packing slip
            /// </summary>
            /// Returns the Scopevisio expoirt templates for offer, opportunity, order,
            /// outgoing invoice, credit, packing slip.
            /// Required profile(s): &lt;i&gt;Faktura Stammdaten, Opportunities
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetOutgoingInvoiceExportTemplates(this IOpenApiClient operations)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetOutgoingInvoiceExportTemplatesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Export templates for offer, opportunity, order, outgoing invoice, credit,
            /// packing slip
            /// </summary>
            /// Returns the Scopevisio expoirt templates for offer, opportunity, order,
            /// outgoing invoice, credit, packing slip.
            /// Required profile(s): &lt;i&gt;Faktura Stammdaten, Opportunities
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOutgoingInvoiceExportTemplatesAsync(this IOpenApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetOutgoingInvoiceExportTemplatesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// outgoing invoice for number (interne Nummer)
            /// </summary>
            /// Returns the Scopevisio outgoing invoices with the given number (interne
            /// Nummer).
            /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            public static void GetOutgoingInvoice(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetOutgoingInvoiceAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// outgoing invoice for number (interne Nummer)
            /// </summary>
            /// Returns the Scopevisio outgoing invoices with the given number (interne
            /// Nummer).
            /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOutgoingInvoiceAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetOutgoingInvoiceWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert outgoing invoice to dispatch
            /// </summary>
            /// Convert the Scopevisio outgoing invoice with the given number (interne
            /// Nummer) to an dispatch.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            public static void ConvertInvoiceToDispatch(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertInvoiceToDispatchAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert outgoing invoice to dispatch
            /// </summary>
            /// Convert the Scopevisio outgoing invoice with the given number (interne
            /// Nummer) to an dispatch.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertInvoiceToDispatchAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertInvoiceToDispatchWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert outgoing invoice to offer
            /// </summary>
            /// Convert the Scopevisio outgoing invoice with the given number (interne
            /// Nummer) to an offer.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            public static void ConvertInvoiceToOffer(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertInvoiceToOfferAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert outgoing invoice to offer
            /// </summary>
            /// Convert the Scopevisio outgoing invoice with the given number (interne
            /// Nummer) to an offer.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertInvoiceToOfferAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertInvoiceToOfferWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert outgoing invoice to opportunity
            /// </summary>
            /// Convert the Scopevisio outgoing invoice with the given number (interne
            /// Nummer) to an opportunity.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            public static void ConvertInvoiceToOpportunity(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertInvoiceToOpportunityAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert outgoing invoice to opportunity
            /// </summary>
            /// Convert the Scopevisio outgoing invoice with the given number (interne
            /// Nummer) to an opportunity.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertInvoiceToOpportunityAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertInvoiceToOpportunityWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert outgoing invoice to order
            /// </summary>
            /// Convert the Scopevisio outgoing invoice with the given number (interne
            /// Nummer) to an order.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            public static void ConvertInvoiceToOrder(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertInvoiceToOrderAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert outgoing invoice to order
            /// </summary>
            /// Convert the Scopevisio outgoing invoice with the given number (interne
            /// Nummer) to an order.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertInvoiceToOrderAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertInvoiceToOrderWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert outgoing invoice to recurring invoice
            /// </summary>
            /// Convert the Scopevisio outgoing invoice with the given number (interne
            /// Nummer) to a recurring invoice.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void ConvertInvoiceToRecurringInvoice(this IOpenApiClient operations, string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertInvoiceToRecurringInvoiceAsync(number, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert outgoing invoice to recurring invoice
            /// </summary>
            /// Convert the Scopevisio outgoing invoice with the given number (interne
            /// Nummer) to a recurring invoice.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertInvoiceToRecurringInvoiceAsync(this IOpenApiClient operations, string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertInvoiceToRecurringInvoiceWithHttpMessagesAsync(number, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// The file for the outgoing invoice
            /// </summary>
            /// Returns the last file for the given outgoing invoice number.
            /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// document number of a Scopevisio outgoing invoice
            /// </param>
            public static void GetOutgoingInvoiceFile(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetOutgoingInvoiceFileAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// The file for the outgoing invoice
            /// </summary>
            /// Returns the last file for the given outgoing invoice number.
            /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// document number of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOutgoingInvoiceFileAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetOutgoingInvoiceFileWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Add a file to a Scopevisio outgoing invoice
            /// </summary>
            /// Adds a file to a Scopevisio outgoing invoice.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// documentNumber (Belegnummer) of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void AddFileToOutgoingInvoice(this IOpenApiClient operations, string number, FileForm body = default(FileForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).AddFileToOutgoingInvoiceAsync(number, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a file to a Scopevisio outgoing invoice
            /// </summary>
            /// Adds a file to a Scopevisio outgoing invoice.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// documentNumber (Belegnummer) of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddFileToOutgoingInvoiceAsync(this IOpenApiClient operations, string number, FileForm body = default(FileForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AddFileToOutgoingInvoiceWithHttpMessagesAsync(number, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// the parent of an outgoing invoice with the given document number
            /// </summary>
            /// Returns the Scopevisio outgoing invoice document which is parent of the
            /// outgoing invoice with the given document number.
            /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// document number of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            public static void GetOutgoingInvoiceParent(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetOutgoingInvoiceParentAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// the parent of an outgoing invoice with the given document number
            /// </summary>
            /// Returns the Scopevisio outgoing invoice document which is parent of the
            /// outgoing invoice with the given document number.
            /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// document number of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOutgoingInvoiceParentAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetOutgoingInvoiceParentWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// get outgoing invoice positions for the given number (interne Nummer)
            /// </summary>
            /// Returns the positions for the outgoing invoice with the given number
            /// (interne Nummer).
            /// Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
            /// Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,name
            /// </param>
            public static void GetOutgoingInvoicePositions(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetOutgoingInvoicePositionsAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get outgoing invoice positions for the given number (interne Nummer)
            /// </summary>
            /// Returns the positions for the outgoing invoice with the given number
            /// (interne Nummer).
            /// Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
            /// Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOutgoingInvoicePositionsAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetOutgoingInvoicePositionsWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Post an outgoing invoice.
            /// </summary>
            /// Post the outgoing invoice with the given number(interne Nummer).
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            public static void PostOutgoingInvoice(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).PostOutgoingInvoiceAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post an outgoing invoice.
            /// </summary>
            /// Post the outgoing invoice with the given number(interne Nummer).
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostOutgoingInvoiceAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PostOutgoingInvoiceWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Link to the last file for the outgoing invoice in the teamwork web
            /// application
            /// </summary>
            /// Returns a link to the last file for the given outgoing invoice number in
            /// the teamwork web application. You need to be logged in to the teamwork
            /// webapp.
            /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// document number of a Scopevisio outgoing invoice
            /// </param>
            public static void GetOutgoingInvoiceTeamworkFileLink(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetOutgoingInvoiceTeamworkFileLinkAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Link to the last file for the outgoing invoice in the teamwork web
            /// application
            /// </summary>
            /// Returns a link to the last file for the given outgoing invoice number in
            /// the teamwork web application. You need to be logged in to the teamwork
            /// webapp.
            /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// document number of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOutgoingInvoiceTeamworkFileLinkAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetOutgoingInvoiceTeamworkFileLinkWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// outgoing invoices
            /// </summary>
            /// Returns the Scopevisio outgoing invoices. &lt;i&gt;
            /// Required profile(s): Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetOutgoingInvoices(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetOutgoingInvoicesAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// outgoing invoices
            /// </summary>
            /// Returns the Scopevisio outgoing invoices. &lt;i&gt;
            /// Required profile(s): Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOutgoingInvoicesAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetOutgoingInvoicesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Imports outgoing invoices
            /// </summary>
            /// Required profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
            /// Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void ImportOutgoingInvoices(this IOpenApiClient operations, OutgoingInvoiceImportForm body = default(OutgoingInvoiceImportForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ImportOutgoingInvoicesAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Imports outgoing invoices
            /// </summary>
            /// Required profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
            /// Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ImportOutgoingInvoicesAsync(this IOpenApiClient operations, OutgoingInvoiceImportForm body = default(OutgoingInvoiceImportForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ImportOutgoingInvoicesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a new payment term.
            /// </summary>
            /// Creates a new payment term.
            /// Required profile(s): &lt;i&gt;Stammdaten, Zahlungsbedingungen
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object CreatePaymentTerm(this IOpenApiClient operations, PaymentTermForm body = default(PaymentTermForm))
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).CreatePaymentTermAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new payment term.
            /// </summary>
            /// Creates a new payment term.
            /// Required profile(s): &lt;i&gt;Stammdaten, Zahlungsbedingungen
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreatePaymentTermAsync(this IOpenApiClient operations, PaymentTermForm body = default(PaymentTermForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePaymentTermWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets payment term for id.
            /// </summary>
            /// Returns the Scopevisio payment term with the given id.
            /// Required profile(s): &lt;i&gt;Stammdaten, Zahlungsbedingungen
            /// (Anzeigen)&lt;/i&gt;
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio payment term
            /// </param>
            public static void GetPaymentTerm(this IOpenApiClient operations, long id)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetPaymentTermAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets payment term for id.
            /// </summary>
            /// Returns the Scopevisio payment term with the given id.
            /// Required profile(s): &lt;i&gt;Stammdaten, Zahlungsbedingungen
            /// (Anzeigen)&lt;/i&gt;
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio payment term
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetPaymentTermAsync(this IOpenApiClient operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetPaymentTermWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Update payment term.
            /// </summary>
            /// Update the payment term with the given id.
            /// Required profile(s): &lt;i&gt;Stammdaten, Zahlungsbedingungen
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void UpdatePaymentTerm(this IOpenApiClient operations, long id, PaymentTermForm body = default(PaymentTermForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).UpdatePaymentTermAsync(id, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update payment term.
            /// </summary>
            /// Update the payment term with the given id.
            /// Required profile(s): &lt;i&gt;Stammdaten, Zahlungsbedingungen
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdatePaymentTermAsync(this IOpenApiClient operations, long id, PaymentTermForm body = default(PaymentTermForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdatePaymentTermWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get payment terms..
            /// </summary>
            /// Returns all payment terms for the current Scopeviso organisation.
            /// Required profile(s): &lt;i&gt;Stammdaten, Zahlungsbedingungen
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// name, netTimeLimit
            /// </param>
            public static void GetPaymentTerms(this IOpenApiClient operations, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetPaymentTermsAsync(fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get payment terms..
            /// </summary>
            /// Returns all payment terms for the current Scopeviso organisation.
            /// Required profile(s): &lt;i&gt;Stammdaten, Zahlungsbedingungen
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// name, netTimeLimit
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetPaymentTermsAsync(this IOpenApiClient operations, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetPaymentTermsWithHttpMessagesAsync(fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// personal journal entries
            /// </summary>
            /// Returns the Scopevisio journal entries.
            /// Required profile(s): &lt;i&gt;Journal (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetPersonalJournalEntries(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetPersonalJournalEntriesAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// personal journal entries
            /// </summary>
            /// Returns the Scopevisio journal entries.
            /// Required profile(s): &lt;i&gt;Journal (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetPersonalJournalEntriesAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetPersonalJournalEntriesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// import postings
            /// </summary>
            /// Required profiles: &lt;i&gt;Datenimport (Bearbeiten)&lt;/i&gt;.
            /// The examples and allowable values refer to chart of accounts SKR03. If you
            /// use another chart of accounts you should check your settings in the
            /// Scopevisio desktop application.
            /// 
            /// To import a posting two or more postings rows are needed. More information
            /// and data structure can be found inside the Scopevisio client
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void CreatePostings(this IOpenApiClient operations, Postings body = default(Postings))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreatePostingsAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// import postings
            /// </summary>
            /// Required profiles: &lt;i&gt;Datenimport (Bearbeiten)&lt;/i&gt;.
            /// The examples and allowable values refer to chart of accounts SKR03. If you
            /// use another chart of accounts you should check your settings in the
            /// Scopevisio desktop application.
            /// 
            /// To import a posting two or more postings rows are needed. More information
            /// and data structure can be found inside the Scopevisio client
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreatePostingsAsync(this IOpenApiClient operations, Postings body = default(Postings), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreatePostingsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// creates a new product
            /// </summary>
            /// Creates a new Scopevisio product.
            /// Required profile(s): &lt;i&gt;Produktverwaltung (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// content in JSON format, topic is required
            /// </param>
            public static void CreateProduct(this IOpenApiClient operations, ProductForm body)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateProductAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// creates a new product
            /// </summary>
            /// Creates a new Scopevisio product.
            /// Required profile(s): &lt;i&gt;Produktverwaltung (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// content in JSON format, topic is required
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateProductAsync(this IOpenApiClient operations, ProductForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateProductWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// get product by id
            /// </summary>
            /// Returns the Scopevisio product with the given id.
            /// Required profile(s): &lt;i&gt;Produktverwaltung (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// the id of the product you want to retrieve
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,number,name
            /// </param>
            public static void GetProduct(this IOpenApiClient operations, long id, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetProductAsync(id, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get product by id
            /// </summary>
            /// Returns the Scopevisio product with the given id.
            /// Required profile(s): &lt;i&gt;Produktverwaltung (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// the id of the product you want to retrieve
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,number,name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetProductAsync(this IOpenApiClient operations, long id, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetProductWithHttpMessagesAsync(id, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// update product by id
            /// </summary>
            /// Updates the Scopevisio product with the given id.
            /// Required profile(s): &lt;i&gt;Produktverwaltung (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio product
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void UpdateProduct(this IOpenApiClient operations, long id, ProductForm body = default(ProductForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).UpdateProductAsync(id, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// update product by id
            /// </summary>
            /// Updates the Scopevisio product with the given id.
            /// Required profile(s): &lt;i&gt;Produktverwaltung (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio product
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateProductAsync(this IOpenApiClient operations, long id, ProductForm body = default(ProductForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateProductWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// creates a new productGroup
            /// </summary>
            /// Creates a new Scopevisio productGroup.
            /// Required profile(s): &lt;i&gt;Produktverwaltung (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// content in JSON format, topic is required
            /// </param>
            public static void CreateProductGroup(this IOpenApiClient operations, ProductGroupForm name)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateProductGroupAsync(name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// creates a new productGroup
            /// </summary>
            /// Creates a new Scopevisio productGroup.
            /// Required profile(s): &lt;i&gt;Produktverwaltung (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// content in JSON format, topic is required
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateProductGroupAsync(this IOpenApiClient operations, ProductGroupForm name, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateProductGroupWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// get all productGroups
            /// </summary>
            /// Returns all the Scopevisio productGroups.
            /// Required profile(s): &lt;i&gt;Produktverwaltung (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetProductGroup(this IOpenApiClient operations)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetProductGroupAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get all productGroups
            /// </summary>
            /// Returns all the Scopevisio productGroups.
            /// Required profile(s): &lt;i&gt;Produktverwaltung (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetProductGroupAsync(this IOpenApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetProductGroupWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// products
            /// </summary>
            /// Returns all Scopevisio products.
            /// Required profile(s): &lt;i&gt;Produktverwaltung (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetProducts(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetProductsAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// products
            /// </summary>
            /// Returns all Scopevisio products.
            /// Required profile(s): &lt;i&gt;Produktverwaltung (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetProductsAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetProductsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// create a new project
            /// </summary>
            /// Creates a new Project
            /// Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void CreateProject(this IOpenApiClient operations, ProjectForm body = default(ProjectForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateProjectAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a new project
            /// </summary>
            /// Creates a new Project
            /// Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateProjectAsync(this IOpenApiClient operations, ProjectForm body = default(ProjectForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateProjectWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// project by id
            /// </summary>
            /// Returns the Scopevisio project with the given id.
            /// Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,number,name
            /// </param>
            public static void GetProject(this IOpenApiClient operations, long id, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetProjectAsync(id, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// project by id
            /// </summary>
            /// Returns the Scopevisio project with the given id.
            /// Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,number,name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetProjectAsync(this IOpenApiClient operations, long id, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetProjectWithHttpMessagesAsync(id, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// update project by id
            /// </summary>
            /// Updates the Scopevisio project with the given id.
            /// Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio Project
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void UpdateProject(this IOpenApiClient operations, long id, ProjectForm body = default(ProjectForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).UpdateProjectAsync(id, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// update project by id
            /// </summary>
            /// Updates the Scopevisio project with the given id.
            /// Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio Project
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateProjectAsync(this IOpenApiClient operations, long id, ProjectForm body = default(ProjectForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateProjectWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Assign mail to a project.
            /// </summary>
            /// Assigns the mail with the given mailId to the project with the given
            /// projectId.
            /// Required profile(s): &lt;i&gt;Projekte, Mailbot, Mailagent
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// </param>
            /// <param name='body'>
            /// content in JSON format
            /// </param>
            public static void AssignMailProject(this IOpenApiClient operations, long projectId, AssignMailForm body)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).AssignMailProjectAsync(projectId, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assign mail to a project.
            /// </summary>
            /// Assigns the mail with the given mailId to the project with the given
            /// projectId.
            /// Required profile(s): &lt;i&gt;Projekte, Mailbot, Mailagent
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// </param>
            /// <param name='body'>
            /// content in JSON format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AssignMailProjectAsync(this IOpenApiClient operations, long projectId, AssignMailForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AssignMailProjectWithHttpMessagesAsync(projectId, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a new comment.
            /// </summary>
            /// Creates a new comment.
            /// Required profile(s): &lt;i&gt;Projekte, Pinnwand (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// projectId of a Scopevisio project
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void CreateProjectComment(this IOpenApiClient operations, long projectId, BlogEntryForm body = default(BlogEntryForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateProjectCommentAsync(projectId, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new comment.
            /// </summary>
            /// Creates a new comment.
            /// Required profile(s): &lt;i&gt;Projekte, Pinnwand (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// projectId of a Scopevisio project
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateProjectCommentAsync(this IOpenApiClient operations, long projectId, BlogEntryForm body = default(BlogEntryForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateProjectCommentWithHttpMessagesAsync(projectId, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Comments by projectId.
            /// </summary>
            /// Returns the Scopevisio comments with the given projectId.
            /// Required profile(s): &lt;i&gt;Projekte, Pinnwand (Anzeigen)&lt;/i&gt;
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Id of a Scopevisio project
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,blogId,body
            /// </param>
            public static void GetBlogEntriesByProjectId(this IOpenApiClient operations, long projectId, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetBlogEntriesByProjectIdAsync(projectId, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Comments by projectId.
            /// </summary>
            /// Returns the Scopevisio comments with the given projectId.
            /// Required profile(s): &lt;i&gt;Projekte, Pinnwand (Anzeigen)&lt;/i&gt;
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Id of a Scopevisio project
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,blogId,body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetBlogEntriesByProjectIdAsync(this IOpenApiClient operations, long projectId, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetBlogEntriesByProjectIdWithHttpMessagesAsync(projectId, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Add a file to a Scopevisio project
            /// </summary>
            /// Adds a file to a Scopevisio project.
            /// Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// projectId (MID) of a Scopevisio project.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void AddProjectFile(this IOpenApiClient operations, long projectId, TeamworkFileForm body = default(TeamworkFileForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).AddProjectFileAsync(projectId, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a file to a Scopevisio project
            /// </summary>
            /// Adds a file to a Scopevisio project.
            /// Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// projectId (MID) of a Scopevisio project.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddProjectFileAsync(this IOpenApiClient operations, long projectId, TeamworkFileForm body = default(TeamworkFileForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AddProjectFileWithHttpMessagesAsync(projectId, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a project employee (Projektteam-Eintrag)
            /// </summary>
            /// Creates a new project employee (Projektteam-Eintrag) for a Scopevisio
            /// project.
            /// Required profile(s): &lt;i&gt;Kontakte, Projekte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// </param>
            /// <param name='body'>
            /// content in JSON format
            /// </param>
            public static void CreateProjectEmployee(this IOpenApiClient operations, long projectId, ProjectEmployeeForm body)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateProjectEmployeeAsync(projectId, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a project employee (Projektteam-Eintrag)
            /// </summary>
            /// Creates a new project employee (Projektteam-Eintrag) for a Scopevisio
            /// project.
            /// Required profile(s): &lt;i&gt;Kontakte, Projekte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// </param>
            /// <param name='body'>
            /// content in JSON format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateProjectEmployeeAsync(this IOpenApiClient operations, long projectId, ProjectEmployeeForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateProjectEmployeeWithHttpMessagesAsync(projectId, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get project employee (Projektteam-Eintrag) by id
            /// </summary>
            /// Returns project employee with the given employee id (not contact id).
            /// Required profile(s): &lt;i&gt;Kontakte, Projekte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='employeeId'>
            /// Id of a Scopevisio project employee
            /// </param>
            /// <param name='projectId'>
            /// </param>
            /// <param name='fields'>
            /// Comma separated list of fields to show in response
            /// 
            /// id,type,subtype
            /// </param>
            public static void GetProjectEmployee(this IOpenApiClient operations, long employeeId, long projectId, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetProjectEmployeeAsync(employeeId, projectId, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get project employee (Projektteam-Eintrag) by id
            /// </summary>
            /// Returns project employee with the given employee id (not contact id).
            /// Required profile(s): &lt;i&gt;Kontakte, Projekte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='employeeId'>
            /// Id of a Scopevisio project employee
            /// </param>
            /// <param name='projectId'>
            /// </param>
            /// <param name='fields'>
            /// Comma separated list of fields to show in response
            /// 
            /// id,type,subtype
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetProjectEmployeeAsync(this IOpenApiClient operations, long employeeId, long projectId, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetProjectEmployeeWithHttpMessagesAsync(employeeId, projectId, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// update project employee (Projektteam-Eintrag) by employeeId (not
            /// contactId).
            /// </summary>
            /// Updates the employee of a Scopevisio project with the given employeeId.
            /// Required profile(s): &lt;i&gt;Kontakte, Projekte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// </param>
            /// <param name='employeeId'>
            /// </param>
            /// <param name='body'>
            /// content in JSON format
            /// </param>
            public static void UpdateProjectEmployee(this IOpenApiClient operations, long projectId, long employeeId, ProjectEmployeeForm body)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).UpdateProjectEmployeeAsync(projectId, employeeId, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// update project employee (Projektteam-Eintrag) by employeeId (not
            /// contactId).
            /// </summary>
            /// Updates the employee of a Scopevisio project with the given employeeId.
            /// Required profile(s): &lt;i&gt;Kontakte, Projekte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// </param>
            /// <param name='employeeId'>
            /// </param>
            /// <param name='body'>
            /// content in JSON format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateProjectEmployeeAsync(this IOpenApiClient operations, long projectId, long employeeId, ProjectEmployeeForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateProjectEmployeeWithHttpMessagesAsync(projectId, employeeId, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// project employees (Projektteam) of a given project
            /// </summary>
            /// Returns the project employees (Projektteam) of a Scopevisio project with
            /// the given projectId.
            /// Required profile(s): &lt;i&gt;Kontakte, Projekte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// id of a Scopevisio project
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetProjectEmployees(this IOpenApiClient operations, long projectId, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetProjectEmployeesAsync(projectId, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// project employees (Projektteam) of a given project
            /// </summary>
            /// Returns the project employees (Projektteam) of a Scopevisio project with
            /// the given projectId.
            /// Required profile(s): &lt;i&gt;Kontakte, Projekte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// id of a Scopevisio project
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetProjectEmployeesAsync(this IOpenApiClient operations, long projectId, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetProjectEmployeesWithHttpMessagesAsync(projectId, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get project resources.
            /// </summary>
            /// Returns the project resources.
            /// Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectStartFrom'>
            /// After which date the project start date should be. It must be provided as
            /// an epoch timestamp in milliseconds.
            /// </param>
            /// <param name='projectStartTo'>
            /// Before which date the project start date should be. It must be provided as
            /// an epoch timestamp in milliseconds.
            /// </param>
            /// <param name='searchSpecification'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// &lt;b&gt;Please consider: the fields "month","monthDays","workDays",
            /// "availableMonthDays" are excluded from the search.&lt;/b&gt;
            /// </param>
            public static object GetProjectResources(this IOpenApiClient operations, long projectStartFrom, long projectStartTo, string searchSpecification = default(string))
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).GetProjectResourcesAsync(projectStartFrom, projectStartTo, searchSpecification), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get project resources.
            /// </summary>
            /// Returns the project resources.
            /// Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectStartFrom'>
            /// After which date the project start date should be. It must be provided as
            /// an epoch timestamp in milliseconds.
            /// </param>
            /// <param name='projectStartTo'>
            /// Before which date the project start date should be. It must be provided as
            /// an epoch timestamp in milliseconds.
            /// </param>
            /// <param name='searchSpecification'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// &lt;b&gt;Please consider: the fields "month","monthDays","workDays",
            /// "availableMonthDays" are excluded from the search.&lt;/b&gt;
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetProjectResourcesAsync(this IOpenApiClient operations, long projectStartFrom, long projectStartTo, string searchSpecification = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProjectResourcesWithHttpMessagesAsync(projectStartFrom, projectStartTo, searchSpecification, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get project revenue
            /// </summary>
            /// Get project revenue.
            /// Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectStartFrom'>
            /// After which date the project start date should be. It must be provided as
            /// an epoch timestamp in milliseconds.
            /// </param>
            /// <param name='projectStartTo'>
            /// Before which date the project start date should be. It must be provided as
            /// an epoch timestamp in milliseconds.
            /// </param>
            /// <param name='revenueType'>
            /// revenueType(Umsatzart), the wished revenue Type. (Umsatzart), 0 = Planung,
            /// 1 = Realisierung, 2 = Abweichung, if not provided revenueType is set to
            /// "Planung"
            /// </param>
            /// <param name='searchSpecification'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// &lt;b&gt;Please consider: the fields "month","monthRevenue","id" are
            /// excluded from the search.&lt;/b&gt;
            /// </param>
            public static object GetProjectRevenue(this IOpenApiClient operations, long projectStartFrom, long projectStartTo, long? revenueType = default(long?), string searchSpecification = default(string))
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).GetProjectRevenueAsync(projectStartFrom, projectStartTo, revenueType, searchSpecification), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get project revenue
            /// </summary>
            /// Get project revenue.
            /// Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectStartFrom'>
            /// After which date the project start date should be. It must be provided as
            /// an epoch timestamp in milliseconds.
            /// </param>
            /// <param name='projectStartTo'>
            /// Before which date the project start date should be. It must be provided as
            /// an epoch timestamp in milliseconds.
            /// </param>
            /// <param name='revenueType'>
            /// revenueType(Umsatzart), the wished revenue Type. (Umsatzart), 0 = Planung,
            /// 1 = Realisierung, 2 = Abweichung, if not provided revenueType is set to
            /// "Planung"
            /// </param>
            /// <param name='searchSpecification'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// &lt;b&gt;Please consider: the fields "month","monthRevenue","id" are
            /// excluded from the search.&lt;/b&gt;
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetProjectRevenueAsync(this IOpenApiClient operations, long projectStartFrom, long projectStartTo, long? revenueType = default(long?), string searchSpecification = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProjectRevenueWithHttpMessagesAsync(projectStartFrom, projectStartTo, revenueType, searchSpecification, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// projects
            /// </summary>
            /// Returns Scopevisio projects.
            /// Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetProjects(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetProjectsAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// projects
            /// </summary>
            /// Returns Scopevisio projects.
            /// Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetProjectsAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetProjectsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// recurring invoice for number (interne Nummer)
            /// </summary>
            /// Returns the Scopevisio recurring invoice with the given number (interne
            /// Nummer).
            /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            public static void GetRecurringInvoice(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetRecurringInvoiceAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// recurring invoice for number (interne Nummer)
            /// </summary>
            /// Returns the Scopevisio recurring invoice with the given number (interne
            /// Nummer).
            /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio outgoing invoice
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id, documentNumber
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetRecurringInvoiceAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetRecurringInvoiceWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Update the recurrence data of an invoice.
            /// </summary>
            /// Update the recurrence data of the invoice with the given number(interne
            /// Nummer).
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio recurring invoice
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void UpdateRecurringInvoice(this IOpenApiClient operations, string number, RecurringInvoiceForm body = default(RecurringInvoiceForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).UpdateRecurringInvoiceAsync(number, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the recurrence data of an invoice.
            /// </summary>
            /// Update the recurrence data of the invoice with the given number(interne
            /// Nummer).
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio recurring invoice
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateRecurringInvoiceAsync(this IOpenApiClient operations, string number, RecurringInvoiceForm body = default(RecurringInvoiceForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateRecurringInvoiceWithHttpMessagesAsync(number, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert recurring invoice to dispatch
            /// </summary>
            /// Convert the Scopevisio recurring invoice with the given number (interne
            /// Nummer) to an dispatch.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio recurring invoice
            /// </param>
            public static void ConvertRecurringInvoiceToDispatch(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertRecurringInvoiceToDispatchAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert recurring invoice to dispatch
            /// </summary>
            /// Convert the Scopevisio recurring invoice with the given number (interne
            /// Nummer) to an dispatch.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio recurring invoice
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertRecurringInvoiceToDispatchAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertRecurringInvoiceToDispatchWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert recurring invoice to offer
            /// </summary>
            /// Convert the Scopevisio recurring invoice with the given number (interne
            /// Nummer) to an offer.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio recurring invoice
            /// </param>
            public static void ConvertRecurringInvoiceToOffer(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertRecurringInvoiceToOfferAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert recurring invoice to offer
            /// </summary>
            /// Convert the Scopevisio recurring invoice with the given number (interne
            /// Nummer) to an offer.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio recurring invoice
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertRecurringInvoiceToOfferAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertRecurringInvoiceToOfferWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert recurring invoice to opportunity
            /// </summary>
            /// Convert the Scopevisio recurring invoice with the given number (interne
            /// Nummer) to an opportunity.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio recurring invoice
            /// </param>
            public static void ConvertRecurringInvoiceToOpportunity(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertRecurringInvoiceToOpportunityAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert recurring invoice to opportunity
            /// </summary>
            /// Convert the Scopevisio recurring invoice with the given number (interne
            /// Nummer) to an opportunity.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio recurring invoice
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertRecurringInvoiceToOpportunityAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertRecurringInvoiceToOpportunityWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert recurring invoice to order
            /// </summary>
            /// Convert the Scopevisio recurring invoice with the given number (interne
            /// Nummer) to an order.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio recurring invoice
            /// </param>
            public static void ConvertRecurringInvoiceToOrder(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertRecurringInvoiceToOrderAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert recurring invoice to order
            /// </summary>
            /// Convert the Scopevisio recurring invoice with the given number (interne
            /// Nummer) to an order.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio recurring invoice
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertRecurringInvoiceToOrderAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertRecurringInvoiceToOrderWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Convert recurring invoice to recurring invoice
            /// </summary>
            /// Convert the Scopevisio recurring invoice with the given number (interne
            /// Nummer) to a recurring invoice.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio recurring invoice
            /// </param>
            public static void ConvertRecurringInvoiceToOutgoingInvoice(this IOpenApiClient operations, string number)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ConvertRecurringInvoiceToOutgoingInvoiceAsync(number), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert recurring invoice to recurring invoice
            /// </summary>
            /// Convert the Scopevisio recurring invoice with the given number (interne
            /// Nummer) to a recurring invoice.
            /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio recurring invoice
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConvertRecurringInvoiceToOutgoingInvoiceAsync(this IOpenApiClient operations, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ConvertRecurringInvoiceToOutgoingInvoiceWithHttpMessagesAsync(number, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// get recurring invoice positions for the given number (interne Nummer)
            /// </summary>
            /// Returns the positions for the recurring invoice with the given number
            /// (interne Nummer).
            /// Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
            /// Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio recurring invoice
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,name
            /// </param>
            public static void GetRecurringInvoicePositions(this IOpenApiClient operations, string number, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetRecurringInvoicePositionsAsync(number, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get recurring invoice positions for the given number (interne Nummer)
            /// </summary>
            /// Returns the positions for the recurring invoice with the given number
            /// (interne Nummer).
            /// Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
            /// Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// number (interne Nummer) of a Scopevisio recurring invoice
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetRecurringInvoicePositionsAsync(this IOpenApiClient operations, string number, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetRecurringInvoicePositionsWithHttpMessagesAsync(number, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// recurring invoices
            /// </summary>
            /// Returns the Scopevisio recurring invoices. &lt;i&gt;
            /// Required profile(s): Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetRecurringInvoices(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetRecurringInvoicesAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// recurring invoices
            /// </summary>
            /// Returns the Scopevisio recurring invoices. &lt;i&gt;
            /// Required profile(s): Rechnungen (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetRecurringInvoicesAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetRecurringInvoicesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Exports accounting reports
            /// </summary>
            /// Required profile(s): &lt;code&gt;Berichte, Debitoren, Kreditoren
            /// (Anzeigen)&lt;/code&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// The report type to export:&lt;ul&gt;&lt;li&gt;susa_account = SuSa
            /// Sachkonten&lt;/li&gt;&lt;li&gt;susa_debitor = SuSa
            /// Debitorkonten&lt;/li&gt;&lt;li&gt;susa_creditor = SuSa
            /// Kreditorkonten&lt;/li&gt;&lt;li&gt;bilanz =
            /// Bilanz&lt;/li&gt;&lt;li&gt;guv = Gewinn- und
            /// Verlustrechnung&lt;/li&gt;&lt;li&gt;bwa = Betriebswirtschaftliche
            /// Auswertung&lt;/li&gt;&lt;/ul&gt;. Possible values include:
            /// 'susa_account', 'susa_debitor', 'susa_creditor', 'bilanz', 'guv', 'bwa'
            /// </param>
            /// <param name='startDate'>
            /// Start date. Format: &lt;code&gt;dd.MM.yyyy&lt;/code&gt;
            /// </param>
            /// <param name='endDate'>
            /// End date. Format: &lt;code&gt;dd.MM.yyyy&lt;/code&gt;
            /// </param>
            /// <param name='reportName'>
            /// Report name, applies only for type bilanz, guv, bwa
            /// </param>
            /// <param name='outputFormat'>
            /// Output format. Possible values include: 'pdf', 'csv', 'xml', 'json'
            /// </param>
            /// <param name='includeHeader'>
            /// Trigger: Include header in csv export
            /// </param>
            /// <param name='includeZeroValued'>
            /// Trigger: Include zero values in export
            /// </param>
            public static void GetReport(this IOpenApiClient operations, string type, string startDate, string endDate, string reportName = default(string), string outputFormat = "csv", bool? includeHeader = default(bool?), bool? includeZeroValued = default(bool?))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetReportAsync(type, startDate, endDate, reportName, outputFormat, includeHeader, includeZeroValued), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exports accounting reports
            /// </summary>
            /// Required profile(s): &lt;code&gt;Berichte, Debitoren, Kreditoren
            /// (Anzeigen)&lt;/code&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// The report type to export:&lt;ul&gt;&lt;li&gt;susa_account = SuSa
            /// Sachkonten&lt;/li&gt;&lt;li&gt;susa_debitor = SuSa
            /// Debitorkonten&lt;/li&gt;&lt;li&gt;susa_creditor = SuSa
            /// Kreditorkonten&lt;/li&gt;&lt;li&gt;bilanz =
            /// Bilanz&lt;/li&gt;&lt;li&gt;guv = Gewinn- und
            /// Verlustrechnung&lt;/li&gt;&lt;li&gt;bwa = Betriebswirtschaftliche
            /// Auswertung&lt;/li&gt;&lt;/ul&gt;. Possible values include:
            /// 'susa_account', 'susa_debitor', 'susa_creditor', 'bilanz', 'guv', 'bwa'
            /// </param>
            /// <param name='startDate'>
            /// Start date. Format: &lt;code&gt;dd.MM.yyyy&lt;/code&gt;
            /// </param>
            /// <param name='endDate'>
            /// End date. Format: &lt;code&gt;dd.MM.yyyy&lt;/code&gt;
            /// </param>
            /// <param name='reportName'>
            /// Report name, applies only for type bilanz, guv, bwa
            /// </param>
            /// <param name='outputFormat'>
            /// Output format. Possible values include: 'pdf', 'csv', 'xml', 'json'
            /// </param>
            /// <param name='includeHeader'>
            /// Trigger: Include header in csv export
            /// </param>
            /// <param name='includeZeroValued'>
            /// Trigger: Include zero values in export
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetReportAsync(this IOpenApiClient operations, string type, string startDate, string endDate, string reportName = default(string), string outputFormat = "csv", bool? includeHeader = default(bool?), bool? includeZeroValued = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetReportWithHttpMessagesAsync(type, startDate, endDate, reportName, outputFormat, includeHeader, includeZeroValued, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a new sales project (Vertriebsprojekt)
            /// </summary>
            /// Creates a new sales project (Vertriebsprojekt). The created project has
            /// "sphereLead" set. It is not possible to convert a  Lead (project with
            /// "sphereLead" set) to Interessent ("sphereInterested" set) via webservice.
            /// The conversion must be done via the Scopevisio client. To retrieve a
            /// sales project use the endpoint project/{id}.
            /// Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void CreateSalesProject(this IOpenApiClient operations, SalesProjectForm body = default(SalesProjectForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateSalesProjectAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new sales project (Vertriebsprojekt)
            /// </summary>
            /// Creates a new sales project (Vertriebsprojekt). The created project has
            /// "sphereLead" set. It is not possible to convert a  Lead (project with
            /// "sphereLead" set) to Interessent ("sphereInterested" set) via webservice.
            /// The conversion must be done via the Scopevisio client. To retrieve a
            /// sales project use the endpoint project/{id}.
            /// Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateSalesProjectAsync(this IOpenApiClient operations, SalesProjectForm body = default(SalesProjectForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateSalesProjectWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// update sales project (Vertriebsprojekt) by id
            /// </summary>
            /// Updates the Scopevisio sales project (Vertriebsprojekt) with the given id.
            /// It is not possible to convert a  Lead (project "sphereLead" set) to
            /// Interessent ("sphereInterested" set) via webservice. The conversion must
            /// be done via the Scopevisio client. Setting the interested fields like
            /// intrestedBudget, intrestedAuthority, etc. is only possible if the
            /// projectis already Interessent ("sphereInterested" set). Otherwise they
            /// are overridden by the conversion process. To retrieve a sales project use
            /// the endpoint project/{id}.
            /// Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio Project
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void UpdateSalesProject(this IOpenApiClient operations, long id, SalesProjectForm body = default(SalesProjectForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).UpdateSalesProjectAsync(id, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// update sales project (Vertriebsprojekt) by id
            /// </summary>
            /// Updates the Scopevisio sales project (Vertriebsprojekt) with the given id.
            /// It is not possible to convert a  Lead (project "sphereLead" set) to
            /// Interessent ("sphereInterested" set) via webservice. The conversion must
            /// be done via the Scopevisio client. Setting the interested fields like
            /// intrestedBudget, intrestedAuthority, etc. is only possible if the
            /// projectis already Interessent ("sphereInterested" set). Otherwise they
            /// are overridden by the conversion process. To retrieve a sales project use
            /// the endpoint project/{id}.
            /// Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio Project
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateSalesProjectAsync(this IOpenApiClient operations, long id, SalesProjectForm body = default(SalesProjectForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateSalesProjectWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a new subtask (Tätigkeit)
            /// </summary>
            /// Creates a new subtask (Tätigkeit) for a Scopevisio Task
            /// Required profile(s): &lt;i&gt;Aufgabe, Kontakte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// content in JSON format, taskId is required
            /// </param>
            public static void CreateSubtask(this IOpenApiClient operations, SubtaskForm body)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateSubtaskAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new subtask (Tätigkeit)
            /// </summary>
            /// Creates a new subtask (Tätigkeit) for a Scopevisio Task
            /// Required profile(s): &lt;i&gt;Aufgabe, Kontakte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// content in JSON format, taskId is required
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateSubtaskAsync(this IOpenApiClient operations, SubtaskForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateSubtaskWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// create a new task
            /// </summary>
            /// Creates a new Scopevisio Task
            /// Required profile(s): &lt;i&gt;Aufgabe, Kontakte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// content in JSON format, topic is required
            /// </param>
            public static void CreateTask(this IOpenApiClient operations, TaskForm body)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateTaskAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a new task
            /// </summary>
            /// Creates a new Scopevisio Task
            /// Required profile(s): &lt;i&gt;Aufgabe, Kontakte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// content in JSON format, topic is required
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateTaskAsync(this IOpenApiClient operations, TaskForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateTaskWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// task for id
            /// </summary>
            /// Returns the Scopevisio task with the given id.
            /// Required profile(s): &lt;i&gt;Aufgabe (Anzeigen)&lt;/i&gt;
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio task
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,topic
            /// </param>
            public static void GetTask(this IOpenApiClient operations, long id, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetTaskAsync(id, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// task for id
            /// </summary>
            /// Returns the Scopevisio task with the given id.
            /// Required profile(s): &lt;i&gt;Aufgabe (Anzeigen)&lt;/i&gt;
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio task
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,topic
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetTaskAsync(this IOpenApiClient operations, long id, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetTaskWithHttpMessagesAsync(id, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Update task
            /// </summary>
            /// Updates the Scopevisio task with the given task id.
            /// Required profile(s): &lt;i&gt;Aufgabe (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio task
            /// </param>
            /// <param name='body'>
            /// Content in JSON format. Please refer to TaskForm for example values and to
            /// our  &lt;a href='../browser/index.html#!/documentation'&gt;general
            /// documentation&lt;/a&gt; for update information.
            /// </param>
            public static void UpdateTask(this IOpenApiClient operations, long id, TaskForm body = default(TaskForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).UpdateTaskAsync(id, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update task
            /// </summary>
            /// Updates the Scopevisio task with the given task id.
            /// Required profile(s): &lt;i&gt;Aufgabe (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio task
            /// </param>
            /// <param name='body'>
            /// Content in JSON format. Please refer to TaskForm for example values and to
            /// our  &lt;a href='../browser/index.html#!/documentation'&gt;general
            /// documentation&lt;/a&gt; for update information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateTaskAsync(this IOpenApiClient operations, long id, TaskForm body = default(TaskForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateTaskWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Assign mail to a task.
            /// </summary>
            /// Assigns the mail with the given mailId to the task with the given taskId.
            /// Required profile(s): &lt;i&gt;Aufgaben,Mailbot,Mailagent
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            /// <param name='body'>
            /// content in JSON format
            /// </param>
            public static void AssignMailTask(this IOpenApiClient operations, long taskId, AssignMailForm body)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).AssignMailTaskAsync(taskId, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assign mail to a task.
            /// </summary>
            /// Assigns the mail with the given mailId to the task with the given taskId.
            /// Required profile(s): &lt;i&gt;Aufgaben,Mailbot,Mailagent
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            /// <param name='body'>
            /// content in JSON format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AssignMailTaskAsync(this IOpenApiClient operations, long taskId, AssignMailForm body, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AssignMailTaskWithHttpMessagesAsync(taskId, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a new comment.
            /// </summary>
            /// Creates a new comment.
            /// Required profile(s): &lt;i&gt;Aufgaben, Pinnwand (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// taskId of a Scopevisio task
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void CreateTaskComment(this IOpenApiClient operations, long taskId, BlogEntryForm body = default(BlogEntryForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateTaskCommentAsync(taskId, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new comment.
            /// </summary>
            /// Creates a new comment.
            /// Required profile(s): &lt;i&gt;Aufgaben, Pinnwand (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// taskId of a Scopevisio task
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateTaskCommentAsync(this IOpenApiClient operations, long taskId, BlogEntryForm body = default(BlogEntryForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateTaskCommentWithHttpMessagesAsync(taskId, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Comments by taskId.
            /// </summary>
            /// Returns the Scopevisio comments with the given taskId.
            /// Required profile(s): &lt;i&gt;Aufgaben, Pinnwand (Anzeigen)&lt;/i&gt;
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// id (Master ID) of a Scopevisio task
            /// </param>
            /// <param name='fields'>
            /// Comma separated list of fields to show in response.
            /// 
            /// id,blogId,body
            /// </param>
            public static void GetTaskComments(this IOpenApiClient operations, long taskId, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetTaskCommentsAsync(taskId, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Comments by taskId.
            /// </summary>
            /// Returns the Scopevisio comments with the given taskId.
            /// Required profile(s): &lt;i&gt;Aufgaben, Pinnwand (Anzeigen)&lt;/i&gt;
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// id (Master ID) of a Scopevisio task
            /// </param>
            /// <param name='fields'>
            /// Comma separated list of fields to show in response.
            /// 
            /// id,blogId,body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetTaskCommentsAsync(this IOpenApiClient operations, long taskId, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetTaskCommentsWithHttpMessagesAsync(taskId, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Add a file to a Scopevisio task
            /// </summary>
            /// Adds a file to a Scopevisio task.
            /// Required profile(s): &lt;i&gt;Aufgaben (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// taskId (Master ID) of a Scopevisio taskId.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void AddTaskFile(this IOpenApiClient operations, long taskId, TeamworkFileForm body = default(TeamworkFileForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).AddTaskFileAsync(taskId, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a file to a Scopevisio task
            /// </summary>
            /// Adds a file to a Scopevisio task.
            /// Required profile(s): &lt;i&gt;Aufgaben (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// taskId (Master ID) of a Scopevisio taskId.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddTaskFileAsync(this IOpenApiClient operations, long taskId, TeamworkFileForm body = default(TeamworkFileForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AddTaskFileWithHttpMessagesAsync(taskId, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Subtasks (Tätigkeiten) for task id
            /// </summary>
            /// Returns all subtasks (Tätigkeiten) for a Scopevisio task with the given
            /// id.
            /// Required profile(s): &lt;i&gt;Aufgabe (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            public static void GetSubtasks(this IOpenApiClient operations, long taskId)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetSubtasksAsync(taskId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Subtasks (Tätigkeiten) for task id
            /// </summary>
            /// Returns all subtasks (Tätigkeiten) for a Scopevisio task with the given
            /// id.
            /// Required profile(s): &lt;i&gt;Aufgabe (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetSubtasksAsync(this IOpenApiClient operations, long taskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetSubtasksWithHttpMessagesAsync(taskId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// tasks
            /// </summary>
            /// Returns Scopevisio tasks.
            /// Required profile(s): &lt;i&gt;Aufgabe (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetTasks(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetTasksAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// tasks
            /// </summary>
            /// Returns Scopevisio tasks.
            /// Required profile(s): &lt;i&gt;Aufgabe (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetTasksAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetTasksWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            public static object GetHandler1(this IOpenApiClient operations, string arg1)
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).GetHandler1Async(arg1), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetHandler1Async(this IOpenApiClient operations, string arg1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHandler1WithHttpMessagesAsync(arg1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            public static object PostHandler1(this IOpenApiClient operations, string arg1)
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).PostHandler1Async(arg1), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostHandler1Async(this IOpenApiClient operations, string arg1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostHandler1WithHttpMessagesAsync(arg1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            public static object PutHandler1(this IOpenApiClient operations, string arg1)
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).PutHandler1Async(arg1), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutHandler1Async(this IOpenApiClient operations, string arg1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutHandler1WithHttpMessagesAsync(arg1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            public static object DeleteHandler1(this IOpenApiClient operations, string arg1)
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).DeleteHandler1Async(arg1), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteHandler1Async(this IOpenApiClient operations, string arg1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteHandler1WithHttpMessagesAsync(arg1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            public static object GetHandler2(this IOpenApiClient operations, string arg1, string arg2)
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).GetHandler2Async(arg1, arg2), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetHandler2Async(this IOpenApiClient operations, string arg1, string arg2, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHandler2WithHttpMessagesAsync(arg1, arg2, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            public static object PostHandler2(this IOpenApiClient operations, string arg1, string arg2)
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).PostHandler2Async(arg1, arg2), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostHandler2Async(this IOpenApiClient operations, string arg1, string arg2, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostHandler2WithHttpMessagesAsync(arg1, arg2, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            public static object PutHandler2(this IOpenApiClient operations, string arg1, string arg2)
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).PutHandler2Async(arg1, arg2), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutHandler2Async(this IOpenApiClient operations, string arg1, string arg2, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutHandler2WithHttpMessagesAsync(arg1, arg2, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            public static object DeleteHandler2(this IOpenApiClient operations, string arg1, string arg2)
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).DeleteHandler2Async(arg1, arg2), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteHandler2Async(this IOpenApiClient operations, string arg1, string arg2, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteHandler2WithHttpMessagesAsync(arg1, arg2, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            /// <param name='arg3'>
            /// </param>
            public static object GetHandler3(this IOpenApiClient operations, string arg1, string arg2, string arg3)
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).GetHandler3Async(arg1, arg2, arg3), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            /// <param name='arg3'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetHandler3Async(this IOpenApiClient operations, string arg1, string arg2, string arg3, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHandler3WithHttpMessagesAsync(arg1, arg2, arg3, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            /// <param name='arg3'>
            /// </param>
            public static object PostHandler3(this IOpenApiClient operations, string arg1, string arg2, string arg3)
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).PostHandler3Async(arg1, arg2, arg3), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            /// <param name='arg3'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostHandler3Async(this IOpenApiClient operations, string arg1, string arg2, string arg3, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostHandler3WithHttpMessagesAsync(arg1, arg2, arg3, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            /// <param name='arg3'>
            /// </param>
            public static object PutHandler3(this IOpenApiClient operations, string arg1, string arg2, string arg3)
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).PutHandler3Async(arg1, arg2, arg3), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            /// <param name='arg3'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutHandler3Async(this IOpenApiClient operations, string arg1, string arg2, string arg3, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutHandler3WithHttpMessagesAsync(arg1, arg2, arg3, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            /// <param name='arg3'>
            /// </param>
            public static object DeleteHandler3(this IOpenApiClient operations, string arg1, string arg2, string arg3)
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).DeleteHandler3Async(arg1, arg2, arg3), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            /// <param name='arg3'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteHandler3Async(this IOpenApiClient operations, string arg1, string arg2, string arg3, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteHandler3WithHttpMessagesAsync(arg1, arg2, arg3, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            /// <param name='arg3'>
            /// </param>
            /// <param name='arg4'>
            /// </param>
            public static object PutHandler4(this IOpenApiClient operations, string arg1, string arg2, string arg3, string arg4)
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).PutHandler4Async(arg1, arg2, arg3, arg4), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            /// <param name='arg3'>
            /// </param>
            /// <param name='arg4'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutHandler4Async(this IOpenApiClient operations, string arg1, string arg2, string arg3, string arg4, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutHandler4WithHttpMessagesAsync(arg1, arg2, arg3, arg4, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            /// <param name='arg3'>
            /// </param>
            /// <param name='arg4'>
            /// </param>
            public static object DeleteHandler4(this IOpenApiClient operations, string arg1, string arg2, string arg3, string arg4)
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).DeleteHandler4Async(arg1, arg2, arg3, arg4), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// See our &lt;a
            /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
            /// for usage.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arg1'>
            /// </param>
            /// <param name='arg2'>
            /// </param>
            /// <param name='arg3'>
            /// </param>
            /// <param name='arg4'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteHandler4Async(this IOpenApiClient operations, string arg1, string arg2, string arg3, string arg4, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteHandler4WithHttpMessagesAsync(arg1, arg2, arg3, arg4, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Teamwork token
            /// </summary>
            /// Returns a teamwork token.
            /// No profiles required.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='force'>
            /// Force retrieving new teamworktoken and not returning existing one.
            /// </param>
            public static void GetTeamworkToken(this IOpenApiClient operations, bool? force = default(bool?))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetTeamworkTokenAsync(force), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Teamwork token
            /// </summary>
            /// Returns a teamwork token.
            /// No profiles required.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='force'>
            /// Force retrieving new teamworktoken and not returning existing one.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetTeamworkTokenAsync(this IOpenApiClient operations, bool? force = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetTeamworkTokenWithHttpMessagesAsync(force, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Invalidates the stored teamwork token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void DeleteTeamworkToken(this IOpenApiClient operations)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).DeleteTeamworkTokenAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Invalidates the stored teamwork token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTeamworkTokenAsync(this IOpenApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteTeamworkTokenWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get text templates (Textbausteine)
            /// </summary>
            /// Returns the Scopevisio text templates (Textbausteine).
            /// Required profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
            /// Rechnungen, Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetTextTemplates(this IOpenApiClient operations)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetTextTemplatesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get text templates (Textbausteine)
            /// </summary>
            /// Returns the Scopevisio text templates (Textbausteine).
            /// Required profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
            /// Rechnungen, Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetTextTemplatesAsync(this IOpenApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetTextTemplatesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get all timeentries available
            /// </summary>
            /// Shows all available time entries.
            /// Required profile(s): &lt;i&gt;Zeiterfassung (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static object GetAllTimEntries(this IOpenApiClient operations, string body = default(string))
            {
                return Task.Factory.StartNew(s => ((IOpenApiClient)s).GetAllTimEntriesAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all timeentries available
            /// </summary>
            /// Shows all available time entries.
            /// Required profile(s): &lt;i&gt;Zeiterfassung (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllTimEntriesAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllTimEntriesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new timeentry
            /// </summary>
            /// Creates a new timeentry.
            /// Required profile(s): &lt;i&gt;Projekte, Zeiterfassung
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void CreateTimeEntry(this IOpenApiClient operations, TimeEntryForm body = default(TimeEntryForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateTimeEntryAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new timeentry
            /// </summary>
            /// Creates a new timeentry.
            /// Required profile(s): &lt;i&gt;Projekte, Zeiterfassung
            /// (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateTimeEntryAsync(this IOpenApiClient operations, TimeEntryForm body = default(TimeEntryForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateTimeEntryWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// timeEntry for id
            /// </summary>
            /// Returns the Scopevisio timeEntry with the given id.
            /// Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio timeEntry
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,topic
            /// </param>
            public static void GetTimeEntry(this IOpenApiClient operations, long id, string fields = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetTimeEntryAsync(id, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// timeEntry for id
            /// </summary>
            /// Returns the Scopevisio timeEntry with the given id.
            /// Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio timeEntry
            /// </param>
            /// <param name='fields'>
            /// comma separated list of fields to show in response
            /// 
            /// id,topic
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetTimeEntryAsync(this IOpenApiClient operations, long id, string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetTimeEntryWithHttpMessagesAsync(id, fields, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Update timeEntry
            /// </summary>
            /// Updates the Scopevisio timeEntry with the given timeEntry id. Update may
            /// be refused if a time entry run exists for this time entry. In this case
            /// the time entry is updated only if the setting in the time entry run
            /// settings (see Scopevisio client application) is "Änderungen zulassen".
            /// Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio timeEntry
            /// </param>
            /// <param name='body'>
            /// Content in JSON format. Please refer to TimeentryForm for example values
            /// and to our  &lt;a href='../browser/index.html#!/documentation'&gt;general
            /// documentation&lt;/a&gt; for update information.
            /// </param>
            public static void UpdateTimeEntry(this IOpenApiClient operations, long id, TimeEntryForm body = default(TimeEntryForm))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).UpdateTimeEntryAsync(id, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update timeEntry
            /// </summary>
            /// Updates the Scopevisio timeEntry with the given timeEntry id. Update may
            /// be refused if a time entry run exists for this time entry. In this case
            /// the time entry is updated only if the setting in the time entry run
            /// settings (see Scopevisio client application) is "Änderungen zulassen".
            /// Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of a Scopevisio timeEntry
            /// </param>
            /// <param name='body'>
            /// Content in JSON format. Please refer to TimeentryForm for example values
            /// and to our  &lt;a href='../browser/index.html#!/documentation'&gt;general
            /// documentation&lt;/a&gt; for update information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateTimeEntryAsync(this IOpenApiClient operations, long id, TimeEntryForm body = default(TimeEntryForm), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateTimeEntryWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Access token
            /// </summary>
            /// Retrieves a Scopevisio access token.
            /// No profiles required.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='grantType'>
            /// Grant type. Possible values include: 'password', 'refresh_token',
            /// 'authorization_code'
            /// </param>
            /// <param name='customer'>
            /// Scopevisio 7 digit customer number
            /// </param>
            /// <param name='clientId'>
            /// Client ID, if not set, will revert to "sv"
            /// </param>
            /// <param name='clientSecret'>
            /// Client secret
            /// </param>
            /// <param name='username'>
            /// Scopevisio user login, required if grant_type=password
            /// </param>
            /// <param name='organisationId'>
            /// Scopevisio organisation id
            /// </param>
            /// <param name='organisation'>
            /// Scopevisio organisation name
            /// </param>
            /// <param name='password'>
            /// Scopevisio user password, required if grant_type=password
            /// </param>
            /// <param name='totpResponse'>
            /// Scopeviso user one time password, required only if activated
            /// </param>
            /// <param name='refreshToken'>
            /// Refresh token, required if grant_type=refresh_token
            /// </param>
            /// <param name='code'>
            /// Authorization code, required if grant_type=authorization_code
            /// </param>
            /// <param name='requestcookie'>
            /// Whether to set access token in cookie
            /// </param>
            public static void Token(this IOpenApiClient operations, string grantType, string customer, string clientId = default(string), string clientSecret = default(string), string username = default(string), long? organisationId = default(long?), string organisation = default(string), string password = default(string), string totpResponse = default(string), string refreshToken = default(string), string code = default(string), string requestcookie = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).TokenAsync(grantType, customer, clientId, clientSecret, username, organisationId, organisation, password, totpResponse, refreshToken, code, requestcookie), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Access token
            /// </summary>
            /// Retrieves a Scopevisio access token.
            /// No profiles required.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='grantType'>
            /// Grant type. Possible values include: 'password', 'refresh_token',
            /// 'authorization_code'
            /// </param>
            /// <param name='customer'>
            /// Scopevisio 7 digit customer number
            /// </param>
            /// <param name='clientId'>
            /// Client ID, if not set, will revert to "sv"
            /// </param>
            /// <param name='clientSecret'>
            /// Client secret
            /// </param>
            /// <param name='username'>
            /// Scopevisio user login, required if grant_type=password
            /// </param>
            /// <param name='organisationId'>
            /// Scopevisio organisation id
            /// </param>
            /// <param name='organisation'>
            /// Scopevisio organisation name
            /// </param>
            /// <param name='password'>
            /// Scopevisio user password, required if grant_type=password
            /// </param>
            /// <param name='totpResponse'>
            /// Scopeviso user one time password, required only if activated
            /// </param>
            /// <param name='refreshToken'>
            /// Refresh token, required if grant_type=refresh_token
            /// </param>
            /// <param name='code'>
            /// Authorization code, required if grant_type=authorization_code
            /// </param>
            /// <param name='requestcookie'>
            /// Whether to set access token in cookie
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task TokenAsync(this IOpenApiClient operations, string grantType, string customer, string clientId = default(string), string clientSecret = default(string), string username = default(string), long? organisationId = default(long?), string organisation = default(string), string password = default(string), string totpResponse = default(string), string refreshToken = default(string), string code = default(string), string requestcookie = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.TokenWithHttpMessagesAsync(grantType, customer, clientId, clientSecret, username, organisationId, organisation, password, totpResponse, refreshToken, code, requestcookie, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Revokes the given token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void RevokeToken(this IOpenApiClient operations)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).RevokeTokenAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revokes the given token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RevokeTokenAsync(this IOpenApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RevokeTokenWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Changes the organisation by name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the organisation to change to
            /// </param>
            public static void ChangeOrganisationByName(this IOpenApiClient operations, string name)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ChangeOrganisationByNameAsync(name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Changes the organisation by name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the organisation to change to
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ChangeOrganisationByNameAsync(this IOpenApiClient operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ChangeOrganisationByNameWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Changes the organisation by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// ID of the organisation to change to
            /// </param>
            public static void ChangeOrganisationById(this IOpenApiClient operations, long organisationId)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).ChangeOrganisationByIdAsync(organisationId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Changes the organisation by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organisationId'>
            /// ID of the organisation to change to
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ChangeOrganisationByIdAsync(this IOpenApiClient operations, long organisationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ChangeOrganisationByIdWithHttpMessagesAsync(organisationId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns all users
            /// </summary>
            /// Required profile(s): Benutzer (Anzeigen).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='onlyActive'>
            /// If set to true, deleted users are not returned.
            /// </param>
            public static void GetUsers(this IOpenApiClient operations, bool? onlyActive = default(bool?))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetUsersAsync(onlyActive), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all users
            /// </summary>
            /// Required profile(s): Benutzer (Anzeigen).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='onlyActive'>
            /// If set to true, deleted users are not returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetUsersAsync(this IOpenApiClient operations, bool? onlyActive = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetUsersWithHttpMessagesAsync(onlyActive, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates the given users
            /// </summary>
            /// Required profile(s): Benutzer (Bearbeiten).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void CreateUsers(this IOpenApiClient operations, IList<UserForm> body = default(IList<UserForm>))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).CreateUsersAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates the given users
            /// </summary>
            /// Required profile(s): Benutzer (Bearbeiten).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateUsersAsync(this IOpenApiClient operations, IList<UserForm> body = default(IList<UserForm>), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateUsersWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Updates the given users
            /// </summary>
            /// Required profile(s): Benutzer (Bearbeiten).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void UpdateUsers(this IOpenApiClient operations, IList<UserForm> body = default(IList<UserForm>))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).UpdateUsersAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the given users
            /// </summary>
            /// Required profile(s): Benutzer (Bearbeiten).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateUsersAsync(this IOpenApiClient operations, IList<UserForm> body = default(IList<UserForm>), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateUsersWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns the user by UID or email
            /// </summary>
            /// Required profile(s): Benutzer (Anzeigen).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uidOrEmail'>
            /// User ID or email
            /// </param>
            public static void GetUser(this IOpenApiClient operations, string uidOrEmail)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetUserAsync(uidOrEmail), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the user by UID or email
            /// </summary>
            /// Required profile(s): Benutzer (Anzeigen).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uidOrEmail'>
            /// User ID or email
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetUserAsync(this IOpenApiClient operations, string uidOrEmail, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetUserWithHttpMessagesAsync(uidOrEmail, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Deletes the user by UID or email. Please note, the users are only marked
            /// as deleted.
            /// </summary>
            /// Required profile(s): Benutzer (Bearbeiten).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uidOrEmail'>
            /// User ID or email
            /// </param>
            public static void DeleteUser(this IOpenApiClient operations, string uidOrEmail)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).DeleteUserAsync(uidOrEmail), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the user by UID or email. Please note, the users are only marked
            /// as deleted.
            /// </summary>
            /// Required profile(s): Benutzer (Bearbeiten).
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uidOrEmail'>
            /// User ID or email
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUserAsync(this IOpenApiClient operations, string uidOrEmail, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteUserWithHttpMessagesAsync(uidOrEmail, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// vat matrix
            /// </summary>
            /// Returns the vat matrix for the current organisation.
            /// Required profile(s): &lt;i&gt;Stammdaten, Steuermatrix
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetVatMatrixEntries(this IOpenApiClient operations)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetVatMatrixEntriesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// vat matrix
            /// </summary>
            /// Returns the vat matrix for the current organisation.
            /// Required profile(s): &lt;i&gt;Stammdaten, Steuermatrix
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetVatMatrixEntriesAsync(this IOpenApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetVatMatrixEntriesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// retrieve deployment version infos
            /// </summary>
            /// Returns deployment version infos.
            /// No profiles required.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetVersion(this IOpenApiClient operations)
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetVersionAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// retrieve deployment version infos
            /// </summary>
            /// Returns deployment version infos.
            /// No profiles required.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetVersionAsync(this IOpenApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetVersionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// zones
            /// </summary>
            /// Returns all Scopevisio zones (Rechnungskreise).
            /// Required profile(s): &lt;i&gt;Stammdaten, Rechnungskreis
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            public static void GetZones(this IOpenApiClient operations, string body = default(string))
            {
                Task.Factory.StartNew(s => ((IOpenApiClient)s).GetZonesAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// zones
            /// </summary>
            /// Returns all Scopevisio zones (Rechnungskreise).
            /// Required profile(s): &lt;i&gt;Stammdaten, Rechnungskreis
            /// (Anzeigen)&lt;/i&gt;.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// search filter in JSON format. See also &lt;a
            /// href='../browser/index.html#!/searchscope'&gt;our search
            /// documentation&lt;/a&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetZonesAsync(this IOpenApiClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetZonesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
