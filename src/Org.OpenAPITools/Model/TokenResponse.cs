/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TokenResponse
    /// </summary>
    [DataContract]
    public partial class TokenResponse :  IEquatable<TokenResponse>, IValidatableObject
    {
        /// <summary>
        /// Token type
        /// </summary>
        /// <value>Token type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TokenTypeEnum
        {
            /// <summary>
            /// Enum Bearer for value: Bearer
            /// </summary>
            [EnumMember(Value = "Bearer")]
            Bearer = 1

        }

        /// <summary>
        /// Token type
        /// </summary>
        /// <value>Token type</value>
        [DataMember(Name="token_type", EmitDefaultValue=false)]
        public TokenTypeEnum TokenType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenResponse" /> class.
        /// </summary>
        /// <param name="tokenType">Token type (required).</param>
        /// <param name="accessToken">Access token (required).</param>
        /// <param name="expiresIn">The remaining lifetime of the access token in seconds (required).</param>
        /// <param name="refreshToken">Refresh token (required).</param>
        /// <param name="uid">User ID (required).</param>
        /// <param name="organisationId">Organisation ID (required).</param>
        /// <param name="organisationName">Organisation Name (required).</param>
        /// <param name="teamworkTenantId">Teamwork tenant ID.</param>
        public TokenResponse(TokenTypeEnum tokenType = default(TokenTypeEnum), string accessToken = default(string), long expiresIn = default(long), string refreshToken = default(string), string uid = default(string), long organisationId = default(long), string organisationName = default(string), string teamworkTenantId = default(string))
        {
            // to ensure "tokenType" is required (not null)
            if (tokenType == null)
            {
                throw new InvalidDataException("tokenType is a required property for TokenResponse and cannot be null");
            }
            else
            {
                this.TokenType = tokenType;
            }
            
            // to ensure "accessToken" is required (not null)
            if (accessToken == null)
            {
                throw new InvalidDataException("accessToken is a required property for TokenResponse and cannot be null");
            }
            else
            {
                this.AccessToken = accessToken;
            }
            
            // to ensure "expiresIn" is required (not null)
            if (expiresIn == null)
            {
                throw new InvalidDataException("expiresIn is a required property for TokenResponse and cannot be null");
            }
            else
            {
                this.ExpiresIn = expiresIn;
            }
            
            // to ensure "refreshToken" is required (not null)
            if (refreshToken == null)
            {
                throw new InvalidDataException("refreshToken is a required property for TokenResponse and cannot be null");
            }
            else
            {
                this.RefreshToken = refreshToken;
            }
            
            // to ensure "uid" is required (not null)
            if (uid == null)
            {
                throw new InvalidDataException("uid is a required property for TokenResponse and cannot be null");
            }
            else
            {
                this.Uid = uid;
            }
            
            // to ensure "organisationId" is required (not null)
            if (organisationId == null)
            {
                throw new InvalidDataException("organisationId is a required property for TokenResponse and cannot be null");
            }
            else
            {
                this.OrganisationId = organisationId;
            }
            
            // to ensure "organisationName" is required (not null)
            if (organisationName == null)
            {
                throw new InvalidDataException("organisationName is a required property for TokenResponse and cannot be null");
            }
            else
            {
                this.OrganisationName = organisationName;
            }
            
            this.TeamworkTenantId = teamworkTenantId;
        }
        

        /// <summary>
        /// Access token
        /// </summary>
        /// <value>Access token</value>
        [DataMember(Name="access_token", EmitDefaultValue=false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// The remaining lifetime of the access token in seconds
        /// </summary>
        /// <value>The remaining lifetime of the access token in seconds</value>
        [DataMember(Name="expires_in", EmitDefaultValue=false)]
        public long ExpiresIn { get; set; }

        /// <summary>
        /// Refresh token
        /// </summary>
        /// <value>Refresh token</value>
        [DataMember(Name="refresh_token", EmitDefaultValue=false)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }

        /// <summary>
        /// Organisation ID
        /// </summary>
        /// <value>Organisation ID</value>
        [DataMember(Name="organisationId", EmitDefaultValue=false)]
        public long OrganisationId { get; set; }

        /// <summary>
        /// Organisation Name
        /// </summary>
        /// <value>Organisation Name</value>
        [DataMember(Name="organisationName", EmitDefaultValue=false)]
        public string OrganisationName { get; set; }

        /// <summary>
        /// Teamwork tenant ID
        /// </summary>
        /// <value>Teamwork tenant ID</value>
        [DataMember(Name="teamworkTenantId", EmitDefaultValue=false)]
        public string TeamworkTenantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TokenResponse {\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("  OrganisationName: ").Append(OrganisationName).Append("\n");
            sb.Append("  TeamworkTenantId: ").Append(TeamworkTenantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenResponse);
        }

        /// <summary>
        /// Returns true if TokenResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TokenType == input.TokenType ||
                    (this.TokenType != null &&
                    this.TokenType.Equals(input.TokenType))
                ) && 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.ExpiresIn == input.ExpiresIn ||
                    (this.ExpiresIn != null &&
                    this.ExpiresIn.Equals(input.ExpiresIn))
                ) && 
                (
                    this.RefreshToken == input.RefreshToken ||
                    (this.RefreshToken != null &&
                    this.RefreshToken.Equals(input.RefreshToken))
                ) && 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                ) && 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                ) && 
                (
                    this.OrganisationName == input.OrganisationName ||
                    (this.OrganisationName != null &&
                    this.OrganisationName.Equals(input.OrganisationName))
                ) && 
                (
                    this.TeamworkTenantId == input.TeamworkTenantId ||
                    (this.TeamworkTenantId != null &&
                    this.TeamworkTenantId.Equals(input.TeamworkTenantId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenType != null)
                    hashCode = hashCode * 59 + this.TokenType.GetHashCode();
                if (this.AccessToken != null)
                    hashCode = hashCode * 59 + this.AccessToken.GetHashCode();
                if (this.ExpiresIn != null)
                    hashCode = hashCode * 59 + this.ExpiresIn.GetHashCode();
                if (this.RefreshToken != null)
                    hashCode = hashCode * 59 + this.RefreshToken.GetHashCode();
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.OrganisationId != null)
                    hashCode = hashCode * 59 + this.OrganisationId.GetHashCode();
                if (this.OrganisationName != null)
                    hashCode = hashCode * 59 + this.OrganisationName.GetHashCode();
                if (this.TeamworkTenantId != null)
                    hashCode = hashCode * 59 + this.TeamworkTenantId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
