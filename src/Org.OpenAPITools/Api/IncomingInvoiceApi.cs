/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIncomingInvoiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Import an incoming invoice.
        /// </summary>
        /// <remarks>
        /// Required profiles: &lt;i&gt;Rechnungseingangsbuch (Bearbeiten)&lt;/i&gt;.  The invoice should be provided as a base64 encoded pdf file. The maximum size allowed is 20 MB.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateIncomingInvoice (IncomingInvoiceForm body = default(IncomingInvoiceForm));

        /// <summary>
        /// Import an incoming invoice.
        /// </summary>
        /// <remarks>
        /// Required profiles: &lt;i&gt;Rechnungseingangsbuch (Bearbeiten)&lt;/i&gt;.  The invoice should be provided as a base64 encoded pdf file. The maximum size allowed is 20 MB.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateIncomingInvoiceWithHttpInfo (IncomingInvoiceForm body = default(IncomingInvoiceForm));
        /// <summary>
        /// Link to the main file for the incoming invoice in the teamwork web application
        /// </summary>
        /// <remarks>
        /// Returns a link to the main file for the incoming invoice with the given idOrNumber (id or Interne Nummer) in the teamwork web application.You need to be logged in to the teamwork webapp.  Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">idOrNumber (id or Interne Nummer) of a Scopevisio incoming invoice.</param>
        /// <returns></returns>
        void GetIncomingInvoiceTeamworkFileLink (string idOrNumber);

        /// <summary>
        /// Link to the main file for the incoming invoice in the teamwork web application
        /// </summary>
        /// <remarks>
        /// Returns a link to the main file for the incoming invoice with the given idOrNumber (id or Interne Nummer) in the teamwork web application.You need to be logged in to the teamwork webapp.  Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">idOrNumber (id or Interne Nummer) of a Scopevisio incoming invoice.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIncomingInvoiceTeamworkFileLinkWithHttpInfo (string idOrNumber);
        /// <summary>
        /// incoming invoices
        /// </summary>
        /// <remarks>
        /// Returns Scopevisio incoming invoices.  Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">(optional) Apply a search filter in JSON. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns></returns>
        void GetIncomingInvoices (string body = default(string));

        /// <summary>
        /// incoming invoices
        /// </summary>
        /// <remarks>
        /// Returns Scopevisio incoming invoices.  Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">(optional) Apply a search filter in JSON. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIncomingInvoicesWithHttpInfo (string body = default(string));
        /// <summary>
        /// incoming invoice for the given idOrNumber (id or interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the Scopevisio incoming invoices with the given idOrNumber (id or interne Nummer).  Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">document idOrNumber (id or interne Nummer) of a Scopevisio invcoming invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id,documentNumber (optional)</param>
        /// <returns></returns>
        void GetInvoice (string idOrNumber, string fields = default(string));

        /// <summary>
        /// incoming invoice for the given idOrNumber (id or interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the Scopevisio incoming invoices with the given idOrNumber (id or interne Nummer).  Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">document idOrNumber (id or interne Nummer) of a Scopevisio invcoming invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id,documentNumber (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetInvoiceWithHttpInfo (string idOrNumber, string fields = default(string));
        /// <summary>
        /// The file of incoming invoice with the given idOrNumber (id or Interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the main file of the Scopevisio incoming invoice with the given idOrNumber (id or Interne Nummer).  Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">id or number(Interne Nummer) of a Scopevisio invcoming invoice.</param>
        /// <returns></returns>
        void GetInvoiceFile (string idOrNumber);

        /// <summary>
        /// The file of incoming invoice with the given idOrNumber (id or Interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the main file of the Scopevisio incoming invoice with the given idOrNumber (id or Interne Nummer).  Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">id or number(Interne Nummer) of a Scopevisio invcoming invoice.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetInvoiceFileWithHttpInfo (string idOrNumber);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Import an incoming invoice.
        /// </summary>
        /// <remarks>
        /// Required profiles: &lt;i&gt;Rechnungseingangsbuch (Bearbeiten)&lt;/i&gt;.  The invoice should be provided as a base64 encoded pdf file. The maximum size allowed is 20 MB.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateIncomingInvoiceAsync (IncomingInvoiceForm body = default(IncomingInvoiceForm));

        /// <summary>
        /// Import an incoming invoice.
        /// </summary>
        /// <remarks>
        /// Required profiles: &lt;i&gt;Rechnungseingangsbuch (Bearbeiten)&lt;/i&gt;.  The invoice should be provided as a base64 encoded pdf file. The maximum size allowed is 20 MB.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateIncomingInvoiceAsyncWithHttpInfo (IncomingInvoiceForm body = default(IncomingInvoiceForm));
        /// <summary>
        /// Link to the main file for the incoming invoice in the teamwork web application
        /// </summary>
        /// <remarks>
        /// Returns a link to the main file for the incoming invoice with the given idOrNumber (id or Interne Nummer) in the teamwork web application.You need to be logged in to the teamwork webapp.  Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">idOrNumber (id or Interne Nummer) of a Scopevisio incoming invoice.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetIncomingInvoiceTeamworkFileLinkAsync (string idOrNumber);

        /// <summary>
        /// Link to the main file for the incoming invoice in the teamwork web application
        /// </summary>
        /// <remarks>
        /// Returns a link to the main file for the incoming invoice with the given idOrNumber (id or Interne Nummer) in the teamwork web application.You need to be logged in to the teamwork webapp.  Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">idOrNumber (id or Interne Nummer) of a Scopevisio incoming invoice.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetIncomingInvoiceTeamworkFileLinkAsyncWithHttpInfo (string idOrNumber);
        /// <summary>
        /// incoming invoices
        /// </summary>
        /// <remarks>
        /// Returns Scopevisio incoming invoices.  Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">(optional) Apply a search filter in JSON. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetIncomingInvoicesAsync (string body = default(string));

        /// <summary>
        /// incoming invoices
        /// </summary>
        /// <remarks>
        /// Returns Scopevisio incoming invoices.  Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">(optional) Apply a search filter in JSON. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetIncomingInvoicesAsyncWithHttpInfo (string body = default(string));
        /// <summary>
        /// incoming invoice for the given idOrNumber (id or interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the Scopevisio incoming invoices with the given idOrNumber (id or interne Nummer).  Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">document idOrNumber (id or interne Nummer) of a Scopevisio invcoming invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id,documentNumber (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetInvoiceAsync (string idOrNumber, string fields = default(string));

        /// <summary>
        /// incoming invoice for the given idOrNumber (id or interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the Scopevisio incoming invoices with the given idOrNumber (id or interne Nummer).  Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">document idOrNumber (id or interne Nummer) of a Scopevisio invcoming invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id,documentNumber (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetInvoiceAsyncWithHttpInfo (string idOrNumber, string fields = default(string));
        /// <summary>
        /// The file of incoming invoice with the given idOrNumber (id or Interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the main file of the Scopevisio incoming invoice with the given idOrNumber (id or Interne Nummer).  Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">id or number(Interne Nummer) of a Scopevisio invcoming invoice.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetInvoiceFileAsync (string idOrNumber);

        /// <summary>
        /// The file of incoming invoice with the given idOrNumber (id or Interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the main file of the Scopevisio incoming invoice with the given idOrNumber (id or Interne Nummer).  Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">id or number(Interne Nummer) of a Scopevisio invcoming invoice.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetInvoiceFileAsyncWithHttpInfo (string idOrNumber);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IncomingInvoiceApi : IIncomingInvoiceApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IncomingInvoiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IncomingInvoiceApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncomingInvoiceApi"/> class
        /// </summary>
        /// <returns></returns>
        public IncomingInvoiceApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncomingInvoiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IncomingInvoiceApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Import an incoming invoice. Required profiles: &lt;i&gt;Rechnungseingangsbuch (Bearbeiten)&lt;/i&gt;.  The invoice should be provided as a base64 encoded pdf file. The maximum size allowed is 20 MB.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateIncomingInvoice (IncomingInvoiceForm body = default(IncomingInvoiceForm))
        {
             CreateIncomingInvoiceWithHttpInfo(body);
        }

        /// <summary>
        /// Import an incoming invoice. Required profiles: &lt;i&gt;Rechnungseingangsbuch (Bearbeiten)&lt;/i&gt;.  The invoice should be provided as a base64 encoded pdf file. The maximum size allowed is 20 MB.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateIncomingInvoiceWithHttpInfo (IncomingInvoiceForm body = default(IncomingInvoiceForm))
        {

            var localVarPath = "/incominginvoice/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIncomingInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Import an incoming invoice. Required profiles: &lt;i&gt;Rechnungseingangsbuch (Bearbeiten)&lt;/i&gt;.  The invoice should be provided as a base64 encoded pdf file. The maximum size allowed is 20 MB.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateIncomingInvoiceAsync (IncomingInvoiceForm body = default(IncomingInvoiceForm))
        {
             await CreateIncomingInvoiceAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Import an incoming invoice. Required profiles: &lt;i&gt;Rechnungseingangsbuch (Bearbeiten)&lt;/i&gt;.  The invoice should be provided as a base64 encoded pdf file. The maximum size allowed is 20 MB.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateIncomingInvoiceAsyncWithHttpInfo (IncomingInvoiceForm body = default(IncomingInvoiceForm))
        {

            var localVarPath = "/incominginvoice/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIncomingInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Link to the main file for the incoming invoice in the teamwork web application Returns a link to the main file for the incoming invoice with the given idOrNumber (id or Interne Nummer) in the teamwork web application.You need to be logged in to the teamwork webapp.  Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">idOrNumber (id or Interne Nummer) of a Scopevisio incoming invoice.</param>
        /// <returns></returns>
        public void GetIncomingInvoiceTeamworkFileLink (string idOrNumber)
        {
             GetIncomingInvoiceTeamworkFileLinkWithHttpInfo(idOrNumber);
        }

        /// <summary>
        /// Link to the main file for the incoming invoice in the teamwork web application Returns a link to the main file for the incoming invoice with the given idOrNumber (id or Interne Nummer) in the teamwork web application.You need to be logged in to the teamwork webapp.  Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">idOrNumber (id or Interne Nummer) of a Scopevisio incoming invoice.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetIncomingInvoiceTeamworkFileLinkWithHttpInfo (string idOrNumber)
        {
            // verify the required parameter 'idOrNumber' is set
            if (idOrNumber == null)
                throw new ApiException(400, "Missing required parameter 'idOrNumber' when calling IncomingInvoiceApi->GetIncomingInvoiceTeamworkFileLink");

            var localVarPath = "/incominginvoice/{idOrNumber}/teamworkFileLink";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idOrNumber != null) localVarPathParams.Add("idOrNumber", this.Configuration.ApiClient.ParameterToString(idOrNumber)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncomingInvoiceTeamworkFileLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Link to the main file for the incoming invoice in the teamwork web application Returns a link to the main file for the incoming invoice with the given idOrNumber (id or Interne Nummer) in the teamwork web application.You need to be logged in to the teamwork webapp.  Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">idOrNumber (id or Interne Nummer) of a Scopevisio incoming invoice.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetIncomingInvoiceTeamworkFileLinkAsync (string idOrNumber)
        {
             await GetIncomingInvoiceTeamworkFileLinkAsyncWithHttpInfo(idOrNumber);

        }

        /// <summary>
        /// Link to the main file for the incoming invoice in the teamwork web application Returns a link to the main file for the incoming invoice with the given idOrNumber (id or Interne Nummer) in the teamwork web application.You need to be logged in to the teamwork webapp.  Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">idOrNumber (id or Interne Nummer) of a Scopevisio incoming invoice.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetIncomingInvoiceTeamworkFileLinkAsyncWithHttpInfo (string idOrNumber)
        {
            // verify the required parameter 'idOrNumber' is set
            if (idOrNumber == null)
                throw new ApiException(400, "Missing required parameter 'idOrNumber' when calling IncomingInvoiceApi->GetIncomingInvoiceTeamworkFileLink");

            var localVarPath = "/incominginvoice/{idOrNumber}/teamworkFileLink";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idOrNumber != null) localVarPathParams.Add("idOrNumber", this.Configuration.ApiClient.ParameterToString(idOrNumber)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncomingInvoiceTeamworkFileLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// incoming invoices Returns Scopevisio incoming invoices.  Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">(optional) Apply a search filter in JSON. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns></returns>
        public void GetIncomingInvoices (string body = default(string))
        {
             GetIncomingInvoicesWithHttpInfo(body);
        }

        /// <summary>
        /// incoming invoices Returns Scopevisio incoming invoices.  Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">(optional) Apply a search filter in JSON. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetIncomingInvoicesWithHttpInfo (string body = default(string))
        {

            var localVarPath = "/incominginvoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncomingInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// incoming invoices Returns Scopevisio incoming invoices.  Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">(optional) Apply a search filter in JSON. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetIncomingInvoicesAsync (string body = default(string))
        {
             await GetIncomingInvoicesAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// incoming invoices Returns Scopevisio incoming invoices.  Required profile(s): &lt;i&gt;Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">(optional) Apply a search filter in JSON. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetIncomingInvoicesAsyncWithHttpInfo (string body = default(string))
        {

            var localVarPath = "/incominginvoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncomingInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// incoming invoice for the given idOrNumber (id or interne Nummer) Returns the Scopevisio incoming invoices with the given idOrNumber (id or interne Nummer).  Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">document idOrNumber (id or interne Nummer) of a Scopevisio invcoming invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id,documentNumber (optional)</param>
        /// <returns></returns>
        public void GetInvoice (string idOrNumber, string fields = default(string))
        {
             GetInvoiceWithHttpInfo(idOrNumber, fields);
        }

        /// <summary>
        /// incoming invoice for the given idOrNumber (id or interne Nummer) Returns the Scopevisio incoming invoices with the given idOrNumber (id or interne Nummer).  Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">document idOrNumber (id or interne Nummer) of a Scopevisio invcoming invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id,documentNumber (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetInvoiceWithHttpInfo (string idOrNumber, string fields = default(string))
        {
            // verify the required parameter 'idOrNumber' is set
            if (idOrNumber == null)
                throw new ApiException(400, "Missing required parameter 'idOrNumber' when calling IncomingInvoiceApi->GetInvoice");

            var localVarPath = "/incominginvoice/{idOrNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idOrNumber != null) localVarPathParams.Add("idOrNumber", this.Configuration.ApiClient.ParameterToString(idOrNumber)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// incoming invoice for the given idOrNumber (id or interne Nummer) Returns the Scopevisio incoming invoices with the given idOrNumber (id or interne Nummer).  Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">document idOrNumber (id or interne Nummer) of a Scopevisio invcoming invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id,documentNumber (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetInvoiceAsync (string idOrNumber, string fields = default(string))
        {
             await GetInvoiceAsyncWithHttpInfo(idOrNumber, fields);

        }

        /// <summary>
        /// incoming invoice for the given idOrNumber (id or interne Nummer) Returns the Scopevisio incoming invoices with the given idOrNumber (id or interne Nummer).  Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">document idOrNumber (id or interne Nummer) of a Scopevisio invcoming invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id,documentNumber (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetInvoiceAsyncWithHttpInfo (string idOrNumber, string fields = default(string))
        {
            // verify the required parameter 'idOrNumber' is set
            if (idOrNumber == null)
                throw new ApiException(400, "Missing required parameter 'idOrNumber' when calling IncomingInvoiceApi->GetInvoice");

            var localVarPath = "/incominginvoice/{idOrNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idOrNumber != null) localVarPathParams.Add("idOrNumber", this.Configuration.ApiClient.ParameterToString(idOrNumber)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// The file of incoming invoice with the given idOrNumber (id or Interne Nummer) Returns the main file of the Scopevisio incoming invoice with the given idOrNumber (id or Interne Nummer).  Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">id or number(Interne Nummer) of a Scopevisio invcoming invoice.</param>
        /// <returns></returns>
        public void GetInvoiceFile (string idOrNumber)
        {
             GetInvoiceFileWithHttpInfo(idOrNumber);
        }

        /// <summary>
        /// The file of incoming invoice with the given idOrNumber (id or Interne Nummer) Returns the main file of the Scopevisio incoming invoice with the given idOrNumber (id or Interne Nummer).  Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">id or number(Interne Nummer) of a Scopevisio invcoming invoice.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetInvoiceFileWithHttpInfo (string idOrNumber)
        {
            // verify the required parameter 'idOrNumber' is set
            if (idOrNumber == null)
                throw new ApiException(400, "Missing required parameter 'idOrNumber' when calling IncomingInvoiceApi->GetInvoiceFile");

            var localVarPath = "/incominginvoice/{idOrNumber}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idOrNumber != null) localVarPathParams.Add("idOrNumber", this.Configuration.ApiClient.ParameterToString(idOrNumber)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoiceFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// The file of incoming invoice with the given idOrNumber (id or Interne Nummer) Returns the main file of the Scopevisio incoming invoice with the given idOrNumber (id or Interne Nummer).  Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">id or number(Interne Nummer) of a Scopevisio invcoming invoice.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetInvoiceFileAsync (string idOrNumber)
        {
             await GetInvoiceFileAsyncWithHttpInfo(idOrNumber);

        }

        /// <summary>
        /// The file of incoming invoice with the given idOrNumber (id or Interne Nummer) Returns the main file of the Scopevisio incoming invoice with the given idOrNumber (id or Interne Nummer).  Required profile(s):&lt;i&gt; Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idOrNumber">id or number(Interne Nummer) of a Scopevisio invcoming invoice.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetInvoiceFileAsyncWithHttpInfo (string idOrNumber)
        {
            // verify the required parameter 'idOrNumber' is set
            if (idOrNumber == null)
                throw new ApiException(400, "Missing required parameter 'idOrNumber' when calling IncomingInvoiceApi->GetInvoiceFile");

            var localVarPath = "/incominginvoice/{idOrNumber}/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idOrNumber != null) localVarPathParams.Add("idOrNumber", this.Configuration.ApiClient.ParameterToString(idOrNumber)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoiceFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
