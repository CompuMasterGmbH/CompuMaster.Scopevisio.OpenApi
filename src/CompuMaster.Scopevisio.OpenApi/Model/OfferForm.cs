/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CompuMaster.Scopevisio.OpenApi.Client.OpenAPIDateConverter;

namespace CompuMaster.Scopevisio.OpenApi.Model
{
    /// <summary>
    /// OfferForm
    /// </summary>
    [DataContract]
    public partial class OfferForm :  IEquatable<OfferForm>, IValidatableObject
    {
        /// <summary>
        /// paymentTypeName (Zahlungsart). If not provided for new invoice, the payment type from the personal account (connected to the customerContactId) is used. Sets also paymentType.
        /// </summary>
        /// <value>paymentTypeName (Zahlungsart). If not provided for new invoice, the payment type from the personal account (connected to the customerContactId) is used. Sets also paymentType.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentTypeNameEnum
        {
            /// <summary>
            /// Enum Vorkasse for value: Vorkasse
            /// </summary>
            [EnumMember(Value = "Vorkasse")]
            Vorkasse = 1,

            /// <summary>
            /// Enum Berweisung for value: Überweisung
            /// </summary>
            [EnumMember(Value = "Überweisung")]
            Berweisung = 2,

            /// <summary>
            /// Enum PayPal for value: PayPal
            /// </summary>
            [EnumMember(Value = "PayPal")]
            PayPal = 3,

            /// <summary>
            /// Enum Nachname for value: Nachname
            /// </summary>
            [EnumMember(Value = "Nachname")]
            Nachname = 4,

            /// <summary>
            /// Enum Einzugsermchtigung for value: Einzugsermächtigung
            /// </summary>
            [EnumMember(Value = "Einzugsermächtigung")]
            Einzugsermchtigung = 5,

            /// <summary>
            /// Enum Rechnung for value: Rechnung
            /// </summary>
            [EnumMember(Value = "Rechnung")]
            Rechnung = 6,

            /// <summary>
            /// Enum ECKarte for value: EC-Karte
            /// </summary>
            [EnumMember(Value = "EC-Karte")]
            ECKarte = 7,

            /// <summary>
            /// Enum Abbuchungsgenehmigung for value: Abbuchungsgenehmigung
            /// </summary>
            [EnumMember(Value = "Abbuchungsgenehmigung")]
            Abbuchungsgenehmigung = 8,

            /// <summary>
            /// Enum Bar for value: Bar
            /// </summary>
            [EnumMember(Value = "Bar")]
            Bar = 9,

            /// <summary>
            /// Enum Kreditkarte for value: Kreditkarte
            /// </summary>
            [EnumMember(Value = "Kreditkarte")]
            Kreditkarte = 10

        }

        /// <summary>
        /// paymentTypeName (Zahlungsart). If not provided for new invoice, the payment type from the personal account (connected to the customerContactId) is used. Sets also paymentType.
        /// </summary>
        /// <value>paymentTypeName (Zahlungsart). If not provided for new invoice, the payment type from the personal account (connected to the customerContactId) is used. Sets also paymentType.</value>
        [DataMember(Name="paymentTypeName", EmitDefaultValue=false)]
        public PaymentTypeNameEnum? PaymentTypeName { get; set; }
        /// <summary>
        /// salesPhase (Potenzial-/Angebotsphase).  Please check your catalog in the Scopevisio desktop client for allowable values.
        /// </summary>
        /// <value>salesPhase (Potenzial-/Angebotsphase).  Please check your catalog in the Scopevisio desktop client for allowable values.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SalesPhaseEnum
        {
            /// <summary>
            /// Enum Qualifizierungsphase for value: Qualifizierungsphase
            /// </summary>
            [EnumMember(Value = "Qualifizierungsphase")]
            Qualifizierungsphase = 1,

            /// <summary>
            /// Enum Grundbetreuung for value: Grundbetreuung
            /// </summary>
            [EnumMember(Value = "Grundbetreuung")]
            Grundbetreuung = 2,

            /// <summary>
            /// Enum Intensivbetreuung for value: Intensivbetreuung
            /// </summary>
            [EnumMember(Value = "Intensivbetreuung")]
            Intensivbetreuung = 3,

            /// <summary>
            /// Enum Angebotsbetreuung for value: Angebotsbetreuung
            /// </summary>
            [EnumMember(Value = "Angebotsbetreuung")]
            Angebotsbetreuung = 4,

            /// <summary>
            /// Enum Preisverhandlung for value: Preisverhandlung
            /// </summary>
            [EnumMember(Value = "Preisverhandlung")]
            Preisverhandlung = 5,

            /// <summary>
            /// Enum Abschlussverhandlung for value: Abschlussverhandlung
            /// </summary>
            [EnumMember(Value = "Abschlussverhandlung")]
            Abschlussverhandlung = 6,

            /// <summary>
            /// Enum UnverbindlicheZusagezBmndlicheZusage for value: unverbindliche Zusage (z.B. mündliche Zusage)
            /// </summary>
            [EnumMember(Value = "unverbindliche Zusage (z.B. mündliche Zusage)")]
            UnverbindlicheZusagezBmndlicheZusage = 7,

            /// <summary>
            /// Enum VerbindlicheZusageAuftrag for value: verbindliche Zusage (Auftrag
            /// </summary>
            [EnumMember(Value = "verbindliche Zusage (Auftrag")]
            VerbindlicheZusageAuftrag = 8,

            /// <summary>
            /// Enum Vertrag for value: Vertrag)
            /// </summary>
            [EnumMember(Value = "Vertrag)")]
            Vertrag = 9

        }

        /// <summary>
        /// salesPhase (Potenzial-/Angebotsphase).  Please check your catalog in the Scopevisio desktop client for allowable values.
        /// </summary>
        /// <value>salesPhase (Potenzial-/Angebotsphase).  Please check your catalog in the Scopevisio desktop client for allowable values.</value>
        [DataMember(Name="salesPhase", EmitDefaultValue=false)]
        public SalesPhaseEnum? SalesPhase { get; set; }
        /// <summary>
        /// salesClassification (Angebotspriorität).  Please check your catalog in the Scopevisio desktop client for allowable values.
        /// </summary>
        /// <value>salesClassification (Angebotspriorität).  Please check your catalog in the Scopevisio desktop client for allowable values.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SalesClassificationEnum
        {
            /// <summary>
            /// Enum VIPPriorittsehrwichtigundsehrdringlich for value: VIP Priorität (sehr wichtig und sehr dringlich)
            /// </summary>
            [EnumMember(Value = "VIP Priorität (sehr wichtig und sehr dringlich)")]
            VIPPriorittsehrwichtigundsehrdringlich = 1,

            /// <summary>
            /// Enum APriorittwichtigunddringlich for value: A Priorität (wichtig und dringlich)
            /// </summary>
            [EnumMember(Value = "A Priorität (wichtig und dringlich)")]
            APriorittwichtigunddringlich = 2,

            /// <summary>
            /// Enum BPriorittwichtigundnichtdringlich for value: B Priorität (wichtig und nicht dringlich)
            /// </summary>
            [EnumMember(Value = "B Priorität (wichtig und nicht dringlich)")]
            BPriorittwichtigundnichtdringlich = 3,

            /// <summary>
            /// Enum CPriorittnichtwichtigunddringlich for value: C Priorität (nicht wichtig und dringlich)
            /// </summary>
            [EnumMember(Value = "C Priorität (nicht wichtig und dringlich)")]
            CPriorittnichtwichtigunddringlich = 4,

            /// <summary>
            /// Enum DPriorittnichtwichtigundnichtdringlich for value: D Priorität (nicht wichtig und nicht dringlich)
            /// </summary>
            [EnumMember(Value = "D Priorität (nicht wichtig und nicht dringlich)")]
            DPriorittnichtwichtigundnichtdringlich = 5,

            /// <summary>
            /// Enum EPriorittdirektverwerfen for value: E Priorität (direkt verwerfen)
            /// </summary>
            [EnumMember(Value = "E Priorität (direkt verwerfen)")]
            EPriorittdirektverwerfen = 6

        }

        /// <summary>
        /// salesClassification (Angebotspriorität).  Please check your catalog in the Scopevisio desktop client for allowable values.
        /// </summary>
        /// <value>salesClassification (Angebotspriorität).  Please check your catalog in the Scopevisio desktop client for allowable values.</value>
        [DataMember(Name="salesClassification", EmitDefaultValue=false)]
        public SalesClassificationEnum? SalesClassification { get; set; }
        /// <summary>
        /// salesActivity (Folgeaktivität).  Please check your catalog in the Scopevisio desktop client for allowable values.
        /// </summary>
        /// <value>salesActivity (Folgeaktivität).  Please check your catalog in the Scopevisio desktop client for allowable values.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SalesActivityEnum
        {
            /// <summary>
            /// Enum _1Anruf for value: 1. Anruf
            /// </summary>
            [EnumMember(Value = "1. Anruf")]
            _1Anruf = 1,

            /// <summary>
            /// Enum _2Anruf for value: 2. Anruf
            /// </summary>
            [EnumMember(Value = "2. Anruf")]
            _2Anruf = 2,

            /// <summary>
            /// Enum _3Anruf for value: 3. Anruf
            /// </summary>
            [EnumMember(Value = "3. Anruf")]
            _3Anruf = 3,

            /// <summary>
            /// Enum Zurckrufen for value: zurückrufen
            /// </summary>
            [EnumMember(Value = "zurückrufen")]
            Zurckrufen = 4,

            /// <summary>
            /// Enum EMailsenden for value: E-Mail senden
            /// </summary>
            [EnumMember(Value = "E-Mail senden")]
            EMailsenden = 5,

            /// <summary>
            /// Enum Webinarabhalten for value: Webinar abhalten
            /// </summary>
            [EnumMember(Value = "Webinar abhalten")]
            Webinarabhalten = 6,

            /// <summary>
            /// Enum Prospektezusenden for value: Prospekte zusenden
            /// </summary>
            [EnumMember(Value = "Prospekte zusenden")]
            Prospektezusenden = 7,

            /// <summary>
            /// Enum Angeboterlutern for value: Angebot erläutern
            /// </summary>
            [EnumMember(Value = "Angebot erläutern")]
            Angeboterlutern = 8

        }

        /// <summary>
        /// salesActivity (Folgeaktivität).  Please check your catalog in the Scopevisio desktop client for allowable values.
        /// </summary>
        /// <value>salesActivity (Folgeaktivität).  Please check your catalog in the Scopevisio desktop client for allowable values.</value>
        [DataMember(Name="salesActivity", EmitDefaultValue=false)]
        public SalesActivityEnum? SalesActivity { get; set; }
        /// <summary>
        /// phase (Verkaufswahrscheinlichkeit).  Sets also phaseId. Please check your catalog in the Scopevisio desktop client for allowable values.
        /// </summary>
        /// <value>phase (Verkaufswahrscheinlichkeit).  Sets also phaseId. Please check your catalog in the Scopevisio desktop client for allowable values.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PhaseEnum
        {
            /// <summary>
            /// Enum Auftragwurdeverbindlicherteilt for value: Auftrag wurde verbindlich erteilt
            /// </summary>
            [EnumMember(Value = "Auftrag wurde verbindlich erteilt")]
            Auftragwurdeverbindlicherteilt = 1,

            /// <summary>
            /// Enum Vorvertragwurdegeschlossen for value: Vorvertrag wurde geschlossen
            /// </summary>
            [EnumMember(Value = "Vorvertrag wurde geschlossen")]
            Vorvertragwurdegeschlossen = 2,

            /// <summary>
            /// Enum Abschlussverhandlungenfhren for value: Abschlussverhandlungen führen
            /// </summary>
            [EnumMember(Value = "Abschlussverhandlungen führen")]
            Abschlussverhandlungenfhren = 3,

            /// <summary>
            /// Enum InteressenterteiltmndlicheZusage for value: Interessent erteilt mündliche Zusage
            /// </summary>
            [EnumMember(Value = "Interessent erteilt mündliche Zusage")]
            InteressenterteiltmndlicheZusage = 4,

            /// <summary>
            /// Enum InteressentfavorisiertunserAngebot for value: Interessent favorisiert unser Angebot
            /// </summary>
            [EnumMember(Value = "Interessent favorisiert unser Angebot")]
            InteressentfavorisiertunserAngebot = 5,

            /// <summary>
            /// Enum Entscheidungherbeifhren for value: Entscheidung herbeiführen
            /// </summary>
            [EnumMember(Value = "Entscheidung herbeiführen")]
            Entscheidungherbeifhren = 6,

            /// <summary>
            /// Enum InteressentsignalisiertdeutlichesInteresse for value: Interessent signalisiert deutliches Interesse
            /// </summary>
            [EnumMember(Value = "Interessent signalisiert deutliches Interesse")]
            InteressentsignalisiertdeutlichesInteresse = 7,

            /// <summary>
            /// Enum Nutzenargumentationaufbauen for value: Nutzenargumentation aufbauen
            /// </summary>
            [EnumMember(Value = "Nutzenargumentation aufbauen")]
            Nutzenargumentationaufbauen = 8,

            /// <summary>
            /// Enum Angebotabgegeben for value: Angebot abgegeben
            /// </summary>
            [EnumMember(Value = "Angebot abgegeben")]
            Angebotabgegeben = 9,

            /// <summary>
            /// Enum AngebotinAbstimmung for value: Angebot in Abstimmung
            /// </summary>
            [EnumMember(Value = "Angebot in Abstimmung")]
            AngebotinAbstimmung = 10,

            /// <summary>
            /// Enum Potenzialqualifizieren for value: Potenzial qualifizieren
            /// </summary>
            [EnumMember(Value = "Potenzial qualifizieren")]
            Potenzialqualifizieren = 11,

            /// <summary>
            /// Enum Potenzialidentifizieren for value: Potenzial identifizieren
            /// </summary>
            [EnumMember(Value = "Potenzial identifizieren")]
            Potenzialidentifizieren = 12,

            /// <summary>
            /// Enum IndividuelleVertriebsaktivittgestartet for value: Individuelle Vertriebsaktivität gestartet
            /// </summary>
            [EnumMember(Value = "Individuelle Vertriebsaktivität gestartet")]
            IndividuelleVertriebsaktivittgestartet = 13,

            /// <summary>
            /// Enum Bedarfqualifiziert for value: Bedarf qualifiziert
            /// </summary>
            [EnumMember(Value = "Bedarf qualifiziert")]
            Bedarfqualifiziert = 14,

            /// <summary>
            /// Enum Bedarfidentifiziert for value: Bedarf identifiziert
            /// </summary>
            [EnumMember(Value = "Bedarf identifiziert")]
            Bedarfidentifiziert = 15,

            /// <summary>
            /// Enum KeinePrognose for value: keine Prognose
            /// </summary>
            [EnumMember(Value = "keine Prognose")]
            KeinePrognose = 16,

            /// <summary>
            /// Enum Ungewichtet for value: ungewichtet
            /// </summary>
            [EnumMember(Value = "ungewichtet")]
            Ungewichtet = 17,

            /// <summary>
            /// Enum Verloren for value: verloren
            /// </summary>
            [EnumMember(Value = "verloren")]
            Verloren = 18

        }

        /// <summary>
        /// phase (Verkaufswahrscheinlichkeit).  Sets also phaseId. Please check your catalog in the Scopevisio desktop client for allowable values.
        /// </summary>
        /// <value>phase (Verkaufswahrscheinlichkeit).  Sets also phaseId. Please check your catalog in the Scopevisio desktop client for allowable values.</value>
        [DataMember(Name="phase", EmitDefaultValue=false)]
        public PhaseEnum? Phase { get; set; }
        /// <summary>
        /// state (Angebotsstatus). Sets also state.
        /// </summary>
        /// <value>state (Angebotsstatus). Sets also state.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateNameEnum
        {
            /// <summary>
            /// Enum Entworfen for value: entworfen
            /// </summary>
            [EnumMember(Value = "entworfen")]
            Entworfen = 1,

            /// <summary>
            /// Enum Abgegeben for value: abgegeben
            /// </summary>
            [EnumMember(Value = "abgegeben")]
            Abgegeben = 2,

            /// <summary>
            /// Enum Angenommen for value: angenommen
            /// </summary>
            [EnumMember(Value = "angenommen")]
            Angenommen = 3,

            /// <summary>
            /// Enum Veraltet for value: veraltet
            /// </summary>
            [EnumMember(Value = "veraltet")]
            Veraltet = 4,

            /// <summary>
            /// Enum Abgelehnt for value: abgelehnt
            /// </summary>
            [EnumMember(Value = "abgelehnt")]
            Abgelehnt = 5

        }

        /// <summary>
        /// state (Angebotsstatus). Sets also state.
        /// </summary>
        /// <value>state (Angebotsstatus). Sets also state.</value>
        [DataMember(Name="stateName", EmitDefaultValue=false)]
        public StateNameEnum? StateName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferForm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OfferForm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferForm" /> class.
        /// </summary>
        /// <param name="projectId">projectId (Projekt). Sets also projectNumber, projectName. Please look up in your sales (Vertriebs-) and/or outgoing invoice settings (Abrechnungseinstellungen) to check if projectId is mandatory..</param>
        /// <param name="customerContactId">customerContactId (Lead/Interessent/Kunde). Sets also customerPersonalAccountId, customerPersonalAccountNumber, customerPersonalAccountName, customerPersonalAccountExternalNumber, customerName, customerNameExtra, customerNumber, customerContactName, customerContactCustomerNumber. Must be set if project is not mandatory. Ignored otherwise. (required).</param>
        /// <param name="name">name (Bezeichnung).</param>
        /// <param name="text">text (Beschreibung).</param>
        /// <param name="customerContactPerson">customerContactPerson (Ansprechpartner). Sets also customerContactPersonName. The contact must be an employee of the project contact (contactId)..</param>
        /// <param name="documentDate">documentDate (PZ-/Angebots-/Auftrags-/Rechnungs-/GS-/LS-Datum). If not given, it is set to the current date. Sets also documentDateMonth. (required).</param>
        /// <param name="documentNumber">documentNumber (Potenzial-/Angebots-/Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinnummer).The field is mandatory. If not provided a document number is generated..</param>
        /// <param name="ourContactPerson">ourContactPerson (Potenzial-/Angebots- Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinbearbeiter). The UID of a Scopevisio user. The user must have a user contact (Aus Benutzerkontakt) for the current organisation. Setting this field also sets ourContactPersonName..</param>
        /// <param name="deliveryType">deliveryType (Lieferart)..</param>
        /// <param name="deliveryCosts">deliveryCosts (Lieferkosten)..</param>
        /// <param name="cashOnDelivery">cashOnDelivery (Nachnamegebühr)..</param>
        /// <param name="textTitle">textTitle (Titel)..</param>
        /// <param name="textSubTitle">textSubTitle (Untertitel)..</param>
        /// <param name="textIntro">textIntro (Einleitungstext). Use \&quot;\\n\&quot; to insert new line..</param>
        /// <param name="textExtro">textExtro (Schlusstext). Use \&quot;\\n\&quot; to insert new line..</param>
        /// <param name="selectedAddress">selectedAddress (Adresse [Haupt-/Rechnungs-/Liefer-/freie Adresse]). 0 &#x3D; Hauptadresse, 1 &#x3D; Rechnungsadresse, 2 &#x3D; freie Adresse, 3 &#x3D; Lieferadresse.</param>
        /// <param name="otherAddress">otherAddress (freie Adresse). Use \&quot;\\n\&quot; to insert new line..</param>
        /// <param name="gross">gross (Preisangabe - Netto/Brutto) (default to false).</param>
        /// <param name="permissionType">0 &#x3D; Öffentlich, 1 &#x3D; Benutzerdefiniert, 2 &#x3D; Persönlich.</param>
        /// <param name="readPermissionProfiles">comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1..</param>
        /// <param name="readPermissionLogins">comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1..</param>
        /// <param name="writePermissionProfiles">comma separated list of profiles for full access, evaluated only if permissionType equals 1..</param>
        /// <param name="writePermissionLogins">comma separated list of user login emails, evaluated only if permissionType equals 1..</param>
        /// <param name="customFields">Benutzerdefinierte Felder.</param>
        /// <param name="positionsForm">positionsForm.</param>
        /// <param name="deliveryDate">deliveryDate (Leistungsdatum). The deliveryDate as epoch timestamp in milliseconds..</param>
        /// <param name="deliveryDateTo">deliveryDateTo (Leistungsdatum-bis). The deliveryDateTo as epoch timestamp in milliseconds..</param>
        /// <param name="isEndDiscountAbsolute">isEndDiscountAbsolute (Schlussrabatt), true &#x3D; absolute, false &#x3D; percent (default to false).</param>
        /// <param name="endDiscount">endDiscount(Schlussrabatt), if isEndDiscountAbsolute is set to true, then endDiscount should be an amount, if isEndDiscountAbsolute is set to false then a percentage is needed..</param>
        /// <param name="paymentTypeName">paymentTypeName (Zahlungsart). If not provided for new invoice, the payment type from the personal account (connected to the customerContactId) is used. Sets also paymentType..</param>
        /// <param name="isPaid">isPaid (Auf exportiertem Beleg als Bezahlt ausweisen) (default to false).</param>
        /// <param name="discountDate1">discountDate1 (Skontodatum 1). The discountDate1 as epoch timestamp in milliseconds. If it is set either discountPercent1 or discountAmount1 must be set. If one of the payment term properties is provided (discountDate1, discountDate2, dueDate, discountPercent1, discountPercent2, discountAmount1, discountAmount2) when creating an invoice, then the form is used. Otherwise the payment term from the personal account (connected to the customerContactId) is used..</param>
        /// <param name="discountDate2">discountDate2 (Skontodatum 2). The discountDate2 as epoch timestamp in milliseconds. It must be greater than discountDate1. If it is set either discountPercent2 or discountAmount2 must be set..</param>
        /// <param name="dueDate">dueDate (Fälligkeitsdatum). The dueDate as epoch timestamp in milliseconds. It must be greater than discountDate2..</param>
        /// <param name="discountPercent1">discountPercent1 (Skontosatz1). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate1 must be set too..</param>
        /// <param name="discountPercent2">discountPercent2 (Skontosatz2). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate2 must be set too..</param>
        /// <param name="explicitDiscount">explicitDiscount (Skontobeträge manuell eingeben). If set discountAmount(s) must be provided (default to false).</param>
        /// <param name="discountAmount1">discountAmount1 (Skontobetrag1). Only evaluated if explicitDiscount is true. If set discountDate1 must be set too..</param>
        /// <param name="discountAmount2">discountAmount2 (Skontobetrag2). Only evaluated if explicitDiscount is true. If set discountDate2 must be set too..</param>
        /// <param name="salesPhase">salesPhase (Potenzial-/Angebotsphase).  Please check your catalog in the Scopevisio desktop client for allowable values..</param>
        /// <param name="salesClassification">salesClassification (Angebotspriorität).  Please check your catalog in the Scopevisio desktop client for allowable values..</param>
        /// <param name="salesActivity">salesActivity (Folgeaktivität).  Please check your catalog in the Scopevisio desktop client for allowable values..</param>
        /// <param name="phase">phase (Verkaufswahrscheinlichkeit).  Sets also phaseId. Please check your catalog in the Scopevisio desktop client for allowable values..</param>
        /// <param name="feasibility">feasibility (Verkaufswahrscheinlichkeit %).</param>
        /// <param name="closingDateTs">closingDateTs (Entscheidungsdatum). Sets also closingDateMonth The closingDateTs as epoch timestamp in milliseconds..</param>
        /// <param name="reminderDateTs">reminderDateTs (Wiedervorlage). The reminderDateTs as epoch timestamp in milliseconds..</param>
        /// <param name="orderNumber">orderNumber (Bestellnummer).</param>
        /// <param name="zoneNumber">zoneNumber (Rechnungskreis). Please check your zone settings in the Scopevisio client application if the field is mandaotry..</param>
        /// <param name="stateName">state (Angebotsstatus). Sets also state..</param>
        /// <param name="valutaDate">valutaDate (Umsatz-Zeitpunkt)..</param>
        /// <param name="locale">locale (Sprache).</param>
        public OfferForm(long projectId = default(long), long customerContactId = default(long), string name = default(string), string text = default(string), long customerContactPerson = default(long), long documentDate = default(long), string documentNumber = default(string), string ourContactPerson = default(string), string deliveryType = default(string), decimal deliveryCosts = default(decimal), decimal cashOnDelivery = default(decimal), string textTitle = default(string), string textSubTitle = default(string), string textIntro = default(string), string textExtro = default(string), long selectedAddress = default(long), string otherAddress = default(string), bool gross = false, long permissionType = default(long), string readPermissionProfiles = default(string), string readPermissionLogins = default(string), string writePermissionProfiles = default(string), string writePermissionLogins = default(string), List<CustomField> customFields = default(List<CustomField>), PositionsForm positionsForm = default(PositionsForm), long deliveryDate = default(long), long deliveryDateTo = default(long), bool isEndDiscountAbsolute = false, decimal endDiscount = default(decimal), PaymentTypeNameEnum? paymentTypeName = default(PaymentTypeNameEnum?), bool isPaid = false, long discountDate1 = default(long), long discountDate2 = default(long), long dueDate = default(long), decimal discountPercent1 = default(decimal), decimal discountPercent2 = default(decimal), bool explicitDiscount = false, decimal discountAmount1 = default(decimal), decimal discountAmount2 = default(decimal), SalesPhaseEnum? salesPhase = default(SalesPhaseEnum?), SalesClassificationEnum? salesClassification = default(SalesClassificationEnum?), SalesActivityEnum? salesActivity = default(SalesActivityEnum?), PhaseEnum? phase = default(PhaseEnum?), decimal feasibility = default(decimal), long closingDateTs = default(long), long reminderDateTs = default(long), string orderNumber = default(string), string zoneNumber = default(string), StateNameEnum? stateName = default(StateNameEnum?), long valutaDate = default(long), string locale = default(string))
        {
            // to ensure "customerContactId" is required (not null)
            if (customerContactId == null)
            {
                throw new InvalidDataException("customerContactId is a required property for OfferForm and cannot be null");
            }
            else
            {
                this.CustomerContactId = customerContactId;
            }
            
            // to ensure "documentDate" is required (not null)
            if (documentDate == null)
            {
                throw new InvalidDataException("documentDate is a required property for OfferForm and cannot be null");
            }
            else
            {
                this.DocumentDate = documentDate;
            }
            
            this.ProjectId = projectId;
            this.Name = name;
            this.Text = text;
            this.CustomerContactPerson = customerContactPerson;
            this.DocumentNumber = documentNumber;
            this.OurContactPerson = ourContactPerson;
            this.DeliveryType = deliveryType;
            this.DeliveryCosts = deliveryCosts;
            this.CashOnDelivery = cashOnDelivery;
            this.TextTitle = textTitle;
            this.TextSubTitle = textSubTitle;
            this.TextIntro = textIntro;
            this.TextExtro = textExtro;
            this.SelectedAddress = selectedAddress;
            this.OtherAddress = otherAddress;
            // use default value if no "gross" provided
            if (gross == null)
            {
                this.Gross = false;
            }
            else
            {
                this.Gross = gross;
            }
            this.PermissionType = permissionType;
            this.ReadPermissionProfiles = readPermissionProfiles;
            this.ReadPermissionLogins = readPermissionLogins;
            this.WritePermissionProfiles = writePermissionProfiles;
            this.WritePermissionLogins = writePermissionLogins;
            this.CustomFields = customFields;
            this.PositionsForm = positionsForm;
            this.DeliveryDate = deliveryDate;
            this.DeliveryDateTo = deliveryDateTo;
            // use default value if no "isEndDiscountAbsolute" provided
            if (isEndDiscountAbsolute == null)
            {
                this.IsEndDiscountAbsolute = false;
            }
            else
            {
                this.IsEndDiscountAbsolute = isEndDiscountAbsolute;
            }
            this.EndDiscount = endDiscount;
            this.PaymentTypeName = paymentTypeName;
            // use default value if no "isPaid" provided
            if (isPaid == null)
            {
                this.IsPaid = false;
            }
            else
            {
                this.IsPaid = isPaid;
            }
            this.DiscountDate1 = discountDate1;
            this.DiscountDate2 = discountDate2;
            this.DueDate = dueDate;
            this.DiscountPercent1 = discountPercent1;
            this.DiscountPercent2 = discountPercent2;
            // use default value if no "explicitDiscount" provided
            if (explicitDiscount == null)
            {
                this.ExplicitDiscount = false;
            }
            else
            {
                this.ExplicitDiscount = explicitDiscount;
            }
            this.DiscountAmount1 = discountAmount1;
            this.DiscountAmount2 = discountAmount2;
            this.SalesPhase = salesPhase;
            this.SalesClassification = salesClassification;
            this.SalesActivity = salesActivity;
            this.Phase = phase;
            this.Feasibility = feasibility;
            this.ClosingDateTs = closingDateTs;
            this.ReminderDateTs = reminderDateTs;
            this.OrderNumber = orderNumber;
            this.ZoneNumber = zoneNumber;
            this.StateName = stateName;
            this.ValutaDate = valutaDate;
            this.Locale = locale;
        }
        
        /// <summary>
        /// projectId (Projekt). Sets also projectNumber, projectName. Please look up in your sales (Vertriebs-) and/or outgoing invoice settings (Abrechnungseinstellungen) to check if projectId is mandatory.
        /// </summary>
        /// <value>projectId (Projekt). Sets also projectNumber, projectName. Please look up in your sales (Vertriebs-) and/or outgoing invoice settings (Abrechnungseinstellungen) to check if projectId is mandatory.</value>
        [DataMember(Name="projectId", EmitDefaultValue=false)]
        public long ProjectId { get; set; }

        /// <summary>
        /// customerContactId (Lead/Interessent/Kunde). Sets also customerPersonalAccountId, customerPersonalAccountNumber, customerPersonalAccountName, customerPersonalAccountExternalNumber, customerName, customerNameExtra, customerNumber, customerContactName, customerContactCustomerNumber. Must be set if project is not mandatory. Ignored otherwise.
        /// </summary>
        /// <value>customerContactId (Lead/Interessent/Kunde). Sets also customerPersonalAccountId, customerPersonalAccountNumber, customerPersonalAccountName, customerPersonalAccountExternalNumber, customerName, customerNameExtra, customerNumber, customerContactName, customerContactCustomerNumber. Must be set if project is not mandatory. Ignored otherwise.</value>
        [DataMember(Name="customerContactId", EmitDefaultValue=false)]
        public long CustomerContactId { get; set; }

        /// <summary>
        /// customerContactName - the name of the contact with the given customerContactId.
        /// </summary>
        /// <value>customerContactName - the name of the contact with the given customerContactId.</value>
        [DataMember(Name="customerContactName", EmitDefaultValue=false)]
        public string CustomerContactName { get; private set; }

        /// <summary>
        /// The customer number of the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id &#x3D;&#x3D; customerContactId, go to sphere (Rolle) Allgemein. The field contact number (Kontaktnummer) is the customerContactCustomerNumber.
        /// </summary>
        /// <value>The customer number of the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id &#x3D;&#x3D; customerContactId, go to sphere (Rolle) Allgemein. The field contact number (Kontaktnummer) is the customerContactCustomerNumber.</value>
        [DataMember(Name="customerContactCustomerNumber", EmitDefaultValue=false)]
        public string CustomerContactCustomerNumber { get; private set; }

        /// <summary>
        /// The master id of personal account associated with the contact with the given customerContactId.
        /// </summary>
        /// <value>The master id of personal account associated with the contact with the given customerContactId.</value>
        [DataMember(Name="customerPersonalAccountId", EmitDefaultValue=false)]
        public long CustomerPersonalAccountId { get; private set; }

        /// <summary>
        /// The number of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id &#x3D;&#x3D; customerContactId, go to sphere (Rolle) Debitor. Field account number (Kontonummer) is the customerPersonalAccountNumber. This field also corresponds to field \&quot;debitorNumber\&quot; from endpoint  /contact/{customerContactId} and field  \&quot;number\&quot; from /debitoraccounts.
        /// </summary>
        /// <value>The number of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id &#x3D;&#x3D; customerContactId, go to sphere (Rolle) Debitor. Field account number (Kontonummer) is the customerPersonalAccountNumber. This field also corresponds to field \&quot;debitorNumber\&quot; from endpoint  /contact/{customerContactId} and field  \&quot;number\&quot; from /debitoraccounts.</value>
        [DataMember(Name="customerPersonalAccountNumber", EmitDefaultValue=false)]
        public string CustomerPersonalAccountNumber { get; private set; }

        /// <summary>
        /// The name of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id &#x3D;&#x3D; customerContactId, go to sphere (Rolle) Debitor. Field account name (Kontoname) is the customerPersonalAccountName. This field also corresponds to field \&quot;name\&quot; from endpoint /debitoraccounts.
        /// </summary>
        /// <value>The name of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id &#x3D;&#x3D; customerContactId, go to sphere (Rolle) Debitor. Field account name (Kontoname) is the customerPersonalAccountName. This field also corresponds to field \&quot;name\&quot; from endpoint /debitoraccounts.</value>
        [DataMember(Name="customerPersonalAccountName", EmitDefaultValue=false)]
        public string CustomerPersonalAccountName { get; private set; }

        /// <summary>
        /// The customer number of the personal account with the given customerPersonalAccountNumber. Where to find the value in the Scopevisio client: open contact with master id &#x3D;&#x3D; customerContactId, go to sphere (Rolle) Debitor.  Field customer number (Kundennummer) is the customerPersonalAccountExternalNumber.
        /// </summary>
        /// <value>The customer number of the personal account with the given customerPersonalAccountNumber. Where to find the value in the Scopevisio client: open contact with master id &#x3D;&#x3D; customerContactId, go to sphere (Rolle) Debitor.  Field customer number (Kundennummer) is the customerPersonalAccountExternalNumber.</value>
        [DataMember(Name="customerPersonalAccountExternalNumber", EmitDefaultValue=false)]
        public string CustomerPersonalAccountExternalNumber { get; private set; }

        /// <summary>
        /// This field is for internal use only. Please use field customerContactName.
        /// </summary>
        /// <value>This field is for internal use only. Please use field customerContactName.</value>
        [DataMember(Name="customerName", EmitDefaultValue=false)]
        public string CustomerName { get; private set; }

        /// <summary>
        /// This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountExternalNumber.
        /// </summary>
        /// <value>This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountExternalNumber.</value>
        [DataMember(Name="customerNumber", EmitDefaultValue=false)]
        public string CustomerNumber { get; private set; }

        /// <summary>
        /// This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountName.
        /// </summary>
        /// <value>This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountName.</value>
        [DataMember(Name="customerNameExtra", EmitDefaultValue=false)]
        public string CustomerNameExtra { get; private set; }

        /// <summary>
        /// name (Bezeichnung)
        /// </summary>
        /// <value>name (Bezeichnung)</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// text (Beschreibung)
        /// </summary>
        /// <value>text (Beschreibung)</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// customerContactPerson (Ansprechpartner). Sets also customerContactPersonName. The contact must be an employee of the project contact (contactId).
        /// </summary>
        /// <value>customerContactPerson (Ansprechpartner). Sets also customerContactPersonName. The contact must be an employee of the project contact (contactId).</value>
        [DataMember(Name="customerContactPerson", EmitDefaultValue=false)]
        public long CustomerContactPerson { get; set; }

        /// <summary>
        /// documentDate (PZ-/Angebots-/Auftrags-/Rechnungs-/GS-/LS-Datum). If not given, it is set to the current date. Sets also documentDateMonth.
        /// </summary>
        /// <value>documentDate (PZ-/Angebots-/Auftrags-/Rechnungs-/GS-/LS-Datum). If not given, it is set to the current date. Sets also documentDateMonth.</value>
        [DataMember(Name="documentDate", EmitDefaultValue=false)]
        public long DocumentDate { get; set; }

        /// <summary>
        /// documentNumber (Potenzial-/Angebots-/Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinnummer).The field is mandatory. If not provided a document number is generated.
        /// </summary>
        /// <value>documentNumber (Potenzial-/Angebots-/Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinnummer).The field is mandatory. If not provided a document number is generated.</value>
        [DataMember(Name="documentNumber", EmitDefaultValue=false)]
        public string DocumentNumber { get; set; }

        /// <summary>
        /// ourContactPerson (Potenzial-/Angebots- Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinbearbeiter). The UID of a Scopevisio user. The user must have a user contact (Aus Benutzerkontakt) for the current organisation. Setting this field also sets ourContactPersonName.
        /// </summary>
        /// <value>ourContactPerson (Potenzial-/Angebots- Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinbearbeiter). The UID of a Scopevisio user. The user must have a user contact (Aus Benutzerkontakt) for the current organisation. Setting this field also sets ourContactPersonName.</value>
        [DataMember(Name="ourContactPerson", EmitDefaultValue=false)]
        public string OurContactPerson { get; set; }

        /// <summary>
        /// deliveryType (Lieferart).
        /// </summary>
        /// <value>deliveryType (Lieferart).</value>
        [DataMember(Name="deliveryType", EmitDefaultValue=false)]
        public string DeliveryType { get; set; }

        /// <summary>
        /// deliveryCosts (Lieferkosten).
        /// </summary>
        /// <value>deliveryCosts (Lieferkosten).</value>
        [DataMember(Name="deliveryCosts", EmitDefaultValue=false)]
        public decimal DeliveryCosts { get; set; }

        /// <summary>
        /// cashOnDelivery (Nachnamegebühr).
        /// </summary>
        /// <value>cashOnDelivery (Nachnamegebühr).</value>
        [DataMember(Name="cashOnDelivery", EmitDefaultValue=false)]
        public decimal CashOnDelivery { get; set; }

        /// <summary>
        /// textTitle (Titel).
        /// </summary>
        /// <value>textTitle (Titel).</value>
        [DataMember(Name="textTitle", EmitDefaultValue=false)]
        public string TextTitle { get; set; }

        /// <summary>
        /// textSubTitle (Untertitel).
        /// </summary>
        /// <value>textSubTitle (Untertitel).</value>
        [DataMember(Name="textSubTitle", EmitDefaultValue=false)]
        public string TextSubTitle { get; set; }

        /// <summary>
        /// textIntro (Einleitungstext). Use \&quot;\\n\&quot; to insert new line.
        /// </summary>
        /// <value>textIntro (Einleitungstext). Use \&quot;\\n\&quot; to insert new line.</value>
        [DataMember(Name="textIntro", EmitDefaultValue=false)]
        public string TextIntro { get; set; }

        /// <summary>
        /// textExtro (Schlusstext). Use \&quot;\\n\&quot; to insert new line.
        /// </summary>
        /// <value>textExtro (Schlusstext). Use \&quot;\\n\&quot; to insert new line.</value>
        [DataMember(Name="textExtro", EmitDefaultValue=false)]
        public string TextExtro { get; set; }

        /// <summary>
        /// selectedAddress (Adresse [Haupt-/Rechnungs-/Liefer-/freie Adresse]). 0 &#x3D; Hauptadresse, 1 &#x3D; Rechnungsadresse, 2 &#x3D; freie Adresse, 3 &#x3D; Lieferadresse
        /// </summary>
        /// <value>selectedAddress (Adresse [Haupt-/Rechnungs-/Liefer-/freie Adresse]). 0 &#x3D; Hauptadresse, 1 &#x3D; Rechnungsadresse, 2 &#x3D; freie Adresse, 3 &#x3D; Lieferadresse</value>
        [DataMember(Name="selectedAddress", EmitDefaultValue=false)]
        public long SelectedAddress { get; set; }

        /// <summary>
        /// otherAddress (freie Adresse). Use \&quot;\\n\&quot; to insert new line.
        /// </summary>
        /// <value>otherAddress (freie Adresse). Use \&quot;\\n\&quot; to insert new line.</value>
        [DataMember(Name="otherAddress", EmitDefaultValue=false)]
        public string OtherAddress { get; set; }

        /// <summary>
        /// gross (Preisangabe - Netto/Brutto)
        /// </summary>
        /// <value>gross (Preisangabe - Netto/Brutto)</value>
        [DataMember(Name="gross", EmitDefaultValue=false)]
        public bool Gross { get; set; }

        /// <summary>
        /// 0 &#x3D; Öffentlich, 1 &#x3D; Benutzerdefiniert, 2 &#x3D; Persönlich
        /// </summary>
        /// <value>0 &#x3D; Öffentlich, 1 &#x3D; Benutzerdefiniert, 2 &#x3D; Persönlich</value>
        [DataMember(Name="permissionType", EmitDefaultValue=false)]
        public long PermissionType { get; set; }

        /// <summary>
        /// comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="readPermissionProfiles", EmitDefaultValue=false)]
        public string ReadPermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="readPermissionLogins", EmitDefaultValue=false)]
        public string ReadPermissionLogins { get; set; }

        /// <summary>
        /// comma separated list of profiles for full access, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of profiles for full access, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="writePermissionProfiles", EmitDefaultValue=false)]
        public string WritePermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of user login emails, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="writePermissionLogins", EmitDefaultValue=false)]
        public string WritePermissionLogins { get; set; }

        /// <summary>
        /// Benutzerdefinierte Felder
        /// </summary>
        /// <value>Benutzerdefinierte Felder</value>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public List<CustomField> CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets PositionsForm
        /// </summary>
        [DataMember(Name="positionsForm", EmitDefaultValue=false)]
        public PositionsForm PositionsForm { get; set; }

        /// <summary>
        /// deliveryDate (Leistungsdatum). The deliveryDate as epoch timestamp in milliseconds.
        /// </summary>
        /// <value>deliveryDate (Leistungsdatum). The deliveryDate as epoch timestamp in milliseconds.</value>
        [DataMember(Name="deliveryDate", EmitDefaultValue=false)]
        public long DeliveryDate { get; set; }

        /// <summary>
        /// deliveryDateTo (Leistungsdatum-bis). The deliveryDateTo as epoch timestamp in milliseconds.
        /// </summary>
        /// <value>deliveryDateTo (Leistungsdatum-bis). The deliveryDateTo as epoch timestamp in milliseconds.</value>
        [DataMember(Name="deliveryDateTo", EmitDefaultValue=false)]
        public long DeliveryDateTo { get; set; }

        /// <summary>
        /// isEndDiscountAbsolute (Schlussrabatt), true &#x3D; absolute, false &#x3D; percent
        /// </summary>
        /// <value>isEndDiscountAbsolute (Schlussrabatt), true &#x3D; absolute, false &#x3D; percent</value>
        [DataMember(Name="isEndDiscountAbsolute", EmitDefaultValue=false)]
        public bool IsEndDiscountAbsolute { get; set; }

        /// <summary>
        /// endDiscount(Schlussrabatt), if isEndDiscountAbsolute is set to true, then endDiscount should be an amount, if isEndDiscountAbsolute is set to false then a percentage is needed.
        /// </summary>
        /// <value>endDiscount(Schlussrabatt), if isEndDiscountAbsolute is set to true, then endDiscount should be an amount, if isEndDiscountAbsolute is set to false then a percentage is needed.</value>
        [DataMember(Name="endDiscount", EmitDefaultValue=false)]
        public decimal EndDiscount { get; set; }


        /// <summary>
        /// isPaid (Auf exportiertem Beleg als Bezahlt ausweisen)
        /// </summary>
        /// <value>isPaid (Auf exportiertem Beleg als Bezahlt ausweisen)</value>
        [DataMember(Name="isPaid", EmitDefaultValue=false)]
        public bool IsPaid { get; set; }

        /// <summary>
        /// discountDate1 (Skontodatum 1). The discountDate1 as epoch timestamp in milliseconds. If it is set either discountPercent1 or discountAmount1 must be set. If one of the payment term properties is provided (discountDate1, discountDate2, dueDate, discountPercent1, discountPercent2, discountAmount1, discountAmount2) when creating an invoice, then the form is used. Otherwise the payment term from the personal account (connected to the customerContactId) is used.
        /// </summary>
        /// <value>discountDate1 (Skontodatum 1). The discountDate1 as epoch timestamp in milliseconds. If it is set either discountPercent1 or discountAmount1 must be set. If one of the payment term properties is provided (discountDate1, discountDate2, dueDate, discountPercent1, discountPercent2, discountAmount1, discountAmount2) when creating an invoice, then the form is used. Otherwise the payment term from the personal account (connected to the customerContactId) is used.</value>
        [DataMember(Name="discountDate1", EmitDefaultValue=false)]
        public long DiscountDate1 { get; set; }

        /// <summary>
        /// discountDate2 (Skontodatum 2). The discountDate2 as epoch timestamp in milliseconds. It must be greater than discountDate1. If it is set either discountPercent2 or discountAmount2 must be set.
        /// </summary>
        /// <value>discountDate2 (Skontodatum 2). The discountDate2 as epoch timestamp in milliseconds. It must be greater than discountDate1. If it is set either discountPercent2 or discountAmount2 must be set.</value>
        [DataMember(Name="discountDate2", EmitDefaultValue=false)]
        public long DiscountDate2 { get; set; }

        /// <summary>
        /// dueDate (Fälligkeitsdatum). The dueDate as epoch timestamp in milliseconds. It must be greater than discountDate2.
        /// </summary>
        /// <value>dueDate (Fälligkeitsdatum). The dueDate as epoch timestamp in milliseconds. It must be greater than discountDate2.</value>
        [DataMember(Name="dueDate", EmitDefaultValue=false)]
        public long DueDate { get; set; }

        /// <summary>
        /// discountPercent1 (Skontosatz1). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate1 must be set too.
        /// </summary>
        /// <value>discountPercent1 (Skontosatz1). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate1 must be set too.</value>
        [DataMember(Name="discountPercent1", EmitDefaultValue=false)]
        public decimal DiscountPercent1 { get; set; }

        /// <summary>
        /// discountPercent2 (Skontosatz2). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate2 must be set too.
        /// </summary>
        /// <value>discountPercent2 (Skontosatz2). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate2 must be set too.</value>
        [DataMember(Name="discountPercent2", EmitDefaultValue=false)]
        public decimal DiscountPercent2 { get; set; }

        /// <summary>
        /// explicitDiscount (Skontobeträge manuell eingeben). If set discountAmount(s) must be provided
        /// </summary>
        /// <value>explicitDiscount (Skontobeträge manuell eingeben). If set discountAmount(s) must be provided</value>
        [DataMember(Name="explicitDiscount", EmitDefaultValue=false)]
        public bool ExplicitDiscount { get; set; }

        /// <summary>
        /// discountAmount1 (Skontobetrag1). Only evaluated if explicitDiscount is true. If set discountDate1 must be set too.
        /// </summary>
        /// <value>discountAmount1 (Skontobetrag1). Only evaluated if explicitDiscount is true. If set discountDate1 must be set too.</value>
        [DataMember(Name="discountAmount1", EmitDefaultValue=false)]
        public decimal DiscountAmount1 { get; set; }

        /// <summary>
        /// discountAmount2 (Skontobetrag2). Only evaluated if explicitDiscount is true. If set discountDate2 must be set too.
        /// </summary>
        /// <value>discountAmount2 (Skontobetrag2). Only evaluated if explicitDiscount is true. If set discountDate2 must be set too.</value>
        [DataMember(Name="discountAmount2", EmitDefaultValue=false)]
        public decimal DiscountAmount2 { get; set; }





        /// <summary>
        /// feasibility (Verkaufswahrscheinlichkeit %)
        /// </summary>
        /// <value>feasibility (Verkaufswahrscheinlichkeit %)</value>
        [DataMember(Name="feasibility", EmitDefaultValue=false)]
        public decimal Feasibility { get; set; }

        /// <summary>
        /// closingDateTs (Entscheidungsdatum). Sets also closingDateMonth The closingDateTs as epoch timestamp in milliseconds.
        /// </summary>
        /// <value>closingDateTs (Entscheidungsdatum). Sets also closingDateMonth The closingDateTs as epoch timestamp in milliseconds.</value>
        [DataMember(Name="closingDateTs", EmitDefaultValue=false)]
        public long ClosingDateTs { get; set; }

        /// <summary>
        /// reminderDateTs (Wiedervorlage). The reminderDateTs as epoch timestamp in milliseconds.
        /// </summary>
        /// <value>reminderDateTs (Wiedervorlage). The reminderDateTs as epoch timestamp in milliseconds.</value>
        [DataMember(Name="reminderDateTs", EmitDefaultValue=false)]
        public long ReminderDateTs { get; set; }

        /// <summary>
        /// orderNumber (Bestellnummer)
        /// </summary>
        /// <value>orderNumber (Bestellnummer)</value>
        [DataMember(Name="orderNumber", EmitDefaultValue=false)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// zoneNumber (Rechnungskreis). Please check your zone settings in the Scopevisio client application if the field is mandaotry.
        /// </summary>
        /// <value>zoneNumber (Rechnungskreis). Please check your zone settings in the Scopevisio client application if the field is mandaotry.</value>
        [DataMember(Name="zoneNumber", EmitDefaultValue=false)]
        public string ZoneNumber { get; set; }


        /// <summary>
        /// valutaDate (Umsatz-Zeitpunkt).
        /// </summary>
        /// <value>valutaDate (Umsatz-Zeitpunkt).</value>
        [DataMember(Name="valutaDate", EmitDefaultValue=false)]
        public long ValutaDate { get; set; }

        /// <summary>
        /// locale (Sprache)
        /// </summary>
        /// <value>locale (Sprache)</value>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OfferForm {\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  CustomerContactId: ").Append(CustomerContactId).Append("\n");
            sb.Append("  CustomerContactName: ").Append(CustomerContactName).Append("\n");
            sb.Append("  CustomerContactCustomerNumber: ").Append(CustomerContactCustomerNumber).Append("\n");
            sb.Append("  CustomerPersonalAccountId: ").Append(CustomerPersonalAccountId).Append("\n");
            sb.Append("  CustomerPersonalAccountNumber: ").Append(CustomerPersonalAccountNumber).Append("\n");
            sb.Append("  CustomerPersonalAccountName: ").Append(CustomerPersonalAccountName).Append("\n");
            sb.Append("  CustomerPersonalAccountExternalNumber: ").Append(CustomerPersonalAccountExternalNumber).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  CustomerNameExtra: ").Append(CustomerNameExtra).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  CustomerContactPerson: ").Append(CustomerContactPerson).Append("\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  DocumentNumber: ").Append(DocumentNumber).Append("\n");
            sb.Append("  OurContactPerson: ").Append(OurContactPerson).Append("\n");
            sb.Append("  DeliveryType: ").Append(DeliveryType).Append("\n");
            sb.Append("  DeliveryCosts: ").Append(DeliveryCosts).Append("\n");
            sb.Append("  CashOnDelivery: ").Append(CashOnDelivery).Append("\n");
            sb.Append("  TextTitle: ").Append(TextTitle).Append("\n");
            sb.Append("  TextSubTitle: ").Append(TextSubTitle).Append("\n");
            sb.Append("  TextIntro: ").Append(TextIntro).Append("\n");
            sb.Append("  TextExtro: ").Append(TextExtro).Append("\n");
            sb.Append("  SelectedAddress: ").Append(SelectedAddress).Append("\n");
            sb.Append("  OtherAddress: ").Append(OtherAddress).Append("\n");
            sb.Append("  Gross: ").Append(Gross).Append("\n");
            sb.Append("  PermissionType: ").Append(PermissionType).Append("\n");
            sb.Append("  ReadPermissionProfiles: ").Append(ReadPermissionProfiles).Append("\n");
            sb.Append("  ReadPermissionLogins: ").Append(ReadPermissionLogins).Append("\n");
            sb.Append("  WritePermissionProfiles: ").Append(WritePermissionProfiles).Append("\n");
            sb.Append("  WritePermissionLogins: ").Append(WritePermissionLogins).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  PositionsForm: ").Append(PositionsForm).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  DeliveryDateTo: ").Append(DeliveryDateTo).Append("\n");
            sb.Append("  IsEndDiscountAbsolute: ").Append(IsEndDiscountAbsolute).Append("\n");
            sb.Append("  EndDiscount: ").Append(EndDiscount).Append("\n");
            sb.Append("  PaymentTypeName: ").Append(PaymentTypeName).Append("\n");
            sb.Append("  IsPaid: ").Append(IsPaid).Append("\n");
            sb.Append("  DiscountDate1: ").Append(DiscountDate1).Append("\n");
            sb.Append("  DiscountDate2: ").Append(DiscountDate2).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  DiscountPercent1: ").Append(DiscountPercent1).Append("\n");
            sb.Append("  DiscountPercent2: ").Append(DiscountPercent2).Append("\n");
            sb.Append("  ExplicitDiscount: ").Append(ExplicitDiscount).Append("\n");
            sb.Append("  DiscountAmount1: ").Append(DiscountAmount1).Append("\n");
            sb.Append("  DiscountAmount2: ").Append(DiscountAmount2).Append("\n");
            sb.Append("  SalesPhase: ").Append(SalesPhase).Append("\n");
            sb.Append("  SalesClassification: ").Append(SalesClassification).Append("\n");
            sb.Append("  SalesActivity: ").Append(SalesActivity).Append("\n");
            sb.Append("  Phase: ").Append(Phase).Append("\n");
            sb.Append("  Feasibility: ").Append(Feasibility).Append("\n");
            sb.Append("  ClosingDateTs: ").Append(ClosingDateTs).Append("\n");
            sb.Append("  ReminderDateTs: ").Append(ReminderDateTs).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  ZoneNumber: ").Append(ZoneNumber).Append("\n");
            sb.Append("  StateName: ").Append(StateName).Append("\n");
            sb.Append("  ValutaDate: ").Append(ValutaDate).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OfferForm);
        }

        /// <summary>
        /// Returns true if OfferForm instances are equal
        /// </summary>
        /// <param name="input">Instance of OfferForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfferForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.CustomerContactId == input.CustomerContactId ||
                    (this.CustomerContactId != null &&
                    this.CustomerContactId.Equals(input.CustomerContactId))
                ) && 
                (
                    this.CustomerContactName == input.CustomerContactName ||
                    (this.CustomerContactName != null &&
                    this.CustomerContactName.Equals(input.CustomerContactName))
                ) && 
                (
                    this.CustomerContactCustomerNumber == input.CustomerContactCustomerNumber ||
                    (this.CustomerContactCustomerNumber != null &&
                    this.CustomerContactCustomerNumber.Equals(input.CustomerContactCustomerNumber))
                ) && 
                (
                    this.CustomerPersonalAccountId == input.CustomerPersonalAccountId ||
                    (this.CustomerPersonalAccountId != null &&
                    this.CustomerPersonalAccountId.Equals(input.CustomerPersonalAccountId))
                ) && 
                (
                    this.CustomerPersonalAccountNumber == input.CustomerPersonalAccountNumber ||
                    (this.CustomerPersonalAccountNumber != null &&
                    this.CustomerPersonalAccountNumber.Equals(input.CustomerPersonalAccountNumber))
                ) && 
                (
                    this.CustomerPersonalAccountName == input.CustomerPersonalAccountName ||
                    (this.CustomerPersonalAccountName != null &&
                    this.CustomerPersonalAccountName.Equals(input.CustomerPersonalAccountName))
                ) && 
                (
                    this.CustomerPersonalAccountExternalNumber == input.CustomerPersonalAccountExternalNumber ||
                    (this.CustomerPersonalAccountExternalNumber != null &&
                    this.CustomerPersonalAccountExternalNumber.Equals(input.CustomerPersonalAccountExternalNumber))
                ) && 
                (
                    this.CustomerName == input.CustomerName ||
                    (this.CustomerName != null &&
                    this.CustomerName.Equals(input.CustomerName))
                ) && 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    (this.CustomerNumber != null &&
                    this.CustomerNumber.Equals(input.CustomerNumber))
                ) && 
                (
                    this.CustomerNameExtra == input.CustomerNameExtra ||
                    (this.CustomerNameExtra != null &&
                    this.CustomerNameExtra.Equals(input.CustomerNameExtra))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.CustomerContactPerson == input.CustomerContactPerson ||
                    (this.CustomerContactPerson != null &&
                    this.CustomerContactPerson.Equals(input.CustomerContactPerson))
                ) && 
                (
                    this.DocumentDate == input.DocumentDate ||
                    (this.DocumentDate != null &&
                    this.DocumentDate.Equals(input.DocumentDate))
                ) && 
                (
                    this.DocumentNumber == input.DocumentNumber ||
                    (this.DocumentNumber != null &&
                    this.DocumentNumber.Equals(input.DocumentNumber))
                ) && 
                (
                    this.OurContactPerson == input.OurContactPerson ||
                    (this.OurContactPerson != null &&
                    this.OurContactPerson.Equals(input.OurContactPerson))
                ) && 
                (
                    this.DeliveryType == input.DeliveryType ||
                    (this.DeliveryType != null &&
                    this.DeliveryType.Equals(input.DeliveryType))
                ) && 
                (
                    this.DeliveryCosts == input.DeliveryCosts ||
                    (this.DeliveryCosts != null &&
                    this.DeliveryCosts.Equals(input.DeliveryCosts))
                ) && 
                (
                    this.CashOnDelivery == input.CashOnDelivery ||
                    (this.CashOnDelivery != null &&
                    this.CashOnDelivery.Equals(input.CashOnDelivery))
                ) && 
                (
                    this.TextTitle == input.TextTitle ||
                    (this.TextTitle != null &&
                    this.TextTitle.Equals(input.TextTitle))
                ) && 
                (
                    this.TextSubTitle == input.TextSubTitle ||
                    (this.TextSubTitle != null &&
                    this.TextSubTitle.Equals(input.TextSubTitle))
                ) && 
                (
                    this.TextIntro == input.TextIntro ||
                    (this.TextIntro != null &&
                    this.TextIntro.Equals(input.TextIntro))
                ) && 
                (
                    this.TextExtro == input.TextExtro ||
                    (this.TextExtro != null &&
                    this.TextExtro.Equals(input.TextExtro))
                ) && 
                (
                    this.SelectedAddress == input.SelectedAddress ||
                    (this.SelectedAddress != null &&
                    this.SelectedAddress.Equals(input.SelectedAddress))
                ) && 
                (
                    this.OtherAddress == input.OtherAddress ||
                    (this.OtherAddress != null &&
                    this.OtherAddress.Equals(input.OtherAddress))
                ) && 
                (
                    this.Gross == input.Gross ||
                    (this.Gross != null &&
                    this.Gross.Equals(input.Gross))
                ) && 
                (
                    this.PermissionType == input.PermissionType ||
                    (this.PermissionType != null &&
                    this.PermissionType.Equals(input.PermissionType))
                ) && 
                (
                    this.ReadPermissionProfiles == input.ReadPermissionProfiles ||
                    (this.ReadPermissionProfiles != null &&
                    this.ReadPermissionProfiles.Equals(input.ReadPermissionProfiles))
                ) && 
                (
                    this.ReadPermissionLogins == input.ReadPermissionLogins ||
                    (this.ReadPermissionLogins != null &&
                    this.ReadPermissionLogins.Equals(input.ReadPermissionLogins))
                ) && 
                (
                    this.WritePermissionProfiles == input.WritePermissionProfiles ||
                    (this.WritePermissionProfiles != null &&
                    this.WritePermissionProfiles.Equals(input.WritePermissionProfiles))
                ) && 
                (
                    this.WritePermissionLogins == input.WritePermissionLogins ||
                    (this.WritePermissionLogins != null &&
                    this.WritePermissionLogins.Equals(input.WritePermissionLogins))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) && 
                (
                    this.PositionsForm == input.PositionsForm ||
                    (this.PositionsForm != null &&
                    this.PositionsForm.Equals(input.PositionsForm))
                ) && 
                (
                    this.DeliveryDate == input.DeliveryDate ||
                    (this.DeliveryDate != null &&
                    this.DeliveryDate.Equals(input.DeliveryDate))
                ) && 
                (
                    this.DeliveryDateTo == input.DeliveryDateTo ||
                    (this.DeliveryDateTo != null &&
                    this.DeliveryDateTo.Equals(input.DeliveryDateTo))
                ) && 
                (
                    this.IsEndDiscountAbsolute == input.IsEndDiscountAbsolute ||
                    (this.IsEndDiscountAbsolute != null &&
                    this.IsEndDiscountAbsolute.Equals(input.IsEndDiscountAbsolute))
                ) && 
                (
                    this.EndDiscount == input.EndDiscount ||
                    (this.EndDiscount != null &&
                    this.EndDiscount.Equals(input.EndDiscount))
                ) && 
                (
                    this.PaymentTypeName == input.PaymentTypeName ||
                    (this.PaymentTypeName != null &&
                    this.PaymentTypeName.Equals(input.PaymentTypeName))
                ) && 
                (
                    this.IsPaid == input.IsPaid ||
                    (this.IsPaid != null &&
                    this.IsPaid.Equals(input.IsPaid))
                ) && 
                (
                    this.DiscountDate1 == input.DiscountDate1 ||
                    (this.DiscountDate1 != null &&
                    this.DiscountDate1.Equals(input.DiscountDate1))
                ) && 
                (
                    this.DiscountDate2 == input.DiscountDate2 ||
                    (this.DiscountDate2 != null &&
                    this.DiscountDate2.Equals(input.DiscountDate2))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.DiscountPercent1 == input.DiscountPercent1 ||
                    (this.DiscountPercent1 != null &&
                    this.DiscountPercent1.Equals(input.DiscountPercent1))
                ) && 
                (
                    this.DiscountPercent2 == input.DiscountPercent2 ||
                    (this.DiscountPercent2 != null &&
                    this.DiscountPercent2.Equals(input.DiscountPercent2))
                ) && 
                (
                    this.ExplicitDiscount == input.ExplicitDiscount ||
                    (this.ExplicitDiscount != null &&
                    this.ExplicitDiscount.Equals(input.ExplicitDiscount))
                ) && 
                (
                    this.DiscountAmount1 == input.DiscountAmount1 ||
                    (this.DiscountAmount1 != null &&
                    this.DiscountAmount1.Equals(input.DiscountAmount1))
                ) && 
                (
                    this.DiscountAmount2 == input.DiscountAmount2 ||
                    (this.DiscountAmount2 != null &&
                    this.DiscountAmount2.Equals(input.DiscountAmount2))
                ) && 
                (
                    this.SalesPhase == input.SalesPhase ||
                    (this.SalesPhase != null &&
                    this.SalesPhase.Equals(input.SalesPhase))
                ) && 
                (
                    this.SalesClassification == input.SalesClassification ||
                    (this.SalesClassification != null &&
                    this.SalesClassification.Equals(input.SalesClassification))
                ) && 
                (
                    this.SalesActivity == input.SalesActivity ||
                    (this.SalesActivity != null &&
                    this.SalesActivity.Equals(input.SalesActivity))
                ) && 
                (
                    this.Phase == input.Phase ||
                    (this.Phase != null &&
                    this.Phase.Equals(input.Phase))
                ) && 
                (
                    this.Feasibility == input.Feasibility ||
                    (this.Feasibility != null &&
                    this.Feasibility.Equals(input.Feasibility))
                ) && 
                (
                    this.ClosingDateTs == input.ClosingDateTs ||
                    (this.ClosingDateTs != null &&
                    this.ClosingDateTs.Equals(input.ClosingDateTs))
                ) && 
                (
                    this.ReminderDateTs == input.ReminderDateTs ||
                    (this.ReminderDateTs != null &&
                    this.ReminderDateTs.Equals(input.ReminderDateTs))
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    (this.OrderNumber != null &&
                    this.OrderNumber.Equals(input.OrderNumber))
                ) && 
                (
                    this.ZoneNumber == input.ZoneNumber ||
                    (this.ZoneNumber != null &&
                    this.ZoneNumber.Equals(input.ZoneNumber))
                ) && 
                (
                    this.StateName == input.StateName ||
                    (this.StateName != null &&
                    this.StateName.Equals(input.StateName))
                ) && 
                (
                    this.ValutaDate == input.ValutaDate ||
                    (this.ValutaDate != null &&
                    this.ValutaDate.Equals(input.ValutaDate))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.CustomerContactId != null)
                    hashCode = hashCode * 59 + this.CustomerContactId.GetHashCode();
                if (this.CustomerContactName != null)
                    hashCode = hashCode * 59 + this.CustomerContactName.GetHashCode();
                if (this.CustomerContactCustomerNumber != null)
                    hashCode = hashCode * 59 + this.CustomerContactCustomerNumber.GetHashCode();
                if (this.CustomerPersonalAccountId != null)
                    hashCode = hashCode * 59 + this.CustomerPersonalAccountId.GetHashCode();
                if (this.CustomerPersonalAccountNumber != null)
                    hashCode = hashCode * 59 + this.CustomerPersonalAccountNumber.GetHashCode();
                if (this.CustomerPersonalAccountName != null)
                    hashCode = hashCode * 59 + this.CustomerPersonalAccountName.GetHashCode();
                if (this.CustomerPersonalAccountExternalNumber != null)
                    hashCode = hashCode * 59 + this.CustomerPersonalAccountExternalNumber.GetHashCode();
                if (this.CustomerName != null)
                    hashCode = hashCode * 59 + this.CustomerName.GetHashCode();
                if (this.CustomerNumber != null)
                    hashCode = hashCode * 59 + this.CustomerNumber.GetHashCode();
                if (this.CustomerNameExtra != null)
                    hashCode = hashCode * 59 + this.CustomerNameExtra.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.CustomerContactPerson != null)
                    hashCode = hashCode * 59 + this.CustomerContactPerson.GetHashCode();
                if (this.DocumentDate != null)
                    hashCode = hashCode * 59 + this.DocumentDate.GetHashCode();
                if (this.DocumentNumber != null)
                    hashCode = hashCode * 59 + this.DocumentNumber.GetHashCode();
                if (this.OurContactPerson != null)
                    hashCode = hashCode * 59 + this.OurContactPerson.GetHashCode();
                if (this.DeliveryType != null)
                    hashCode = hashCode * 59 + this.DeliveryType.GetHashCode();
                if (this.DeliveryCosts != null)
                    hashCode = hashCode * 59 + this.DeliveryCosts.GetHashCode();
                if (this.CashOnDelivery != null)
                    hashCode = hashCode * 59 + this.CashOnDelivery.GetHashCode();
                if (this.TextTitle != null)
                    hashCode = hashCode * 59 + this.TextTitle.GetHashCode();
                if (this.TextSubTitle != null)
                    hashCode = hashCode * 59 + this.TextSubTitle.GetHashCode();
                if (this.TextIntro != null)
                    hashCode = hashCode * 59 + this.TextIntro.GetHashCode();
                if (this.TextExtro != null)
                    hashCode = hashCode * 59 + this.TextExtro.GetHashCode();
                if (this.SelectedAddress != null)
                    hashCode = hashCode * 59 + this.SelectedAddress.GetHashCode();
                if (this.OtherAddress != null)
                    hashCode = hashCode * 59 + this.OtherAddress.GetHashCode();
                if (this.Gross != null)
                    hashCode = hashCode * 59 + this.Gross.GetHashCode();
                if (this.PermissionType != null)
                    hashCode = hashCode * 59 + this.PermissionType.GetHashCode();
                if (this.ReadPermissionProfiles != null)
                    hashCode = hashCode * 59 + this.ReadPermissionProfiles.GetHashCode();
                if (this.ReadPermissionLogins != null)
                    hashCode = hashCode * 59 + this.ReadPermissionLogins.GetHashCode();
                if (this.WritePermissionProfiles != null)
                    hashCode = hashCode * 59 + this.WritePermissionProfiles.GetHashCode();
                if (this.WritePermissionLogins != null)
                    hashCode = hashCode * 59 + this.WritePermissionLogins.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                if (this.PositionsForm != null)
                    hashCode = hashCode * 59 + this.PositionsForm.GetHashCode();
                if (this.DeliveryDate != null)
                    hashCode = hashCode * 59 + this.DeliveryDate.GetHashCode();
                if (this.DeliveryDateTo != null)
                    hashCode = hashCode * 59 + this.DeliveryDateTo.GetHashCode();
                if (this.IsEndDiscountAbsolute != null)
                    hashCode = hashCode * 59 + this.IsEndDiscountAbsolute.GetHashCode();
                if (this.EndDiscount != null)
                    hashCode = hashCode * 59 + this.EndDiscount.GetHashCode();
                if (this.PaymentTypeName != null)
                    hashCode = hashCode * 59 + this.PaymentTypeName.GetHashCode();
                if (this.IsPaid != null)
                    hashCode = hashCode * 59 + this.IsPaid.GetHashCode();
                if (this.DiscountDate1 != null)
                    hashCode = hashCode * 59 + this.DiscountDate1.GetHashCode();
                if (this.DiscountDate2 != null)
                    hashCode = hashCode * 59 + this.DiscountDate2.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.DiscountPercent1 != null)
                    hashCode = hashCode * 59 + this.DiscountPercent1.GetHashCode();
                if (this.DiscountPercent2 != null)
                    hashCode = hashCode * 59 + this.DiscountPercent2.GetHashCode();
                if (this.ExplicitDiscount != null)
                    hashCode = hashCode * 59 + this.ExplicitDiscount.GetHashCode();
                if (this.DiscountAmount1 != null)
                    hashCode = hashCode * 59 + this.DiscountAmount1.GetHashCode();
                if (this.DiscountAmount2 != null)
                    hashCode = hashCode * 59 + this.DiscountAmount2.GetHashCode();
                if (this.SalesPhase != null)
                    hashCode = hashCode * 59 + this.SalesPhase.GetHashCode();
                if (this.SalesClassification != null)
                    hashCode = hashCode * 59 + this.SalesClassification.GetHashCode();
                if (this.SalesActivity != null)
                    hashCode = hashCode * 59 + this.SalesActivity.GetHashCode();
                if (this.Phase != null)
                    hashCode = hashCode * 59 + this.Phase.GetHashCode();
                if (this.Feasibility != null)
                    hashCode = hashCode * 59 + this.Feasibility.GetHashCode();
                if (this.ClosingDateTs != null)
                    hashCode = hashCode * 59 + this.ClosingDateTs.GetHashCode();
                if (this.ReminderDateTs != null)
                    hashCode = hashCode * 59 + this.ReminderDateTs.GetHashCode();
                if (this.OrderNumber != null)
                    hashCode = hashCode * 59 + this.OrderNumber.GetHashCode();
                if (this.ZoneNumber != null)
                    hashCode = hashCode * 59 + this.ZoneNumber.GetHashCode();
                if (this.StateName != null)
                    hashCode = hashCode * 59 + this.StateName.GetHashCode();
                if (this.ValutaDate != null)
                    hashCode = hashCode * 59 + this.ValutaDate.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
