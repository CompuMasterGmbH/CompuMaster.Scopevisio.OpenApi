/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CompuMaster.Scopevisio.OpenApi.Client;
using CompuMaster.Scopevisio.OpenApi.Model;

namespace CompuMaster.Scopevisio.OpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectApi 
    {
        private CompuMaster.Scopevisio.OpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectApi(String basePath)
        {
            this.Configuration = new CompuMaster.Scopevisio.OpenApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CompuMaster.Scopevisio.OpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProjectApi()
        {
            this.Configuration = CompuMaster.Scopevisio.OpenApi.Client.Configuration.Default;

            ExceptionFactory = CompuMaster.Scopevisio.OpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProjectApi(CompuMaster.Scopevisio.OpenApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CompuMaster.Scopevisio.OpenApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CompuMaster.Scopevisio.OpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        internal void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CompuMaster.Scopevisio.OpenApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CompuMaster.Scopevisio.OpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        internal IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        internal void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a file to a Scopevisio project Adds a file to a Scopevisio project.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId (MID) of a Scopevisio project.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void AddProjectFile (long projectId, TeamworkFileForm body = default(TeamworkFileForm))
        {
             AddProjectFileWithHttpInfo(projectId, body);
        }

        /// <summary>
        /// Add a file to a Scopevisio project Adds a file to a Scopevisio project.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId (MID) of a Scopevisio project.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddProjectFileWithHttpInfo (long projectId, TeamworkFileForm body = default(TeamworkFileForm))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->AddProjectFile");

            var localVarPath = "/project/{projectId}/file/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProjectFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add a file to a Scopevisio project Adds a file to a Scopevisio project.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId (MID) of a Scopevisio project.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddProjectFileAsync (long projectId, TeamworkFileForm body = default(TeamworkFileForm))
        {
             await AddProjectFileAsyncWithHttpInfo(projectId, body);

        }

        /// <summary>
        /// Add a file to a Scopevisio project Adds a file to a Scopevisio project.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId (MID) of a Scopevisio project.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddProjectFileAsyncWithHttpInfo (long projectId, TeamworkFileForm body = default(TeamworkFileForm))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->AddProjectFile");

            var localVarPath = "/project/{projectId}/file/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProjectFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Assign mail to a project. Assigns the mail with the given mailId to the project with the given projectId.  Required profile(s): &lt;i&gt;Projekte, Mailbot, Mailagent (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="body">content in JSON format</param>
        /// <returns></returns>
        public void AssignMailProject (long projectId, AssignMailForm body)
        {
             AssignMailProjectWithHttpInfo(projectId, body);
        }

        /// <summary>
        /// Assign mail to a project. Assigns the mail with the given mailId to the project with the given projectId.  Required profile(s): &lt;i&gt;Projekte, Mailbot, Mailagent (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="body">content in JSON format</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssignMailProjectWithHttpInfo (long projectId, AssignMailForm body)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->AssignMailProject");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectApi->AssignMailProject");

            var localVarPath = "/project/{projectId}/assignMail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignMailProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Assign mail to a project. Assigns the mail with the given mailId to the project with the given projectId.  Required profile(s): &lt;i&gt;Projekte, Mailbot, Mailagent (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="body">content in JSON format</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssignMailProjectAsync (long projectId, AssignMailForm body)
        {
             await AssignMailProjectAsyncWithHttpInfo(projectId, body);

        }

        /// <summary>
        /// Assign mail to a project. Assigns the mail with the given mailId to the project with the given projectId.  Required profile(s): &lt;i&gt;Projekte, Mailbot, Mailagent (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="body">content in JSON format</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssignMailProjectAsyncWithHttpInfo (long projectId, AssignMailForm body)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->AssignMailProject");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectApi->AssignMailProject");

            var localVarPath = "/project/{projectId}/assignMail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignMailProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Import an incoming email.  Required profiles: &lt;i&gt;Mailbot, Mailagent (Bearbeiten)&lt;/i&gt;. The service tries to assign the imported mail to the sender and receiver contacts if found and if they are not the current user or a vaild sender (see Scopevisio client, Systemadministration -&gt; Persönliche E-Mail-Adresse verwalten -&gt; Absender 1-5).The email should be provided as eml content.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateIncomingMail (IncomingMailForm body = default(IncomingMailForm))
        {
             CreateIncomingMailWithHttpInfo(body);
        }

        /// <summary>
        /// Import an incoming email.  Required profiles: &lt;i&gt;Mailbot, Mailagent (Bearbeiten)&lt;/i&gt;. The service tries to assign the imported mail to the sender and receiver contacts if found and if they are not the current user or a vaild sender (see Scopevisio client, Systemadministration -&gt; Persönliche E-Mail-Adresse verwalten -&gt; Absender 1-5).The email should be provided as eml content.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateIncomingMailWithHttpInfo (IncomingMailForm body = default(IncomingMailForm))
        {

            var localVarPath = "/incomingmail/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIncomingMail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Import an incoming email.  Required profiles: &lt;i&gt;Mailbot, Mailagent (Bearbeiten)&lt;/i&gt;. The service tries to assign the imported mail to the sender and receiver contacts if found and if they are not the current user or a vaild sender (see Scopevisio client, Systemadministration -&gt; Persönliche E-Mail-Adresse verwalten -&gt; Absender 1-5).The email should be provided as eml content.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateIncomingMailAsync (IncomingMailForm body = default(IncomingMailForm))
        {
             await CreateIncomingMailAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Import an incoming email.  Required profiles: &lt;i&gt;Mailbot, Mailagent (Bearbeiten)&lt;/i&gt;. The service tries to assign the imported mail to the sender and receiver contacts if found and if they are not the current user or a vaild sender (see Scopevisio client, Systemadministration -&gt; Persönliche E-Mail-Adresse verwalten -&gt; Absender 1-5).The email should be provided as eml content.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateIncomingMailAsyncWithHttpInfo (IncomingMailForm body = default(IncomingMailForm))
        {

            var localVarPath = "/incomingmail/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIncomingMail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// create a new project Creates a new Project Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateProject (ProjectForm body = default(ProjectForm))
        {
             CreateProjectWithHttpInfo(body);
        }

        /// <summary>
        /// create a new project Creates a new Project Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateProjectWithHttpInfo (ProjectForm body = default(ProjectForm))
        {

            var localVarPath = "/project/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// create a new project Creates a new Project Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateProjectAsync (ProjectForm body = default(ProjectForm))
        {
             await CreateProjectAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// create a new project Creates a new Project Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateProjectAsyncWithHttpInfo (ProjectForm body = default(ProjectForm))
        {

            var localVarPath = "/project/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new comment. Creates a new comment. Required profile(s): &lt;i&gt;Projekte, Pinnwand (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId of a Scopevisio project</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateProjectComment (long projectId, BlogEntryForm body = default(BlogEntryForm))
        {
             CreateProjectCommentWithHttpInfo(projectId, body);
        }

        /// <summary>
        /// Create a new comment. Creates a new comment. Required profile(s): &lt;i&gt;Projekte, Pinnwand (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId of a Scopevisio project</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateProjectCommentWithHttpInfo (long projectId, BlogEntryForm body = default(BlogEntryForm))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->CreateProjectComment");

            var localVarPath = "/project/{projectId}/comment/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProjectComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new comment. Creates a new comment. Required profile(s): &lt;i&gt;Projekte, Pinnwand (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId of a Scopevisio project</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateProjectCommentAsync (long projectId, BlogEntryForm body = default(BlogEntryForm))
        {
             await CreateProjectCommentAsyncWithHttpInfo(projectId, body);

        }

        /// <summary>
        /// Create a new comment. Creates a new comment. Required profile(s): &lt;i&gt;Projekte, Pinnwand (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId of a Scopevisio project</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateProjectCommentAsyncWithHttpInfo (long projectId, BlogEntryForm body = default(BlogEntryForm))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->CreateProjectComment");

            var localVarPath = "/project/{projectId}/comment/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProjectComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a project employee (Projektteam-Eintrag) Creates a new project employee (Projektteam-Eintrag) for a Scopevisio project.  Required profile(s): &lt;i&gt;Kontakte, Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="body">content in JSON format</param>
        /// <returns></returns>
        public void CreateProjectEmployee (long projectId, ProjectEmployeeForm body)
        {
             CreateProjectEmployeeWithHttpInfo(projectId, body);
        }

        /// <summary>
        /// Create a project employee (Projektteam-Eintrag) Creates a new project employee (Projektteam-Eintrag) for a Scopevisio project.  Required profile(s): &lt;i&gt;Kontakte, Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="body">content in JSON format</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateProjectEmployeeWithHttpInfo (long projectId, ProjectEmployeeForm body)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->CreateProjectEmployee");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectApi->CreateProjectEmployee");

            var localVarPath = "/project/{projectId}/projectemployee/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProjectEmployee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a project employee (Projektteam-Eintrag) Creates a new project employee (Projektteam-Eintrag) for a Scopevisio project.  Required profile(s): &lt;i&gt;Kontakte, Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="body">content in JSON format</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateProjectEmployeeAsync (long projectId, ProjectEmployeeForm body)
        {
             await CreateProjectEmployeeAsyncWithHttpInfo(projectId, body);

        }

        /// <summary>
        /// Create a project employee (Projektteam-Eintrag) Creates a new project employee (Projektteam-Eintrag) for a Scopevisio project.  Required profile(s): &lt;i&gt;Kontakte, Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="body">content in JSON format</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateProjectEmployeeAsyncWithHttpInfo (long projectId, ProjectEmployeeForm body)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->CreateProjectEmployee");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectApi->CreateProjectEmployee");

            var localVarPath = "/project/{projectId}/projectemployee/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProjectEmployee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new sales project (Vertriebsprojekt) Creates a new sales project (Vertriebsprojekt). The created project has \&quot;sphereLead\&quot; set. It is not possible to convert a  Lead (project with \&quot;sphereLead\&quot; set) to Interessent (\&quot;sphereInterested\&quot; set) via webservice. The conversion must be done via the Scopevisio client. To retrieve a sales project use the endpoint project/{id}.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateSalesProject (SalesProjectForm body = default(SalesProjectForm))
        {
             CreateSalesProjectWithHttpInfo(body);
        }

        /// <summary>
        /// Create a new sales project (Vertriebsprojekt) Creates a new sales project (Vertriebsprojekt). The created project has \&quot;sphereLead\&quot; set. It is not possible to convert a  Lead (project with \&quot;sphereLead\&quot; set) to Interessent (\&quot;sphereInterested\&quot; set) via webservice. The conversion must be done via the Scopevisio client. To retrieve a sales project use the endpoint project/{id}.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateSalesProjectWithHttpInfo (SalesProjectForm body = default(SalesProjectForm))
        {

            var localVarPath = "/salesproject/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSalesProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new sales project (Vertriebsprojekt) Creates a new sales project (Vertriebsprojekt). The created project has \&quot;sphereLead\&quot; set. It is not possible to convert a  Lead (project with \&quot;sphereLead\&quot; set) to Interessent (\&quot;sphereInterested\&quot; set) via webservice. The conversion must be done via the Scopevisio client. To retrieve a sales project use the endpoint project/{id}.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateSalesProjectAsync (SalesProjectForm body = default(SalesProjectForm))
        {
             await CreateSalesProjectAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create a new sales project (Vertriebsprojekt) Creates a new sales project (Vertriebsprojekt). The created project has \&quot;sphereLead\&quot; set. It is not possible to convert a  Lead (project with \&quot;sphereLead\&quot; set) to Interessent (\&quot;sphereInterested\&quot; set) via webservice. The conversion must be done via the Scopevisio client. To retrieve a sales project use the endpoint project/{id}.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateSalesProjectAsyncWithHttpInfo (SalesProjectForm body = default(SalesProjectForm))
        {

            var localVarPath = "/salesproject/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSalesProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new timeentry Creates a new timeentry. Required profile(s): &lt;i&gt;Projekte, Zeiterfassung (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateTimeEntry (TimeEntryForm body = default(TimeEntryForm))
        {
             CreateTimeEntryWithHttpInfo(body);
        }

        /// <summary>
        /// Create a new timeentry Creates a new timeentry. Required profile(s): &lt;i&gt;Projekte, Zeiterfassung (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateTimeEntryWithHttpInfo (TimeEntryForm body = default(TimeEntryForm))
        {

            var localVarPath = "/timeentry/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTimeEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new timeentry Creates a new timeentry. Required profile(s): &lt;i&gt;Projekte, Zeiterfassung (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateTimeEntryAsync (TimeEntryForm body = default(TimeEntryForm))
        {
             await CreateTimeEntryAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create a new timeentry Creates a new timeentry. Required profile(s): &lt;i&gt;Projekte, Zeiterfassung (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateTimeEntryAsyncWithHttpInfo (TimeEntryForm body = default(TimeEntryForm))
        {

            var localVarPath = "/timeentry/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTimeEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get all timeentries available Shows all available time entries.  Required profile(s): &lt;i&gt;Zeiterfassung (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Object</returns>
        public Object GetAllTimEntries (string body = default(string))
        {
             ApiResponse<Object> localVarResponse = GetAllTimEntriesWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all timeentries available Shows all available time entries.  Required profile(s): &lt;i&gt;Zeiterfassung (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetAllTimEntriesWithHttpInfo (string body = default(string))
        {

            var localVarPath = "/timeentries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTimEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get all timeentries available Shows all available time entries.  Required profile(s): &lt;i&gt;Zeiterfassung (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetAllTimEntriesAsync (string body = default(string))
        {
             ApiResponse<Object> localVarResponse = await GetAllTimEntriesAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all timeentries available Shows all available time entries.  Required profile(s): &lt;i&gt;Zeiterfassung (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAllTimEntriesAsyncWithHttpInfo (string body = default(string))
        {

            var localVarPath = "/timeentries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTimEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Comments by projectId. Returns the Scopevisio comments with the given projectId.  Required profile(s): &lt;i&gt;Projekte, Pinnwand (Anzeigen)&lt;/i&gt;
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Id of a Scopevisio project</param>
        /// <param name="fields">comma separated list of fields to show in response  id,blogId,body (optional)</param>
        /// <returns></returns>
        public void GetBlogEntriesByProjectId (long projectId, string fields = default(string))
        {
             GetBlogEntriesByProjectIdWithHttpInfo(projectId, fields);
        }

        /// <summary>
        /// Comments by projectId. Returns the Scopevisio comments with the given projectId.  Required profile(s): &lt;i&gt;Projekte, Pinnwand (Anzeigen)&lt;/i&gt;
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Id of a Scopevisio project</param>
        /// <param name="fields">comma separated list of fields to show in response  id,blogId,body (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetBlogEntriesByProjectIdWithHttpInfo (long projectId, string fields = default(string))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->GetBlogEntriesByProjectId");

            var localVarPath = "/project/{projectId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlogEntriesByProjectId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Comments by projectId. Returns the Scopevisio comments with the given projectId.  Required profile(s): &lt;i&gt;Projekte, Pinnwand (Anzeigen)&lt;/i&gt;
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Id of a Scopevisio project</param>
        /// <param name="fields">comma separated list of fields to show in response  id,blogId,body (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetBlogEntriesByProjectIdAsync (long projectId, string fields = default(string))
        {
             await GetBlogEntriesByProjectIdAsyncWithHttpInfo(projectId, fields);

        }

        /// <summary>
        /// Comments by projectId. Returns the Scopevisio comments with the given projectId.  Required profile(s): &lt;i&gt;Projekte, Pinnwand (Anzeigen)&lt;/i&gt;
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Id of a Scopevisio project</param>
        /// <param name="fields">comma separated list of fields to show in response  id,blogId,body (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetBlogEntriesByProjectIdAsyncWithHttpInfo (long projectId, string fields = default(string))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->GetBlogEntriesByProjectId");

            var localVarPath = "/project/{projectId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlogEntriesByProjectId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// project by id Returns the Scopevisio project with the given id.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="fields">comma separated list of fields to show in response  id,number,name (optional)</param>
        /// <returns></returns>
        public void GetProject (long id, string fields = default(string))
        {
             GetProjectWithHttpInfo(id, fields);
        }

        /// <summary>
        /// project by id Returns the Scopevisio project with the given id.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="fields">comma separated list of fields to show in response  id,number,name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetProjectWithHttpInfo (long id, string fields = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->GetProject");

            var localVarPath = "/project/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// project by id Returns the Scopevisio project with the given id.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="fields">comma separated list of fields to show in response  id,number,name (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetProjectAsync (long id, string fields = default(string))
        {
             await GetProjectAsyncWithHttpInfo(id, fields);

        }

        /// <summary>
        /// project by id Returns the Scopevisio project with the given id.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="fields">comma separated list of fields to show in response  id,number,name (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetProjectAsyncWithHttpInfo (long id, string fields = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->GetProject");

            var localVarPath = "/project/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get project employee (Projektteam-Eintrag) by id Returns project employee with the given employee id (not contact id).  Required profile(s): &lt;i&gt;Kontakte, Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Id of a Scopevisio project employee</param>
        /// <param name="projectId"></param>
        /// <param name="fields">Comma separated list of fields to show in response  id,type,subtype (optional)</param>
        /// <returns></returns>
        public void GetProjectEmployee (long employeeId, long projectId, string fields = default(string))
        {
             GetProjectEmployeeWithHttpInfo(employeeId, projectId, fields);
        }

        /// <summary>
        /// Get project employee (Projektteam-Eintrag) by id Returns project employee with the given employee id (not contact id).  Required profile(s): &lt;i&gt;Kontakte, Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Id of a Scopevisio project employee</param>
        /// <param name="projectId"></param>
        /// <param name="fields">Comma separated list of fields to show in response  id,type,subtype (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetProjectEmployeeWithHttpInfo (long employeeId, long projectId, string fields = default(string))
        {
            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new ApiException(400, "Missing required parameter 'employeeId' when calling ProjectApi->GetProjectEmployee");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->GetProjectEmployee");

            var localVarPath = "/project/{projectId}/projectemployee/{employeeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (employeeId != null) localVarPathParams.Add("employeeId", this.Configuration.ApiClient.ParameterToString(employeeId)); // path parameter
            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectEmployee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get project employee (Projektteam-Eintrag) by id Returns project employee with the given employee id (not contact id).  Required profile(s): &lt;i&gt;Kontakte, Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Id of a Scopevisio project employee</param>
        /// <param name="projectId"></param>
        /// <param name="fields">Comma separated list of fields to show in response  id,type,subtype (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetProjectEmployeeAsync (long employeeId, long projectId, string fields = default(string))
        {
             await GetProjectEmployeeAsyncWithHttpInfo(employeeId, projectId, fields);

        }

        /// <summary>
        /// Get project employee (Projektteam-Eintrag) by id Returns project employee with the given employee id (not contact id).  Required profile(s): &lt;i&gt;Kontakte, Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Id of a Scopevisio project employee</param>
        /// <param name="projectId"></param>
        /// <param name="fields">Comma separated list of fields to show in response  id,type,subtype (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetProjectEmployeeAsyncWithHttpInfo (long employeeId, long projectId, string fields = default(string))
        {
            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new ApiException(400, "Missing required parameter 'employeeId' when calling ProjectApi->GetProjectEmployee");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->GetProjectEmployee");

            var localVarPath = "/project/{projectId}/projectemployee/{employeeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (employeeId != null) localVarPathParams.Add("employeeId", this.Configuration.ApiClient.ParameterToString(employeeId)); // path parameter
            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectEmployee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// project employees (Projektteam) of a given project Returns the project employees (Projektteam) of a Scopevisio project with the given projectId.  Required profile(s): &lt;i&gt;Kontakte, Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">id of a Scopevisio project</param>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns></returns>
        public void GetProjectEmployees (long projectId, string body = default(string))
        {
             GetProjectEmployeesWithHttpInfo(projectId, body);
        }

        /// <summary>
        /// project employees (Projektteam) of a given project Returns the project employees (Projektteam) of a Scopevisio project with the given projectId.  Required profile(s): &lt;i&gt;Kontakte, Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">id of a Scopevisio project</param>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetProjectEmployeesWithHttpInfo (long projectId, string body = default(string))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->GetProjectEmployees");

            var localVarPath = "/project/{projectId}/projectemployees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectEmployees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// project employees (Projektteam) of a given project Returns the project employees (Projektteam) of a Scopevisio project with the given projectId.  Required profile(s): &lt;i&gt;Kontakte, Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">id of a Scopevisio project</param>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetProjectEmployeesAsync (long projectId, string body = default(string))
        {
             await GetProjectEmployeesAsyncWithHttpInfo(projectId, body);

        }

        /// <summary>
        /// project employees (Projektteam) of a given project Returns the project employees (Projektteam) of a Scopevisio project with the given projectId.  Required profile(s): &lt;i&gt;Kontakte, Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">id of a Scopevisio project</param>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetProjectEmployeesAsyncWithHttpInfo (long projectId, string body = default(string))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->GetProjectEmployees");

            var localVarPath = "/project/{projectId}/projectemployees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectEmployees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get project resources. Returns the project resources.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectStartFrom">After which date the project start date should be. It must be provided as an epoch timestamp in milliseconds.</param>
        /// <param name="projectStartTo">Before which date the project start date should be. It must be provided as an epoch timestamp in milliseconds.</param>
        /// <param name="searchSpecification">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;.  &lt;b&gt;Please consider: the fields \\\&quot;month\\\&quot;,\\\&quot;monthDays\\\&quot;,\\\&quot;workDays\\\&quot;, \\\&quot;availableMonthDays\\\&quot; are excluded from the search.&lt;/b&gt; (optional)</param>
        /// <returns>Object</returns>
        public Object GetProjectResources (long projectStartFrom, long projectStartTo, string searchSpecification = default(string))
        {
             ApiResponse<Object> localVarResponse = GetProjectResourcesWithHttpInfo(projectStartFrom, projectStartTo, searchSpecification);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get project resources. Returns the project resources.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectStartFrom">After which date the project start date should be. It must be provided as an epoch timestamp in milliseconds.</param>
        /// <param name="projectStartTo">Before which date the project start date should be. It must be provided as an epoch timestamp in milliseconds.</param>
        /// <param name="searchSpecification">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;.  &lt;b&gt;Please consider: the fields \\\&quot;month\\\&quot;,\\\&quot;monthDays\\\&quot;,\\\&quot;workDays\\\&quot;, \\\&quot;availableMonthDays\\\&quot; are excluded from the search.&lt;/b&gt; (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetProjectResourcesWithHttpInfo (long projectStartFrom, long projectStartTo, string searchSpecification = default(string))
        {
            // verify the required parameter 'projectStartFrom' is set
            if (projectStartFrom == null)
                throw new ApiException(400, "Missing required parameter 'projectStartFrom' when calling ProjectApi->GetProjectResources");
            // verify the required parameter 'projectStartTo' is set
            if (projectStartTo == null)
                throw new ApiException(400, "Missing required parameter 'projectStartTo' when calling ProjectApi->GetProjectResources");

            var localVarPath = "/projectresources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectStartFrom != null) localVarFormParams.Add("projectStartFrom", this.Configuration.ApiClient.ParameterToString(projectStartFrom)); // form parameter
            if (projectStartTo != null) localVarFormParams.Add("projectStartTo", this.Configuration.ApiClient.ParameterToString(projectStartTo)); // form parameter
            if (searchSpecification != null) localVarFormParams.Add("searchSpecification", this.Configuration.ApiClient.ParameterToString(searchSpecification)); // form parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get project resources. Returns the project resources.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectStartFrom">After which date the project start date should be. It must be provided as an epoch timestamp in milliseconds.</param>
        /// <param name="projectStartTo">Before which date the project start date should be. It must be provided as an epoch timestamp in milliseconds.</param>
        /// <param name="searchSpecification">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;.  &lt;b&gt;Please consider: the fields \\\&quot;month\\\&quot;,\\\&quot;monthDays\\\&quot;,\\\&quot;workDays\\\&quot;, \\\&quot;availableMonthDays\\\&quot; are excluded from the search.&lt;/b&gt; (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetProjectResourcesAsync (long projectStartFrom, long projectStartTo, string searchSpecification = default(string))
        {
             ApiResponse<Object> localVarResponse = await GetProjectResourcesAsyncWithHttpInfo(projectStartFrom, projectStartTo, searchSpecification);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get project resources. Returns the project resources.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectStartFrom">After which date the project start date should be. It must be provided as an epoch timestamp in milliseconds.</param>
        /// <param name="projectStartTo">Before which date the project start date should be. It must be provided as an epoch timestamp in milliseconds.</param>
        /// <param name="searchSpecification">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;.  &lt;b&gt;Please consider: the fields \\\&quot;month\\\&quot;,\\\&quot;monthDays\\\&quot;,\\\&quot;workDays\\\&quot;, \\\&quot;availableMonthDays\\\&quot; are excluded from the search.&lt;/b&gt; (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetProjectResourcesAsyncWithHttpInfo (long projectStartFrom, long projectStartTo, string searchSpecification = default(string))
        {
            // verify the required parameter 'projectStartFrom' is set
            if (projectStartFrom == null)
                throw new ApiException(400, "Missing required parameter 'projectStartFrom' when calling ProjectApi->GetProjectResources");
            // verify the required parameter 'projectStartTo' is set
            if (projectStartTo == null)
                throw new ApiException(400, "Missing required parameter 'projectStartTo' when calling ProjectApi->GetProjectResources");

            var localVarPath = "/projectresources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectStartFrom != null) localVarFormParams.Add("projectStartFrom", this.Configuration.ApiClient.ParameterToString(projectStartFrom)); // form parameter
            if (projectStartTo != null) localVarFormParams.Add("projectStartTo", this.Configuration.ApiClient.ParameterToString(projectStartTo)); // form parameter
            if (searchSpecification != null) localVarFormParams.Add("searchSpecification", this.Configuration.ApiClient.ParameterToString(searchSpecification)); // form parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get project revenue Get project revenue.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectStartFrom">After which date the project start date should be. It must be provided as an epoch timestamp in milliseconds.</param>
        /// <param name="projectStartTo">Before which date the project start date should be. It must be provided as an epoch timestamp in milliseconds.</param>
        /// <param name="revenueType">revenueType(Umsatzart), the wished revenue Type. (Umsatzart), 0 &#x3D; Planung, 1 &#x3D; Realisierung, 2 &#x3D; Abweichung, if not provided revenueType is set to \\\&quot;Planung\\\&quot; (optional)</param>
        /// <param name="searchSpecification">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. &lt;b&gt;Please consider: the fields \\\&quot;month\\\&quot;,\\\&quot;monthRevenue\\\&quot;,\\\&quot;id\\\&quot; are excluded from the search.&lt;/b&gt; (optional)</param>
        /// <returns>Object</returns>
        public Object GetProjectRevenue (long projectStartFrom, long projectStartTo, long? revenueType = default(long?), string searchSpecification = default(string))
        {
             ApiResponse<Object> localVarResponse = GetProjectRevenueWithHttpInfo(projectStartFrom, projectStartTo, revenueType, searchSpecification);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get project revenue Get project revenue.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectStartFrom">After which date the project start date should be. It must be provided as an epoch timestamp in milliseconds.</param>
        /// <param name="projectStartTo">Before which date the project start date should be. It must be provided as an epoch timestamp in milliseconds.</param>
        /// <param name="revenueType">revenueType(Umsatzart), the wished revenue Type. (Umsatzart), 0 &#x3D; Planung, 1 &#x3D; Realisierung, 2 &#x3D; Abweichung, if not provided revenueType is set to \\\&quot;Planung\\\&quot; (optional)</param>
        /// <param name="searchSpecification">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. &lt;b&gt;Please consider: the fields \\\&quot;month\\\&quot;,\\\&quot;monthRevenue\\\&quot;,\\\&quot;id\\\&quot; are excluded from the search.&lt;/b&gt; (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetProjectRevenueWithHttpInfo (long projectStartFrom, long projectStartTo, long? revenueType = default(long?), string searchSpecification = default(string))
        {
            // verify the required parameter 'projectStartFrom' is set
            if (projectStartFrom == null)
                throw new ApiException(400, "Missing required parameter 'projectStartFrom' when calling ProjectApi->GetProjectRevenue");
            // verify the required parameter 'projectStartTo' is set
            if (projectStartTo == null)
                throw new ApiException(400, "Missing required parameter 'projectStartTo' when calling ProjectApi->GetProjectRevenue");

            var localVarPath = "/projectrevenue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectStartFrom != null) localVarFormParams.Add("projectStartFrom", this.Configuration.ApiClient.ParameterToString(projectStartFrom)); // form parameter
            if (projectStartTo != null) localVarFormParams.Add("projectStartTo", this.Configuration.ApiClient.ParameterToString(projectStartTo)); // form parameter
            if (revenueType != null) localVarFormParams.Add("revenueType", this.Configuration.ApiClient.ParameterToString(revenueType)); // form parameter
            if (searchSpecification != null) localVarFormParams.Add("searchSpecification", this.Configuration.ApiClient.ParameterToString(searchSpecification)); // form parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectRevenue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get project revenue Get project revenue.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectStartFrom">After which date the project start date should be. It must be provided as an epoch timestamp in milliseconds.</param>
        /// <param name="projectStartTo">Before which date the project start date should be. It must be provided as an epoch timestamp in milliseconds.</param>
        /// <param name="revenueType">revenueType(Umsatzart), the wished revenue Type. (Umsatzart), 0 &#x3D; Planung, 1 &#x3D; Realisierung, 2 &#x3D; Abweichung, if not provided revenueType is set to \\\&quot;Planung\\\&quot; (optional)</param>
        /// <param name="searchSpecification">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. &lt;b&gt;Please consider: the fields \\\&quot;month\\\&quot;,\\\&quot;monthRevenue\\\&quot;,\\\&quot;id\\\&quot; are excluded from the search.&lt;/b&gt; (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetProjectRevenueAsync (long projectStartFrom, long projectStartTo, long? revenueType = default(long?), string searchSpecification = default(string))
        {
             ApiResponse<Object> localVarResponse = await GetProjectRevenueAsyncWithHttpInfo(projectStartFrom, projectStartTo, revenueType, searchSpecification);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get project revenue Get project revenue.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectStartFrom">After which date the project start date should be. It must be provided as an epoch timestamp in milliseconds.</param>
        /// <param name="projectStartTo">Before which date the project start date should be. It must be provided as an epoch timestamp in milliseconds.</param>
        /// <param name="revenueType">revenueType(Umsatzart), the wished revenue Type. (Umsatzart), 0 &#x3D; Planung, 1 &#x3D; Realisierung, 2 &#x3D; Abweichung, if not provided revenueType is set to \\\&quot;Planung\\\&quot; (optional)</param>
        /// <param name="searchSpecification">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. &lt;b&gt;Please consider: the fields \\\&quot;month\\\&quot;,\\\&quot;monthRevenue\\\&quot;,\\\&quot;id\\\&quot; are excluded from the search.&lt;/b&gt; (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetProjectRevenueAsyncWithHttpInfo (long projectStartFrom, long projectStartTo, long? revenueType = default(long?), string searchSpecification = default(string))
        {
            // verify the required parameter 'projectStartFrom' is set
            if (projectStartFrom == null)
                throw new ApiException(400, "Missing required parameter 'projectStartFrom' when calling ProjectApi->GetProjectRevenue");
            // verify the required parameter 'projectStartTo' is set
            if (projectStartTo == null)
                throw new ApiException(400, "Missing required parameter 'projectStartTo' when calling ProjectApi->GetProjectRevenue");

            var localVarPath = "/projectrevenue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectStartFrom != null) localVarFormParams.Add("projectStartFrom", this.Configuration.ApiClient.ParameterToString(projectStartFrom)); // form parameter
            if (projectStartTo != null) localVarFormParams.Add("projectStartTo", this.Configuration.ApiClient.ParameterToString(projectStartTo)); // form parameter
            if (revenueType != null) localVarFormParams.Add("revenueType", this.Configuration.ApiClient.ParameterToString(revenueType)); // form parameter
            if (searchSpecification != null) localVarFormParams.Add("searchSpecification", this.Configuration.ApiClient.ParameterToString(searchSpecification)); // form parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectRevenue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// projects Returns Scopevisio projects.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns></returns>
        public void GetProjects (string body = default(string))
        {
             GetProjectsWithHttpInfo(body);
        }

        /// <summary>
        /// projects Returns Scopevisio projects.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetProjectsWithHttpInfo (string body = default(string))
        {

            var localVarPath = "/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// projects Returns Scopevisio projects.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetProjectsAsync (string body = default(string))
        {
             await GetProjectsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// projects Returns Scopevisio projects.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetProjectsAsyncWithHttpInfo (string body = default(string))
        {

            var localVarPath = "/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// timeEntry for id Returns the Scopevisio timeEntry with the given id.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a Scopevisio timeEntry</param>
        /// <param name="fields">comma separated list of fields to show in response  id,topic (optional)</param>
        /// <returns></returns>
        public void GetTimeEntry (long id, string fields = default(string))
        {
             GetTimeEntryWithHttpInfo(id, fields);
        }

        /// <summary>
        /// timeEntry for id Returns the Scopevisio timeEntry with the given id.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a Scopevisio timeEntry</param>
        /// <param name="fields">comma separated list of fields to show in response  id,topic (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetTimeEntryWithHttpInfo (long id, string fields = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->GetTimeEntry");

            var localVarPath = "/timeentry/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimeEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// timeEntry for id Returns the Scopevisio timeEntry with the given id.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a Scopevisio timeEntry</param>
        /// <param name="fields">comma separated list of fields to show in response  id,topic (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetTimeEntryAsync (long id, string fields = default(string))
        {
             await GetTimeEntryAsyncWithHttpInfo(id, fields);

        }

        /// <summary>
        /// timeEntry for id Returns the Scopevisio timeEntry with the given id.  Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a Scopevisio timeEntry</param>
        /// <param name="fields">comma separated list of fields to show in response  id,topic (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetTimeEntryAsyncWithHttpInfo (long id, string fields = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->GetTimeEntry");

            var localVarPath = "/timeentry/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimeEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// update project by id Updates the Scopevisio project with the given id.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a Scopevisio Project</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateProject (long id, ProjectForm body = default(ProjectForm))
        {
             UpdateProjectWithHttpInfo(id, body);
        }

        /// <summary>
        /// update project by id Updates the Scopevisio project with the given id.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a Scopevisio Project</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateProjectWithHttpInfo (long id, ProjectForm body = default(ProjectForm))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->UpdateProject");

            var localVarPath = "/project/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// update project by id Updates the Scopevisio project with the given id.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a Scopevisio Project</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProjectAsync (long id, ProjectForm body = default(ProjectForm))
        {
             await UpdateProjectAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// update project by id Updates the Scopevisio project with the given id.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a Scopevisio Project</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProjectAsyncWithHttpInfo (long id, ProjectForm body = default(ProjectForm))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->UpdateProject");

            var localVarPath = "/project/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// update project employee (Projektteam-Eintrag) by employeeId (not contactId). Updates the employee of a Scopevisio project with the given employeeId.  Required profile(s): &lt;i&gt;Kontakte, Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="employeeId"></param>
        /// <param name="body">content in JSON format</param>
        /// <returns></returns>
        public void UpdateProjectEmployee (long projectId, long employeeId, ProjectEmployeeForm body)
        {
             UpdateProjectEmployeeWithHttpInfo(projectId, employeeId, body);
        }

        /// <summary>
        /// update project employee (Projektteam-Eintrag) by employeeId (not contactId). Updates the employee of a Scopevisio project with the given employeeId.  Required profile(s): &lt;i&gt;Kontakte, Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="employeeId"></param>
        /// <param name="body">content in JSON format</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateProjectEmployeeWithHttpInfo (long projectId, long employeeId, ProjectEmployeeForm body)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->UpdateProjectEmployee");
            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new ApiException(400, "Missing required parameter 'employeeId' when calling ProjectApi->UpdateProjectEmployee");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectApi->UpdateProjectEmployee");

            var localVarPath = "/project/{projectId}/projectemployee/{employeeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (employeeId != null) localVarPathParams.Add("employeeId", this.Configuration.ApiClient.ParameterToString(employeeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProjectEmployee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// update project employee (Projektteam-Eintrag) by employeeId (not contactId). Updates the employee of a Scopevisio project with the given employeeId.  Required profile(s): &lt;i&gt;Kontakte, Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="employeeId"></param>
        /// <param name="body">content in JSON format</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProjectEmployeeAsync (long projectId, long employeeId, ProjectEmployeeForm body)
        {
             await UpdateProjectEmployeeAsyncWithHttpInfo(projectId, employeeId, body);

        }

        /// <summary>
        /// update project employee (Projektteam-Eintrag) by employeeId (not contactId). Updates the employee of a Scopevisio project with the given employeeId.  Required profile(s): &lt;i&gt;Kontakte, Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="employeeId"></param>
        /// <param name="body">content in JSON format</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProjectEmployeeAsyncWithHttpInfo (long projectId, long employeeId, ProjectEmployeeForm body)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->UpdateProjectEmployee");
            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new ApiException(400, "Missing required parameter 'employeeId' when calling ProjectApi->UpdateProjectEmployee");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectApi->UpdateProjectEmployee");

            var localVarPath = "/project/{projectId}/projectemployee/{employeeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (employeeId != null) localVarPathParams.Add("employeeId", this.Configuration.ApiClient.ParameterToString(employeeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProjectEmployee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// update sales project (Vertriebsprojekt) by id Updates the Scopevisio sales project (Vertriebsprojekt) with the given id. It is not possible to convert a  Lead (project \&quot;sphereLead\&quot; set) to Interessent (\&quot;sphereInterested\&quot; set) via webservice. The conversion must be done via the Scopevisio client. Setting the interested fields like intrestedBudget, intrestedAuthority, etc. is only possible if the projectis already Interessent (\&quot;sphereInterested\&quot; set). Otherwise they are overridden by the conversion process. To retrieve a sales project use the endpoint project/{id}.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a Scopevisio Project</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateSalesProject (long id, SalesProjectForm body = default(SalesProjectForm))
        {
             UpdateSalesProjectWithHttpInfo(id, body);
        }

        /// <summary>
        /// update sales project (Vertriebsprojekt) by id Updates the Scopevisio sales project (Vertriebsprojekt) with the given id. It is not possible to convert a  Lead (project \&quot;sphereLead\&quot; set) to Interessent (\&quot;sphereInterested\&quot; set) via webservice. The conversion must be done via the Scopevisio client. Setting the interested fields like intrestedBudget, intrestedAuthority, etc. is only possible if the projectis already Interessent (\&quot;sphereInterested\&quot; set). Otherwise they are overridden by the conversion process. To retrieve a sales project use the endpoint project/{id}.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a Scopevisio Project</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSalesProjectWithHttpInfo (long id, SalesProjectForm body = default(SalesProjectForm))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->UpdateSalesProject");

            var localVarPath = "/salesproject/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSalesProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// update sales project (Vertriebsprojekt) by id Updates the Scopevisio sales project (Vertriebsprojekt) with the given id. It is not possible to convert a  Lead (project \&quot;sphereLead\&quot; set) to Interessent (\&quot;sphereInterested\&quot; set) via webservice. The conversion must be done via the Scopevisio client. Setting the interested fields like intrestedBudget, intrestedAuthority, etc. is only possible if the projectis already Interessent (\&quot;sphereInterested\&quot; set). Otherwise they are overridden by the conversion process. To retrieve a sales project use the endpoint project/{id}.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a Scopevisio Project</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSalesProjectAsync (long id, SalesProjectForm body = default(SalesProjectForm))
        {
             await UpdateSalesProjectAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// update sales project (Vertriebsprojekt) by id Updates the Scopevisio sales project (Vertriebsprojekt) with the given id. It is not possible to convert a  Lead (project \&quot;sphereLead\&quot; set) to Interessent (\&quot;sphereInterested\&quot; set) via webservice. The conversion must be done via the Scopevisio client. Setting the interested fields like intrestedBudget, intrestedAuthority, etc. is only possible if the projectis already Interessent (\&quot;sphereInterested\&quot; set). Otherwise they are overridden by the conversion process. To retrieve a sales project use the endpoint project/{id}.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a Scopevisio Project</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSalesProjectAsyncWithHttpInfo (long id, SalesProjectForm body = default(SalesProjectForm))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->UpdateSalesProject");

            var localVarPath = "/salesproject/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSalesProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update timeEntry Updates the Scopevisio timeEntry with the given timeEntry id. Update may be refused if a time entry run exists for this time entry. In this case the time entry is updated only if the setting in the time entry run settings (see Scopevisio client application) is \&quot;Änderungen zulassen\&quot;.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a Scopevisio timeEntry</param>
        /// <param name="body">Content in JSON format. Please refer to TimeentryForm for example values and to our  &lt;a href&#x3D;&#39;../browser/index.html#!/documentation&#39;&gt;general documentation&lt;/a&gt; for update information. (optional)</param>
        /// <returns></returns>
        public void UpdateTimeEntry (long id, TimeEntryForm body = default(TimeEntryForm))
        {
             UpdateTimeEntryWithHttpInfo(id, body);
        }

        /// <summary>
        /// Update timeEntry Updates the Scopevisio timeEntry with the given timeEntry id. Update may be refused if a time entry run exists for this time entry. In this case the time entry is updated only if the setting in the time entry run settings (see Scopevisio client application) is \&quot;Änderungen zulassen\&quot;.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a Scopevisio timeEntry</param>
        /// <param name="body">Content in JSON format. Please refer to TimeentryForm for example values and to our  &lt;a href&#x3D;&#39;../browser/index.html#!/documentation&#39;&gt;general documentation&lt;/a&gt; for update information. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateTimeEntryWithHttpInfo (long id, TimeEntryForm body = default(TimeEntryForm))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->UpdateTimeEntry");

            var localVarPath = "/timeentry/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTimeEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update timeEntry Updates the Scopevisio timeEntry with the given timeEntry id. Update may be refused if a time entry run exists for this time entry. In this case the time entry is updated only if the setting in the time entry run settings (see Scopevisio client application) is \&quot;Änderungen zulassen\&quot;.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a Scopevisio timeEntry</param>
        /// <param name="body">Content in JSON format. Please refer to TimeentryForm for example values and to our  &lt;a href&#x3D;&#39;../browser/index.html#!/documentation&#39;&gt;general documentation&lt;/a&gt; for update information. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTimeEntryAsync (long id, TimeEntryForm body = default(TimeEntryForm))
        {
             await UpdateTimeEntryAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// Update timeEntry Updates the Scopevisio timeEntry with the given timeEntry id. Update may be refused if a time entry run exists for this time entry. In this case the time entry is updated only if the setting in the time entry run settings (see Scopevisio client application) is \&quot;Änderungen zulassen\&quot;.  Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of a Scopevisio timeEntry</param>
        /// <param name="body">Content in JSON format. Please refer to TimeentryForm for example values and to our  &lt;a href&#x3D;&#39;../browser/index.html#!/documentation&#39;&gt;general documentation&lt;/a&gt; for update information. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTimeEntryAsyncWithHttpInfo (long id, TimeEntryForm body = default(TimeEntryForm))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProjectApi->UpdateTimeEntry");

            var localVarPath = "/timeentry/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTimeEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
