// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace CompuMaster.Scopevisio.OpenApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class TimeEntryForm
    {
        /// <summary>
        /// Initializes a new instance of the TimeEntryForm class.
        /// </summary>
        public TimeEntryForm() { }

        /// <summary>
        /// Initializes a new instance of the TimeEntryForm class.
        /// </summary>
        public TimeEntryForm(long employeeId, long? startTs = default(long?), long? endTs = default(long?), bool? fullDay = default(bool?), long? contactId = default(long?), long? projectId = default(long?), long? taskId = default(long?), long? orderId = default(long?), string productIdOrNumber = default(string), bool? billable = default(bool?), bool? confirmed = default(bool?), bool? stateDone = default(bool?), string internalNote = default(string), string note = default(string), long? permissionType = default(long?), string readPermissionProfiles = default(string), string readPermissionLogins = default(string), string writePermissionProfiles = default(string), string writePermissionLogins = default(string))
        {
            EmployeeId = employeeId;
            StartTs = startTs;
            EndTs = endTs;
            FullDay = fullDay;
            ContactId = contactId;
            ProjectId = projectId;
            TaskId = taskId;
            OrderId = orderId;
            ProductIdOrNumber = productIdOrNumber;
            Billable = billable;
            Confirmed = confirmed;
            StateDone = stateDone;
            InternalNote = internalNote;
            Note = note;
            PermissionType = permissionType;
            ReadPermissionProfiles = readPermissionProfiles;
            ReadPermissionLogins = readPermissionLogins;
            WritePermissionProfiles = writePermissionProfiles;
            WritePermissionLogins = writePermissionLogins;
        }

        /// <summary>
        /// Id of the user contact (Aus Benutzerkontakt)
        /// </summary>
        [JsonProperty(PropertyName = "employeeId")]
        public long EmployeeId { get; set; }

        /// <summary>
        /// Start timestamp. If not given it is set to the current time.
        /// </summary>
        [JsonProperty(PropertyName = "startTs")]
        public long? StartTs { get; set; }

        /// <summary>
        /// End timestamp. If not given it is set to the current time.
        /// </summary>
        [JsonProperty(PropertyName = "endTs")]
        public long? EndTs { get; set; }

        /// <summary>
        /// fullDay. When set the data given in startTs and endTs is ignored.
        /// Both timestamps are set to the full day start and end time
        /// configured in the Scopevisio desktop application.
        /// </summary>
        [JsonProperty(PropertyName = "fullDay")]
        public bool? FullDay { get; set; }

        /// <summary>
        /// contactId. If no contact is set explicitly by the user, the
        /// contact from project, task or order (in this priority order) is
        /// set. E.g. the user sets no contact and no project, but task and
        /// order. In this case the task contact is set to the time entry. If
        /// there is no contact in task, the order contact is set to the time
        /// entry.
        /// </summary>
        [JsonProperty(PropertyName = "contactId")]
        public long? ContactId { get; set; }

        /// <summary>
        /// projectId. If no project is set by the user explicitly the project
        /// from task or order(in this priority order) is set. E.g. the user
        /// sets no contact and no project, but task and order(in the order
        /// there is a project set). In this case the task project contact is
        /// set to the time entry. If there is no project in task, the order
        /// project is set to the time entry.
        /// </summary>
        [JsonProperty(PropertyName = "projectId")]
        public long? ProjectId { get; set; }

        /// <summary>
        /// taskId
        /// </summary>
        [JsonProperty(PropertyName = "taskId")]
        public long? TaskId { get; set; }

        /// <summary>
        /// orderId
        /// </summary>
        [JsonProperty(PropertyName = "orderId")]
        public long? OrderId { get; set; }

        /// <summary>
        /// productId or product number
        /// </summary>
        [JsonProperty(PropertyName = "productIdOrNumber")]
        public string ProductIdOrNumber { get; set; }

        /// <summary>
        /// billable
        /// </summary>
        [JsonProperty(PropertyName = "billable")]
        public bool? Billable { get; set; }

        /// <summary>
        /// confirmed
        /// </summary>
        [JsonProperty(PropertyName = "confirmed")]
        public bool? Confirmed { get; set; }

        /// <summary>
        /// done (Durchgeführt)
        /// </summary>
        [JsonProperty(PropertyName = "stateDone")]
        public bool? StateDone { get; set; }

        /// <summary>
        /// internal Note
        /// </summary>
        [JsonProperty(PropertyName = "internalNote")]
        public string InternalNote { get; set; }

        /// <summary>
        /// note
        /// </summary>
        [JsonProperty(PropertyName = "note")]
        public string Note { get; set; }

        /// <summary>
        /// 0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich
        /// </summary>
        [JsonProperty(PropertyName = "permissionType")]
        public long? PermissionType { get; set; }

        /// <summary>
        /// comma separated list of profiles for the read permissions,
        /// evaluated only if permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "readPermissionProfiles")]
        public string ReadPermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails for the read
        /// permissions, evaluated only if permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "readPermissionLogins")]
        public string ReadPermissionLogins { get; set; }

        /// <summary>
        /// comma separated list of profiles for full access, evaluated only
        /// if permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "writePermissionProfiles")]
        public string WritePermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails, evaluated only if
        /// permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "writePermissionLogins")]
        public string WritePermissionLogins { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
