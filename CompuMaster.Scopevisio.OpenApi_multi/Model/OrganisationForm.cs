/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CompuMaster.Scopevisio.OpenApi.Client.OpenAPIDateConverter;

namespace CompuMaster.Scopevisio.OpenApi.Model
{
    /// <summary>
    /// OrganisationForm
    /// </summary>
    [DataContract]
    public partial class OrganisationForm :  IEquatable<OrganisationForm>, IValidatableObject
    {
        /// <summary>
        /// scoa. The whished standard chart of accounts. If not given it is not set up. This must be done manually by the user.  See also &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#scoa&#39;&gt;our documentation&lt;/a&gt; for detailed description of the chart of accounts.
        /// </summary>
        /// <value>scoa. The whished standard chart of accounts. If not given it is not set up. This must be done manually by the user.  See also &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#scoa&#39;&gt;our documentation&lt;/a&gt; for detailed description of the chart of accounts.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScoaEnum
        {
            /// <summary>
            /// Enum SKR03 for value: SKR 03
            /// </summary>
            [EnumMember(Value = "SKR 03")]
            SKR03 = 1,

            /// <summary>
            /// Enum SKR04 for value: SKR 04
            /// </summary>
            [EnumMember(Value = "SKR 04")]
            SKR04 = 2,

            /// <summary>
            /// Enum SKR04IFRS for value: SKR04 IFRS
            /// </summary>
            [EnumMember(Value = "SKR04 IFRS")]
            SKR04IFRS = 3,

            /// <summary>
            /// Enum SKR03IFRSIAS for value: SKR03 IFRS IAS
            /// </summary>
            [EnumMember(Value = "SKR03 IFRS IAS")]
            SKR03IFRSIAS = 4,

            /// <summary>
            /// Enum SKR14 for value: SKR 14
            /// </summary>
            [EnumMember(Value = "SKR 14")]
            SKR14 = 5,

            /// <summary>
            /// Enum SKR45PBV for value: SKR 45 PBV
            /// </summary>
            [EnumMember(Value = "SKR 45 PBV")]
            SKR45PBV = 6,

            /// <summary>
            /// Enum SKR49 for value: SKR 49
            /// </summary>
            [EnumMember(Value = "SKR 49")]
            SKR49 = 7,

            /// <summary>
            /// Enum SKR70 for value: SKR 70
            /// </summary>
            [EnumMember(Value = "SKR 70")]
            SKR70 = 8,

            /// <summary>
            /// Enum SKR80 for value: SKR 80
            /// </summary>
            [EnumMember(Value = "SKR 80")]
            SKR80 = 9,

            /// <summary>
            /// Enum SKR81 for value: SKR 81
            /// </summary>
            [EnumMember(Value = "SKR 81")]
            SKR81 = 10,

            /// <summary>
            /// Enum KHBV for value: KHBV
            /// </summary>
            [EnumMember(Value = "KHBV")]
            KHBV = 11,

            /// <summary>
            /// Enum Individuell for value: Individuell
            /// </summary>
            [EnumMember(Value = "Individuell")]
            Individuell = 12

        }

        /// <summary>
        /// scoa. The whished standard chart of accounts. If not given it is not set up. This must be done manually by the user.  See also &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#scoa&#39;&gt;our documentation&lt;/a&gt; for detailed description of the chart of accounts.
        /// </summary>
        /// <value>scoa. The whished standard chart of accounts. If not given it is not set up. This must be done manually by the user.  See also &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#scoa&#39;&gt;our documentation&lt;/a&gt; for detailed description of the chart of accounts.</value>
        [DataMember(Name="scoa", EmitDefaultValue=false)]
        public ScoaEnum? Scoa { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganisationForm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrganisationForm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganisationForm" /> class.
        /// </summary>
        /// <param name="organisationName">organisationName. The name of the organisation to be created. (required).</param>
        /// <param name="scoa">scoa. The whished standard chart of accounts. If not given it is not set up. This must be done manually by the user.  See also &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#scoa&#39;&gt;our documentation&lt;/a&gt; for detailed description of the chart of accounts..</param>
        public OrganisationForm(string organisationName = default(string), ScoaEnum? scoa = default(ScoaEnum?))
        {
            // to ensure "organisationName" is required (not null)
            if (organisationName == null)
            {
                throw new InvalidDataException("organisationName is a required property for OrganisationForm and cannot be null");
            }
            else
            {
                this.OrganisationName = organisationName;
            }
            
            this.Scoa = scoa;
        }
        
        /// <summary>
        /// organisationName. The name of the organisation to be created.
        /// </summary>
        /// <value>organisationName. The name of the organisation to be created.</value>
        [DataMember(Name="organisationName", EmitDefaultValue=true)]
        public string OrganisationName { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrganisationForm {\n");
            sb.Append("  OrganisationName: ").Append(OrganisationName).Append("\n");
            sb.Append("  Scoa: ").Append(Scoa).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganisationForm);
        }

        /// <summary>
        /// Returns true if OrganisationForm instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganisationForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganisationForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrganisationName == input.OrganisationName ||
                    (this.OrganisationName != null &&
                    this.OrganisationName.Equals(input.OrganisationName))
                ) && 
                (
                    this.Scoa == input.Scoa ||
                    (this.Scoa != null &&
                    this.Scoa.Equals(input.Scoa))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrganisationName != null)
                    hashCode = hashCode * 59 + this.OrganisationName.GetHashCode();
                if (this.Scoa != null)
                    hashCode = hashCode * 59 + this.Scoa.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
