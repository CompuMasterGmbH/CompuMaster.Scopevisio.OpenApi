/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Postings
    /// </summary>
    [DataContract]
    public partial class Postings :  IEquatable<Postings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Postings" /> class.
        /// </summary>
        /// <param name="adjustVatKey">Replace the VAT key in the given rows with the vat key from the Scopevisio chart of accounts for this account. (default to false).</param>
        /// <param name="autoCreateTax">Create automatically tax posting rows. In this case an extra row for the tax posting is not needed. (default to false).</param>
        /// <param name="rows">rows.</param>
        public Postings(bool adjustVatKey = false, bool autoCreateTax = false, List<PostingRow> rows = default(List<PostingRow>))
        {
            // use default value if no "adjustVatKey" provided
            if (adjustVatKey == null)
            {
                this.AdjustVatKey = false;
            }
            else
            {
                this.AdjustVatKey = adjustVatKey;
            }
            // use default value if no "autoCreateTax" provided
            if (autoCreateTax == null)
            {
                this.AutoCreateTax = false;
            }
            else
            {
                this.AutoCreateTax = autoCreateTax;
            }
            this.Rows = rows;
        }
        
        /// <summary>
        /// Replace the VAT key in the given rows with the vat key from the Scopevisio chart of accounts for this account.
        /// </summary>
        /// <value>Replace the VAT key in the given rows with the vat key from the Scopevisio chart of accounts for this account.</value>
        [DataMember(Name="adjustVatKey", EmitDefaultValue=false)]
        public bool AdjustVatKey { get; set; }

        /// <summary>
        /// Create automatically tax posting rows. In this case an extra row for the tax posting is not needed.
        /// </summary>
        /// <value>Create automatically tax posting rows. In this case an extra row for the tax posting is not needed.</value>
        [DataMember(Name="autoCreateTax", EmitDefaultValue=false)]
        public bool AutoCreateTax { get; set; }

        /// <summary>
        /// Gets or Sets Rows
        /// </summary>
        [DataMember(Name="rows", EmitDefaultValue=false)]
        public List<PostingRow> Rows { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Postings {\n");
            sb.Append("  AdjustVatKey: ").Append(AdjustVatKey).Append("\n");
            sb.Append("  AutoCreateTax: ").Append(AutoCreateTax).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Postings);
        }

        /// <summary>
        /// Returns true if Postings instances are equal
        /// </summary>
        /// <param name="input">Instance of Postings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Postings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdjustVatKey == input.AdjustVatKey ||
                    (this.AdjustVatKey != null &&
                    this.AdjustVatKey.Equals(input.AdjustVatKey))
                ) && 
                (
                    this.AutoCreateTax == input.AutoCreateTax ||
                    (this.AutoCreateTax != null &&
                    this.AutoCreateTax.Equals(input.AutoCreateTax))
                ) && 
                (
                    this.Rows == input.Rows ||
                    this.Rows != null &&
                    input.Rows != null &&
                    this.Rows.SequenceEqual(input.Rows)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdjustVatKey != null)
                    hashCode = hashCode * 59 + this.AdjustVatKey.GetHashCode();
                if (this.AutoCreateTax != null)
                    hashCode = hashCode * 59 + this.AutoCreateTax.GetHashCode();
                if (this.Rows != null)
                    hashCode = hashCode * 59 + this.Rows.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
