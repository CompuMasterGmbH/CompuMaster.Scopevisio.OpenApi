// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace CompuMaster.Scopevisio.OpenApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class KontaktForm
    {
        /// <summary>
        /// Initializes a new instance of the KontaktForm class.
        /// </summary>
        public KontaktForm() { }

        /// <summary>
        /// Initializes a new instance of the KontaktForm class.
        /// </summary>
        public KontaktForm(bool person, string lastname, string salutation = default(string), string title = default(string), string firstname = default(string), string paymentTypeName = default(string), string federalState = default(string), string federalState2 = default(string), string federalState3 = default(string), string federalState4 = default(string), string federalState5 = default(string), string federalState6 = default(string), string street1 = default(string), string street2 = default(string), string street3 = default(string), string street4 = default(string), string street5 = default(string), string street6 = default(string), string addressExtra1 = default(string), string addressExtra2 = default(string), string addressExtra3 = default(string), string addressExtra4 = default(string), string addressExtra5 = default(string), string addressExtra6 = default(string), string city1 = default(string), string city2 = default(string), string city3 = default(string), string city4 = default(string), string city5 = default(string), string city6 = default(string), string postcode1 = default(string), string postcode2 = default(string), string postcode3 = default(string), string postcode4 = default(string), string postcode5 = default(string), string postcode6 = default(string), string country1 = default(string), string country2 = default(string), string country3 = default(string), string country4 = default(string), string country5 = default(string), string country6 = default(string), string email = default(string), string email2 = default(string), string email3 = default(string), string email4 = default(string), string email5 = default(string), string email6 = default(string), string phone = default(string), string phone2 = default(string), string phone3 = default(string), string phone4 = default(string), string phone5 = default(string), string phone6 = default(string), string mobile = default(string), string mobile2 = default(string), string mobile3 = default(string), string mobile4 = default(string), string mobile5 = default(string), string mobile6 = default(string), string fax = default(string), string fax2 = default(string), string fax3 = default(string), string fax4 = default(string), string fax5 = default(string), string fax6 = default(string), string language = default(string), string position = default(string), string positionReplacement = default(string), string department = default(string), string industry = default(string), string customerNumber = default(string), string legacyNumber = default(string), string tags = default(string), string website = default(string), string description = default(string), string vatId = default(string), string currency = default(string), IList<CustomField> customFields = default(IList<CustomField>), IList<Employer> employers = default(IList<Employer>), string deliveryTermIncoterm = default(string), string deliveryTermIncotermLocation = default(string), string ownerUid = default(string), long? permissionType = default(long?), string readPermissionProfiles = default(string), string readPermissionLogins = default(string), string writePermissionProfiles = default(string), string writePermissionLogins = default(string))
        {
            Person = person;
            Salutation = salutation;
            Title = title;
            Lastname = lastname;
            Firstname = firstname;
            PaymentTypeName = paymentTypeName;
            FederalState = federalState;
            FederalState2 = federalState2;
            FederalState3 = federalState3;
            FederalState4 = federalState4;
            FederalState5 = federalState5;
            FederalState6 = federalState6;
            Street1 = street1;
            Street2 = street2;
            Street3 = street3;
            Street4 = street4;
            Street5 = street5;
            Street6 = street6;
            AddressExtra1 = addressExtra1;
            AddressExtra2 = addressExtra2;
            AddressExtra3 = addressExtra3;
            AddressExtra4 = addressExtra4;
            AddressExtra5 = addressExtra5;
            AddressExtra6 = addressExtra6;
            City1 = city1;
            City2 = city2;
            City3 = city3;
            City4 = city4;
            City5 = city5;
            City6 = city6;
            Postcode1 = postcode1;
            Postcode2 = postcode2;
            Postcode3 = postcode3;
            Postcode4 = postcode4;
            Postcode5 = postcode5;
            Postcode6 = postcode6;
            Country1 = country1;
            Country2 = country2;
            Country3 = country3;
            Country4 = country4;
            Country5 = country5;
            Country6 = country6;
            Email = email;
            Email2 = email2;
            Email3 = email3;
            Email4 = email4;
            Email5 = email5;
            Email6 = email6;
            Phone = phone;
            Phone2 = phone2;
            Phone3 = phone3;
            Phone4 = phone4;
            Phone5 = phone5;
            Phone6 = phone6;
            Mobile = mobile;
            Mobile2 = mobile2;
            Mobile3 = mobile3;
            Mobile4 = mobile4;
            Mobile5 = mobile5;
            Mobile6 = mobile6;
            Fax = fax;
            Fax2 = fax2;
            Fax3 = fax3;
            Fax4 = fax4;
            Fax5 = fax5;
            Fax6 = fax6;
            Language = language;
            Position = position;
            PositionReplacement = positionReplacement;
            Department = department;
            Industry = industry;
            CustomerNumber = customerNumber;
            LegacyNumber = legacyNumber;
            Tags = tags;
            Website = website;
            Description = description;
            VatId = vatId;
            Currency = currency;
            CustomFields = customFields;
            Employers = employers;
            DeliveryTermIncoterm = deliveryTermIncoterm;
            DeliveryTermIncotermLocation = deliveryTermIncotermLocation;
            OwnerUid = ownerUid;
            PermissionType = permissionType;
            ReadPermissionProfiles = readPermissionProfiles;
            ReadPermissionLogins = readPermissionLogins;
            WritePermissionProfiles = writePermissionProfiles;
            WritePermissionLogins = writePermissionLogins;
        }

        /// <summary>
        /// true = Person, false = Gesellschaft. Evaluated only when creating
        /// a contact.
        /// </summary>
        [JsonProperty(PropertyName = "person")]
        public bool Person { get; set; }

        /// <summary>
        /// Anrede. Possible values include: 'Herr', 'Frau', 'Familie',
        /// 'Eheleute'
        /// </summary>
        [JsonProperty(PropertyName = "salutation")]
        public string Salutation { get; set; }

        /// <summary>
        /// Titel. Possible values include: 'Bachelor', 'Master', 'Magister',
        /// 'Lizentiat', 'Diplom (FH)', 'Diplom', 'Ph.D.', 'Dr.', 'Dr.
        /// mult.', 'Dr. habil.', 'Dr. h.c.', 'Dr. e.h.', 'Prof.', 'Prof. Dr.'
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Name/Gesellschaftsname
        /// </summary>
        [JsonProperty(PropertyName = "lastname")]
        public string Lastname { get; set; }

        /// <summary>
        /// Vorname
        /// </summary>
        [JsonProperty(PropertyName = "firstname")]
        public string Firstname { get; set; }

        /// <summary>
        /// paymentTypeName (Zahlungsart).Sets also pamymentType. Possible
        /// values include: 'Vorkasse', 'Überweisung', 'Bar', 'EC-Karte',
        /// 'Einzugsermächtung', 'Projektleiter', 'Kreditkarte', 'Nachnahme',
        /// 'PayPal', 'Rechnung'
        /// </summary>
        [JsonProperty(PropertyName = "paymentTypeName")]
        public string PaymentTypeName { get; set; }

        /// <summary>
        /// Bundesland [Hauptadresse]
        /// </summary>
        [JsonProperty(PropertyName = "federalState")]
        public string FederalState { get; set; }

        /// <summary>
        /// Bundesland [Rechnungsadresse]
        /// </summary>
        [JsonProperty(PropertyName = "federalState2")]
        public string FederalState2 { get; set; }

        /// <summary>
        /// Bundesland [Lieferadresse]
        /// </summary>
        [JsonProperty(PropertyName = "federalState3")]
        public string FederalState3 { get; set; }

        /// <summary>
        /// Bundesland [Postalisch]
        /// </summary>
        [JsonProperty(PropertyName = "federalState4")]
        public string FederalState4 { get; set; }

        /// <summary>
        /// Bundesland [Privat]
        /// </summary>
        [JsonProperty(PropertyName = "federalState5")]
        public string FederalState5 { get; set; }

        /// <summary>
        /// Bundesland [weiteres]
        /// </summary>
        [JsonProperty(PropertyName = "federalState6")]
        public string FederalState6 { get; set; }

        /// <summary>
        /// Straße und Hausnummer [Hauptadresse]
        /// </summary>
        [JsonProperty(PropertyName = "street1")]
        public string Street1 { get; set; }

        /// <summary>
        /// Straße und Hausnummer [Rechnungsadresse]
        /// </summary>
        [JsonProperty(PropertyName = "street2")]
        public string Street2 { get; set; }

        /// <summary>
        /// Straße und Hausnummer [Lieferadresse]
        /// </summary>
        [JsonProperty(PropertyName = "street3")]
        public string Street3 { get; set; }

        /// <summary>
        /// Straße und Hausnummer [Postalisch]
        /// </summary>
        [JsonProperty(PropertyName = "street4")]
        public string Street4 { get; set; }

        /// <summary>
        /// Straße und Hausnummer [Privat]
        /// </summary>
        [JsonProperty(PropertyName = "street5")]
        public string Street5 { get; set; }

        /// <summary>
        /// Straße und Hausnummer [weiteres]
        /// </summary>
        [JsonProperty(PropertyName = "street6")]
        public string Street6 { get; set; }

        /// <summary>
        /// Zustellanweisung [c/o] [Hauptadresse]
        /// </summary>
        [JsonProperty(PropertyName = "addressExtra1")]
        public string AddressExtra1 { get; set; }

        /// <summary>
        /// Zustellanweisung [c/o] [Rechnungsadresse]
        /// </summary>
        [JsonProperty(PropertyName = "addressExtra2")]
        public string AddressExtra2 { get; set; }

        /// <summary>
        /// Zustellanweisung [c/o] [Lieferadresse]
        /// </summary>
        [JsonProperty(PropertyName = "addressExtra3")]
        public string AddressExtra3 { get; set; }

        /// <summary>
        /// Zustellanweisung [c/o] [Postalisch]
        /// </summary>
        [JsonProperty(PropertyName = "addressExtra4")]
        public string AddressExtra4 { get; set; }

        /// <summary>
        /// Zustellanweisung [c/o] [Privat]
        /// </summary>
        [JsonProperty(PropertyName = "addressExtra5")]
        public string AddressExtra5 { get; set; }

        /// <summary>
        /// Zustellanweisung [c/o] [weiteres]
        /// </summary>
        [JsonProperty(PropertyName = "addressExtra6")]
        public string AddressExtra6 { get; set; }

        /// <summary>
        /// Stadt [Hauptadresse]
        /// </summary>
        [JsonProperty(PropertyName = "city1")]
        public string City1 { get; set; }

        /// <summary>
        /// Stadt [Rechnungsadresse]
        /// </summary>
        [JsonProperty(PropertyName = "city2")]
        public string City2 { get; set; }

        /// <summary>
        /// Stadt [Lieferadresse]
        /// </summary>
        [JsonProperty(PropertyName = "city3")]
        public string City3 { get; set; }

        /// <summary>
        /// Stadt [Postalisch]
        /// </summary>
        [JsonProperty(PropertyName = "city4")]
        public string City4 { get; set; }

        /// <summary>
        /// Stadt [Privat]
        /// </summary>
        [JsonProperty(PropertyName = "city5")]
        public string City5 { get; set; }

        /// <summary>
        /// Stadt [weiteres]
        /// </summary>
        [JsonProperty(PropertyName = "city6")]
        public string City6 { get; set; }

        /// <summary>
        /// Postleitzahl [Hauptadresse]
        /// </summary>
        [JsonProperty(PropertyName = "postcode1")]
        public string Postcode1 { get; set; }

        /// <summary>
        /// Postleitzahl [Rechnungsadresse]
        /// </summary>
        [JsonProperty(PropertyName = "postcode2")]
        public string Postcode2 { get; set; }

        /// <summary>
        /// Postleitzahl [Lieferadresse]
        /// </summary>
        [JsonProperty(PropertyName = "postcode3")]
        public string Postcode3 { get; set; }

        /// <summary>
        /// Postleitzahl [Postalisch]
        /// </summary>
        [JsonProperty(PropertyName = "postcode4")]
        public string Postcode4 { get; set; }

        /// <summary>
        /// Postleitzahl [Privat]
        /// </summary>
        [JsonProperty(PropertyName = "postcode5")]
        public string Postcode5 { get; set; }

        /// <summary>
        /// Postleitzahl
        /// </summary>
        [JsonProperty(PropertyName = "postcode6")]
        public string Postcode6 { get; set; }

        /// <summary>
        /// Land [Hauptadresse]
        /// </summary>
        [JsonProperty(PropertyName = "country1")]
        public string Country1 { get; set; }

        /// <summary>
        /// Land [Rechnungsadresse]
        /// </summary>
        [JsonProperty(PropertyName = "country2")]
        public string Country2 { get; set; }

        /// <summary>
        /// Land [Lieferadresse]
        /// </summary>
        [JsonProperty(PropertyName = "country3")]
        public string Country3 { get; set; }

        /// <summary>
        /// Land [Postalisch]
        /// </summary>
        [JsonProperty(PropertyName = "country4")]
        public string Country4 { get; set; }

        /// <summary>
        /// Land [Privat]
        /// </summary>
        [JsonProperty(PropertyName = "country5")]
        public string Country5 { get; set; }

        /// <summary>
        /// Land [weiteres]
        /// </summary>
        [JsonProperty(PropertyName = "country6")]
        public string Country6 { get; set; }

        /// <summary>
        /// E-Mai-Addresse [Geschäftlich]
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// E-Mail-Addresse [Geschäftlich 2]
        /// </summary>
        [JsonProperty(PropertyName = "email2")]
        public string Email2 { get; set; }

        /// <summary>
        /// E-Mail-Addresse[Assistent]
        /// </summary>
        [JsonProperty(PropertyName = "email3")]
        public string Email3 { get; set; }

        /// <summary>
        /// E-Mail-Addresse[Privat]
        /// </summary>
        [JsonProperty(PropertyName = "email4")]
        public string Email4 { get; set; }

        /// <summary>
        /// E-Mail-Addresse[Privat 2]
        /// </summary>
        [JsonProperty(PropertyName = "email5")]
        public string Email5 { get; set; }

        /// <summary>
        /// E-Mail-Addresse[weiteres]
        /// </summary>
        [JsonProperty(PropertyName = "email6")]
        public string Email6 { get; set; }

        /// <summary>
        /// Telefon [Geschäftlich]
        /// </summary>
        [JsonProperty(PropertyName = "phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Telefon [Geschäftlich 2]
        /// </summary>
        [JsonProperty(PropertyName = "phone2")]
        public string Phone2 { get; set; }

        /// <summary>
        /// Telefon [Assistent]
        /// </summary>
        [JsonProperty(PropertyName = "phone3")]
        public string Phone3 { get; set; }

        /// <summary>
        /// Telefon [Privat]
        /// </summary>
        [JsonProperty(PropertyName = "phone4")]
        public string Phone4 { get; set; }

        /// <summary>
        /// Telefon [Privat 2]
        /// </summary>
        [JsonProperty(PropertyName = "phone5")]
        public string Phone5 { get; set; }

        /// <summary>
        /// Telefon [weiteres]
        /// </summary>
        [JsonProperty(PropertyName = "phone6")]
        public string Phone6 { get; set; }

        /// <summary>
        /// Mobiltelefon [Geschäftlich]
        /// </summary>
        [JsonProperty(PropertyName = "mobile")]
        public string Mobile { get; set; }

        /// <summary>
        /// Mobiltelefon  [Geschäftlich 2]
        /// </summary>
        [JsonProperty(PropertyName = "mobile2")]
        public string Mobile2 { get; set; }

        /// <summary>
        /// Mobiltelefon  [Assistent]
        /// </summary>
        [JsonProperty(PropertyName = "mobile3")]
        public string Mobile3 { get; set; }

        /// <summary>
        /// Mobiltelefon  [Privat]
        /// </summary>
        [JsonProperty(PropertyName = "mobile4")]
        public string Mobile4 { get; set; }

        /// <summary>
        /// Mobiltelefon  [Privat 2]
        /// </summary>
        [JsonProperty(PropertyName = "mobile5")]
        public string Mobile5 { get; set; }

        /// <summary>
        /// Mobiltelefon  [weiteres]
        /// </summary>
        [JsonProperty(PropertyName = "mobile6")]
        public string Mobile6 { get; set; }

        /// <summary>
        /// Telefax [Geschäftlich]
        /// </summary>
        [JsonProperty(PropertyName = "fax")]
        public string Fax { get; set; }

        /// <summary>
        /// Telefax [Geschäftlich 2]
        /// </summary>
        [JsonProperty(PropertyName = "fax2")]
        public string Fax2 { get; set; }

        /// <summary>
        /// Telefax [Assistent]
        /// </summary>
        [JsonProperty(PropertyName = "fax3")]
        public string Fax3 { get; set; }

        /// <summary>
        /// Telefax [Privat]
        /// </summary>
        [JsonProperty(PropertyName = "fax4")]
        public string Fax4 { get; set; }

        /// <summary>
        /// Telefax [Privat 2]
        /// </summary>
        [JsonProperty(PropertyName = "fax5")]
        public string Fax5 { get; set; }

        /// <summary>
        /// Telefax [weiteres]
        /// </summary>
        [JsonProperty(PropertyName = "fax6")]
        public string Fax6 { get; set; }

        /// <summary>
        /// Language (Sprache). Possible values include: 'Arabisch', 'Arabisch
        /// (Vereinigte Arabische Emirate)', 'Arabisch (Bahrain)', 'Arabisch
        /// (Algerien)', 'Arabisch (Ägypten)', 'Arabisch (Irak)', 'Arabisch
        /// (Jordanien)', 'Arabisch (Kuwait)', 'Arabisch (Libanon)',
        /// 'Arabisch (Libyen)', 'Arabisch (Marokko)', 'Arabisch (Oman)',
        /// 'Arabisch (Katar)', 'Arabisch (Saudi-Arabien)', 'Arabisch
        /// (Sudan)', 'Arabisch (Syrien)', 'Arabisch (Tunesien)', 'Arabisch
        /// (Jemen)', 'Belorussisch', 'Belorussisch (Belarus)', 'Bulgarisch',
        /// 'Bulgarisch (Bulgarien)', 'Katalanisch', 'Katalanisch (Spanien)',
        /// 'Tschechisch', 'Tschechisch (Tschechische Republik)', 'Dänisch',
        /// 'Dänisch (Dänemark)', 'Deutsch', 'Deutsch (Österreich)', 'Deutsch
        /// (Schweiz)', 'Deutsch (Deutschland)', 'Deutsch (Luxemburg)',
        /// 'Griechisch', 'Griechisch (Zypern)', 'Griechisch (Griechenland)',
        /// 'Englisch', 'Englisch (Australien)', 'Englisch (Kanada)',
        /// 'Englisch (Vereinigtes Königreich)', 'Englisch (Irland)',
        /// 'Englisch (Indien)', 'Englisch (Malta)', 'Englisch (Neuseeland)',
        /// 'Englisch (Philippinen)', 'Englisch (Singapur)', 'Englisch
        /// (Vereinigte Staaten von Amerika)', 'Englisch (Südafrika)',
        /// 'Spanisch', 'Spanisch (Argentinien)', 'Spanisch (Bolivien)',
        /// 'Spanisch (Chile)', 'Spanisch (Kolumbien)', 'Spanisch (Costa
        /// Rica)', 'Spanisch (Dominikanische Republik)', 'Spanisch
        /// (Ecuador)', 'Spanisch (Spanien)', 'Spanisch (Guatemala)',
        /// 'Spanisch (Honduras)', 'Spanisch (Mexiko)', 'Spanisch
        /// (Nicaragua)', 'Spanisch (Panama)', 'Spanisch (Peru)', 'Spanisch
        /// (Puerto Rico)', 'Spanisch (Paraguay)', 'Spanisch (El Salvador)',
        /// 'Spanisch (Vereinigte Staaten von Amerika)', 'Spanisch
        /// (Uruguay)', 'Spanisch (Venezuela)', 'Estnisch', 'Estnisch
        /// (Estland)', 'Finnisch', 'Finnisch (Finnland)', 'Französisch',
        /// 'Französisch (Belgien)', 'Französisch (Kanada)', 'Französisch
        /// (Schweiz)', 'Französisch (Frankreich)', 'Französisch
        /// (Luxemburg)', 'Irisch', 'Irisch (Irland)', 'Hindi (Indien)',
        /// 'Kroatisch', 'Kroatisch (Kroatien)', 'Ungarisch', 'Ungarisch
        /// (Ungarn)', 'Indonesisch', 'Indonesisch (Indonesien)',
        /// 'Isländisch', 'Isländisch (Island)', 'Italienisch', 'Italienisch
        /// (Schweiz)', 'Italienisch (Italien)', 'Hebräisch', 'Hebräisch
        /// (Israel)', 'Japanisch', 'Japanisch (Japan)', 'Japanisch (Japan',
        /// 'JP)', 'Koreanisch', 'Koreanisch (Südkorea)', 'Litauisch',
        /// 'Litauisch (Litauen)', 'Lettisch', 'Lettisch (Lettland)',
        /// 'Mazedonisch', 'Mazedonisch (Mazedonien)', 'Malay', 'Malay
        /// (Malaysia)', 'Maltesisch', 'Maltesisch (Malta)',
        /// 'Niederländisch', 'Niederländisch (Belgien)', 'Niederländisch
        /// (Niederlande)', 'Norwegisch', 'Norwegisch (Norwegen)',
        /// 'Norwegisch (Norwegen', 'Nynorsk)', 'Polnisch', 'Polnisch
        /// (Polen)', 'Portugiesisch', 'Portugiesisch (Brasilien)',
        /// 'Portugiesisch (Portugal)', 'Rumänisch', 'Rumänisch (Rumänien)',
        /// 'Russisch', 'Russisch (Russland)', 'Slowakisch', 'Slowakisch
        /// (Slowakei)', 'Slowenisch', 'Slowenisch (Slowenien)', 'Albanisch',
        /// 'Albanisch (Albanien)', 'Serbisch', 'Serbisch (Bosnien und
        /// Herzegowina)', 'Serbisch (Serbien und Montenegro)', 'Schwedisch',
        /// 'Schwedisch (Schweden)', 'Thai', 'Thai (Thailand)', 'Thai
        /// (Thailand', 'TH)', 'Türkisch', 'Türkisch (Türkei)', 'Ukrainisch',
        /// 'Ukrainisch (Ukraine)', 'Vietnamesisch', 'Vietnamesisch
        /// (Vietnam)', 'Chinesisch', 'Chinesisch (China)', 'Chinesisch
        /// (Hongkong)', 'Chinesisch (Singapur)', 'Chinesisch (Taiwan)'
        /// </summary>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <summary>
        /// Position (Stelle). Please check your catalog in the Scopevisio
        /// client application for different values. Possible values include:
        /// 'Abteilungsleiter', 'Angestellter', 'Bereichsleiter',
        /// 'Geschäftsführer', 'Projektleiter', 'Leiter Entwicklung', 'Leiter
        /// Produktion', 'Prokurist', 'Leiter Rechnungswesen', 'Buchhalter',
        /// 'Finanzbuchhalter', 'Facharbeiter', 'Auszubildender', 'Externer
        /// Mitarbeiter', 'Berater', 'Externer steuerlicher Berater'
        /// </summary>
        [JsonProperty(PropertyName = "position")]
        public string Position { get; set; }

        /// <summary>
        /// positionReplacement (Position). Same as position.Please check your
        /// catalog in the Scopevisio client application for different
        /// values. Possible values include: 'Abteilungsleiter',
        /// 'Angestellter', 'Bereichsleiter', 'Geschäftsführer',
        /// 'Projektleiter', 'Leiter Entwicklung', 'Leiter Produktion',
        /// 'Prokurist', 'Leiter Rechnungswesen', 'Buchhalter',
        /// 'Finanzbuchhalter', 'Facharbeiter', 'Auszubildender', 'Externer
        /// Mitarbeiter', 'Berater', 'Externer steuerlicher Berater'
        /// </summary>
        [JsonProperty(PropertyName = "positionReplacement")]
        public string PositionReplacement { get; set; }

        /// <summary>
        /// Department (Abteilung). The value is set only if the contact is a
        /// personal contact. lease check your catalog in the Scopevisio
        /// client application for different values. Possible values include:
        /// 'Absatz', 'Beschaffung', 'Buchhaltung', 'Controlling', 'Einkauf',
        /// 'Entwicklung', 'Finanzwesen', 'Geschäftsführung',
        /// 'Geschäftsführungsbüro', 'Informationstechnologie',
        /// 'Kundenservice', 'Lager', 'Logistik', 'Marketing',
        /// 'Öffentlichkeitsarbeit (PR)', 'Personal', 'Planung',
        /// 'Produktion', 'Projekte', 'Rechnungswesen', 'Support',
        /// 'Vertrieb', 'Vorstand', 'Vorstandsbüro'
        /// </summary>
        [JsonProperty(PropertyName = "department")]
        public string Department { get; set; }

        /// <summary>
        /// Industry (Branche). Please check your catalog for allowable values.
        /// </summary>
        [JsonProperty(PropertyName = "industry")]
        public string Industry { get; set; }

        /// <summary>
        /// Kontaktnummer
        /// </summary>
        [JsonProperty(PropertyName = "customerNumber")]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// ID Vorsystem
        /// </summary>
        [JsonProperty(PropertyName = "legacyNumber")]
        public string LegacyNumber { get; set; }

        /// <summary>
        /// Schlagwörter
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public string Tags { get; set; }

        /// <summary>
        /// Website
        /// </summary>
        [JsonProperty(PropertyName = "website")]
        public string Website { get; set; }

        /// <summary>
        /// Description (Notiz). Use "\\\\\\\\\\\\n" to insert new line.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// vatId/taxId. If the kontakt has personal account(s) assigned, the
        /// vatId will not be updated in the accounts.
        /// </summary>
        [JsonProperty(PropertyName = "vatId")]
        public string VatId { get; set; }

        /// <summary>
        /// currency. If the kontakt has personal account(s) assigned, the
        /// currency will not be updated in the accounts.
        /// </summary>
        [JsonProperty(PropertyName = "currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Benutzerdefinierte Felder
        /// </summary>
        [JsonProperty(PropertyName = "customFields")]
        public IList<CustomField> CustomFields { get; set; }

        /// <summary>
        /// Employer and visibility in role "Arbeitnehmer".If more than one
        /// employer of type "Hauptarbeitgeber" is given, the last in the
        /// list is set in the contact card "Angaben zur Person"
        /// </summary>
        [JsonProperty(PropertyName = "employers")]
        public IList<Employer> Employers { get; set; }

        /// <summary>
        /// Incoterms (Sphere Vendor/Rolle Lieferant). The allowable values
        /// depend on the system catalog in the Scopevisio client
        /// application. Possible values include: 'Ab Werk', 'Fracht und
        /// Versicherung bezahlt', 'Frachtfrei', 'Frei an Bord', 'Frei
        /// Frachtführer', 'Frei Längsseite Schiff', 'Geliefert ab Kai
        /// (verzollt)', 'Geliefert ab Schiff', 'Geliefert benannter Ort',
        /// 'Geliefert Grenze', 'Geliefert Terminal', 'Geliefert verzollt',
        /// 'Kosten und Fracht', 'Kosten', 'Versicherung und Fracht'
        /// </summary>
        [JsonProperty(PropertyName = "deliveryTermIncoterm")]
        public string DeliveryTermIncoterm { get; set; }

        /// <summary>
        /// Incoterms-Ort (Sphere Vendor/Rolle Lieferant)
        /// </summary>
        [JsonProperty(PropertyName = "deliveryTermIncotermLocation")]
        public string DeliveryTermIncotermLocation { get; set; }

        /// <summary>
        /// ownerUid (Kontaktinhaber). The UID of a scopevisio user
        /// </summary>
        [JsonProperty(PropertyName = "ownerUid")]
        public string OwnerUid { get; set; }

        /// <summary>
        /// 0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich
        /// </summary>
        [JsonProperty(PropertyName = "permissionType")]
        public long? PermissionType { get; set; }

        /// <summary>
        /// comma separated list of profiles for the read permissions,
        /// evaluated only if permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "readPermissionProfiles")]
        public string ReadPermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails for the read
        /// permissions, evaluated only if permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "readPermissionLogins")]
        public string ReadPermissionLogins { get; set; }

        /// <summary>
        /// comma separated list of profiles for full access, evaluated only
        /// if permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "writePermissionProfiles")]
        public string WritePermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails, evaluated only if
        /// permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "writePermissionLogins")]
        public string WritePermissionLogins { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Lastname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Lastname");
            }
            if (this.CustomFields != null)
            {
                foreach (var element in this.CustomFields)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
