// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace CompuMaster.Scopevisio.OpenApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class SalesProjectForm
    {
        /// <summary>
        /// Initializes a new instance of the SalesProjectForm class.
        /// </summary>
        public SalesProjectForm() { }

        /// <summary>
        /// Initializes a new instance of the SalesProjectForm class.
        /// </summary>
        public SalesProjectForm(string name, long contactId, string number = default(string), string type = default(string), string type2 = default(string), string description = default(string), string legacyNumber = default(string), long? initiatorContactId = default(long?), long? contactPerson = default(long?), string ownerUid = default(string), double? workdays = default(double?), long? startTs = default(long?), long? endTs = default(long?), long? decisionTs = default(long?), bool? estimatedHoursMode = default(bool?), double? estimatedHours = default(double?), long? dimensionNumber = default(long?), string dimensionName = default(string), string phase = default(string), string status = default(string), string priority = default(string), string risk = default(string), string riskDescription = default(string), string billable = default(string), string timeRecordable = default(string), string timeRecordType = default(string), long? hoursPerDay = default(long?), string mail = default(string), IList<CustomField> customFields = default(IList<CustomField>), IList<ProjectEmployeeForm> projectEmployees = default(IList<ProjectEmployeeForm>), long? permissionType = default(long?), string readPermissionProfiles = default(string), string readPermissionLogins = default(string), string writePermissionProfiles = default(string), string writePermissionLogins = default(string), string leadBudget = default(string), double? leadBudgetSum = default(double?), string leadAuthority = default(string), string leadNeed = default(string), string leadTime = default(string), long? salesPersonId = default(long?), string leadNotice = default(string), string interestedBudget = default(string), double? interestedBudgetSum = default(double?), string interestedAuthority = default(string), string interestedNeed = default(string), string interestedTime = default(string), string salesKontaktType = default(string), string salesInternalOrganisation = default(string), long? salesContractPerson = default(long?), string salesChannel = default(string), string salesCampaignName = default(string), string salesActivity = default(string), long? leadPersonId = default(long?), long? reminderDate = default(long?), string salesPhase = default(string), string salesStatus = default(string), string salesPriority = default(string), string salesRisk = default(string), long? salesReminderFrom = default(long?), long? salesReminderTo = default(long?), string salesDescription = default(string), string replacementProductName = default(string), string residualProductName = default(string), string competitionProductsName = default(string), long? contractObligation = default(long?), string salesPotenzial = default(string), bool? salesUpgrade = default(bool?), string servicePartnerName = default(string), string competitiveStrength = default(string))
        {
            Number = number;
            Name = name;
            Type = type;
            Type2 = type2;
            Description = description;
            ContactId = contactId;
            LegacyNumber = legacyNumber;
            InitiatorContactId = initiatorContactId;
            ContactPerson = contactPerson;
            OwnerUid = ownerUid;
            Workdays = workdays;
            StartTs = startTs;
            EndTs = endTs;
            DecisionTs = decisionTs;
            EstimatedHoursMode = estimatedHoursMode;
            EstimatedHours = estimatedHours;
            DimensionNumber = dimensionNumber;
            DimensionName = dimensionName;
            Phase = phase;
            Status = status;
            Priority = priority;
            Risk = risk;
            RiskDescription = riskDescription;
            Billable = billable;
            TimeRecordable = timeRecordable;
            TimeRecordType = timeRecordType;
            HoursPerDay = hoursPerDay;
            Mail = mail;
            CustomFields = customFields;
            ProjectEmployees = projectEmployees;
            PermissionType = permissionType;
            ReadPermissionProfiles = readPermissionProfiles;
            ReadPermissionLogins = readPermissionLogins;
            WritePermissionProfiles = writePermissionProfiles;
            WritePermissionLogins = writePermissionLogins;
            LeadBudget = leadBudget;
            LeadBudgetSum = leadBudgetSum;
            LeadAuthority = leadAuthority;
            LeadNeed = leadNeed;
            LeadTime = leadTime;
            SalesPersonId = salesPersonId;
            LeadNotice = leadNotice;
            InterestedBudget = interestedBudget;
            InterestedBudgetSum = interestedBudgetSum;
            InterestedAuthority = interestedAuthority;
            InterestedNeed = interestedNeed;
            InterestedTime = interestedTime;
            SalesKontaktType = salesKontaktType;
            SalesInternalOrganisation = salesInternalOrganisation;
            SalesContractPerson = salesContractPerson;
            SalesChannel = salesChannel;
            SalesCampaignName = salesCampaignName;
            SalesActivity = salesActivity;
            LeadPersonId = leadPersonId;
            ReminderDate = reminderDate;
            SalesPhase = salesPhase;
            SalesStatus = salesStatus;
            SalesPriority = salesPriority;
            SalesRisk = salesRisk;
            SalesReminderFrom = salesReminderFrom;
            SalesReminderTo = salesReminderTo;
            SalesDescription = salesDescription;
            ReplacementProductName = replacementProductName;
            ResidualProductName = residualProductName;
            CompetitionProductsName = competitionProductsName;
            ContractObligation = contractObligation;
            SalesPotenzial = salesPotenzial;
            SalesUpgrade = salesUpgrade;
            ServicePartnerName = servicePartnerName;
            CompetitiveStrength = competitiveStrength;
        }

        /// <summary>
        /// number
        /// </summary>
        [JsonProperty(PropertyName = "number")]
        public string Number { get; set; }

        /// <summary>
        /// name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// type (Projektbezug) . Possible values include: 'intern', 'extern'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// type2 (Projektart) - the allowable values depend on the project
        /// category. Please check the Scopevisio desktop application for all
        /// allowable values per category. The example values are for
        /// category "Kundenprojekt". Possible values include:
        /// 'Kundenauftrag', 'Lieferung', 'Bestellabwicklung',
        /// 'Leistungserbringung', 'Auftragserbringung', 'Sonstiges'
        /// </summary>
        [JsonProperty(PropertyName = "type2")]
        public string Type2 { get; set; }

        /// <summary>
        /// description (Projektbeschreibung)
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// contactId (Projektadressat)
        /// </summary>
        [JsonProperty(PropertyName = "contactId")]
        public long ContactId { get; set; }

        /// <summary>
        /// legacyNumber (ID Vorsystem). The Id of the project used in the
        /// previous system.
        /// </summary>
        [JsonProperty(PropertyName = "legacyNumber")]
        public string LegacyNumber { get; set; }

        /// <summary>
        /// project initiator (Projektträger)
        /// </summary>
        [JsonProperty(PropertyName = "initiatorContactId")]
        public long? InitiatorContactId { get; set; }

        /// <summary>
        /// contactPerson (Ansprechpartner beim Kunden/Lead/Interessenten).
        /// The contact id of the contact person for the project - the
        /// selected contact must be an employee of the project contact and
        /// the project contact must be main employer.
        /// </summary>
        [JsonProperty(PropertyName = "contactPerson")]
        public long? ContactPerson { get; set; }

        /// <summary>
        /// ownerUid (Projektinhaber). Uid of the user, who is the owner of
        /// this project. Refer to /users to retrieve the uid
        /// </summary>
        [JsonProperty(PropertyName = "ownerUid")]
        public string OwnerUid { get; set; }

        /// <summary>
        /// workdays (Arbeitstage). Please check the Scopevisio desktop
        /// application for all allowable values for workdays
        /// </summary>
        [JsonProperty(PropertyName = "workdays")]
        public double? Workdays { get; set; }

        /// <summary>
        /// Project start (Projektstart)
        /// </summary>
        [JsonProperty(PropertyName = "startTs")]
        public long? StartTs { get; set; }

        /// <summary>
        /// project end (Projektende)
        /// </summary>
        [JsonProperty(PropertyName = "endTs")]
        public long? EndTs { get; set; }

        /// <summary>
        /// Project decision timestamp (Entsch.zeitp.)
        /// </summary>
        [JsonProperty(PropertyName = "decisionTs")]
        public long? DecisionTs { get; set; }

        /// <summary>
        /// estimatedHoursMode (checbox Manuell). Toggle if estimated hours is
        /// set manually or not, 0 = false, 1 = true
        /// </summary>
        [JsonProperty(PropertyName = "estimatedHoursMode")]
        public bool? EstimatedHoursMode { get; set; }

        /// <summary>
        /// Estimated hours field is evaluated only if estimatedHoursMode is
        /// present and set to true
        /// </summary>
        [JsonProperty(PropertyName = "estimatedHours")]
        public double? EstimatedHours { get; set; }

        /// <summary>
        /// dimensionNumber (Projektkostenstelle)
        /// </summary>
        [JsonProperty(PropertyName = "dimensionNumber")]
        public long? DimensionNumber { get; set; }

        /// <summary>
        /// dimensionName (Projektkostenstelle) Name of the dimensionNumber.
        /// If not given, it is set to the project name.
        /// </summary>
        [JsonProperty(PropertyName = "dimensionName")]
        public string DimensionName { get; set; }

        /// <summary>
        /// phase (Projekt-Phase) - the allowable values depend on the project
        /// category. Please check the Scopevisio desktop application for all
        /// allowable values per category. The example values are for
        /// category "Kundenprojekt". Possible values include:
        /// 'Vorbereitung', 'Durchführung', 'Durchführung und
        /// Teilabrechnung', 'Abschluss', 'Schlußabrechnung', 'Bewertung',
        /// 'Zahlungsüberwachung'
        /// </summary>
        [JsonProperty(PropertyName = "phase")]
        public string Phase { get; set; }

        /// <summary>
        /// status (Projekt-Status) - the allowable values depend on the
        /// project category. Please checkthe Scopevisio desktop application
        /// for all allowable values per category. The example values are for
        /// category "Kundenprojekt". Possible values include: 'anstehend',
        /// 'gestartet', 'beendet', 'unterbrochen', 'zurückgestellt',
        /// 'abgebrochen', 'unbekannt'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// priority (Projekt-Priorität). Possible values include: 'niedrig',
        /// 'mittel', 'hoch', 'sehr hoch', 'sofort'
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public string Priority { get; set; }

        /// <summary>
        /// risk (Projekt-Risiko). Possible values include: 'niedrig',
        /// 'mittel', 'hoch', 'sehr hoch', 'unbekannt'
        /// </summary>
        [JsonProperty(PropertyName = "risk")]
        public string Risk { get; set; }

        /// <summary>
        /// riskDescription (Risikobeschreibung)
        /// </summary>
        [JsonProperty(PropertyName = "riskDescription")]
        public string RiskDescription { get; set; }

        /// <summary>
        /// billable (Fakturierbar). Possible values include: 'Ja', 'Nein',
        /// 'Noch zu genehmigen'
        /// </summary>
        [JsonProperty(PropertyName = "billable")]
        public string Billable { get; set; }

        /// <summary>
        /// timeRecordable (Zeiterfassung). Possible values include: 'Ja',
        /// 'Nein', 'Noch zu genehmigen'
        /// </summary>
        [JsonProperty(PropertyName = "timeRecordable")]
        public string TimeRecordable { get; set; }

        /// <summary>
        /// time record type (Zeiterfassung in...). Possible values include:
        /// 'Minuten', 'Stunden', 'Tage', 'Wochen', 'Jahren'
        /// </summary>
        [JsonProperty(PropertyName = "timeRecordType")]
        public string TimeRecordType { get; set; }

        /// <summary>
        /// hours per day (Stunden pro Arbeitstag)
        /// </summary>
        [JsonProperty(PropertyName = "hoursPerDay")]
        public long? HoursPerDay { get; set; }

        /// <summary>
        /// project email (E-Mail)
        /// </summary>
        [JsonProperty(PropertyName = "mail")]
        public string Mail { get; set; }

        /// <summary>
        /// custom fields (Benutzerdefinierte Felder)- these are available for
        /// projects only if your client supports sales projects
        /// </summary>
        [JsonProperty(PropertyName = "customFields")]
        public IList<CustomField> CustomFields { get; set; }

        /// <summary>
        /// project employees are all contacts involved in the project
        /// (Projektbeteiligte)
        /// </summary>
        [JsonProperty(PropertyName = "projectEmployees")]
        public IList<ProjectEmployeeForm> ProjectEmployees { get; set; }

        /// <summary>
        /// permissionType(Berechtigungen)0 = Öffentlich, 1 =
        /// Benutzerdefiniert, 2 = Persönlich
        /// </summary>
        [JsonProperty(PropertyName = "permissionType")]
        public long? PermissionType { get; set; }

        /// <summary>
        /// comma separated list of profiles for the read permissions,
        /// evaluated only if permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "readPermissionProfiles")]
        public string ReadPermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails for the read
        /// permissions, evaluated only if permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "readPermissionLogins")]
        public string ReadPermissionLogins { get; set; }

        /// <summary>
        /// comma separated list of profiles for full access, evaluated only
        /// if permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "writePermissionProfiles")]
        public string WritePermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails, evaluated only if
        /// permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "writePermissionLogins")]
        public string WritePermissionLogins { get; set; }

        /// <summary>
        /// Lead Bugdet.Please check your catalog in the Scopevisio desktop
        /// client for allowable values
        /// </summary>
        [JsonProperty(PropertyName = "leadBudget")]
        public string LeadBudget { get; set; }

        /// <summary>
        /// Lead Bugdet Sum
        /// </summary>
        [JsonProperty(PropertyName = "leadBudgetSum")]
        public double? LeadBudgetSum { get; set; }

        /// <summary>
        /// Lead Authority. Please check your catalog in the Scopevisio
        /// desktop client for allowable values
        /// </summary>
        [JsonProperty(PropertyName = "leadAuthority")]
        public string LeadAuthority { get; set; }

        /// <summary>
        /// Lead Need. Please check your catalog in the Scopevisio desktop
        /// client for allowable values
        /// </summary>
        [JsonProperty(PropertyName = "leadNeed")]
        public string LeadNeed { get; set; }

        /// <summary>
        /// Lead Time. Please check your catalog in the Scopevisio desktop
        /// client for allowable values
        /// </summary>
        [JsonProperty(PropertyName = "leadTime")]
        public string LeadTime { get; set; }

        /// <summary>
        /// salesPersonId (Vertriebsbeauftragter) - this must be the id of a
        /// user contact (Aus Benutzerkontakt)
        /// </summary>
        [JsonProperty(PropertyName = "salesPersonId")]
        public long? SalesPersonId { get; set; }

        /// <summary>
        /// leadNotice (Vertriebsinformationen)
        /// </summary>
        [JsonProperty(PropertyName = "leadNotice")]
        public string LeadNotice { get; set; }

        /// <summary>
        /// Interested Bugdet.Please check your catalog in the Scopevisio
        /// desktop client for allowable values. Set only when the project
        /// has "sphereInterested" set to true.
        /// </summary>
        [JsonProperty(PropertyName = "interestedBudget")]
        public string InterestedBudget { get; set; }

        /// <summary>
        /// Interested Bugdet Sum. Set only when the project has
        /// "sphereInterested" set to true. Please check your catalog in the
        /// Scopevisio desktop client for allowable values.
        /// </summary>
        [JsonProperty(PropertyName = "interestedBudgetSum")]
        public double? InterestedBudgetSum { get; set; }

        /// <summary>
        /// Interested Authority. Set only when the project has
        /// "sphereInterested" set to true. Please check your catalog in the
        /// Scopevisio desktop client for allowable values.
        /// </summary>
        [JsonProperty(PropertyName = "interestedAuthority")]
        public string InterestedAuthority { get; set; }

        /// <summary>
        /// Interested Need. Set only when the project has "sphereInterested"
        /// set to true. Please check your catalog in the Scopevisio desktop
        /// client for allowable values.
        /// </summary>
        [JsonProperty(PropertyName = "interestedNeed")]
        public string InterestedNeed { get; set; }

        /// <summary>
        /// Interested Time. Set only when the project has "sphereInterested"
        /// set to true. Please check your catalog in the Scopevisio desktop
        /// client for allowable values.
        /// </summary>
        [JsonProperty(PropertyName = "interestedTime")]
        public string InterestedTime { get; set; }

        /// <summary>
        /// salesKontaktType (Vertriebsquelle, Leadquelle)
        /// </summary>
        [JsonProperty(PropertyName = "salesKontaktType")]
        public string SalesKontaktType { get; set; }

        /// <summary>
        /// salesInternalOrganisation (Vertriebsorgansiation). Please check
        /// your catalog in the Scopevisio desktop client for allowable
        /// values. Possible values include: 'Vertriebsorganisation Süden',
        /// 'Vertriebsorganisation Westen', 'Vertriebsorganisation Norden',
        /// 'Vertriebsorganisation Osten'
        /// </summary>
        [JsonProperty(PropertyName = "salesInternalOrganisation")]
        public string SalesInternalOrganisation { get; set; }

        /// <summary>
        /// salesContractPerson (Entscheider). The contact must be an employee
        /// of the project contact (contactId).
        /// </summary>
        [JsonProperty(PropertyName = "salesContractPerson")]
        public long? SalesContractPerson { get; set; }

        /// <summary>
        /// salesChannel(Vertriebsweg). Please check your catalog in the
        /// Scopevisio desktop client for allowable values.
        /// </summary>
        [JsonProperty(PropertyName = "salesChannel")]
        public string SalesChannel { get; set; }

        /// <summary>
        /// salesCampaignName (Vertriebskampagne)
        /// </summary>
        [JsonProperty(PropertyName = "salesCampaignName")]
        public string SalesCampaignName { get; set; }

        /// <summary>
        /// salesActivity (Vertriebliche Folgeaktivität). Please check your
        /// catalog in the Scopevisio desktop client for allowable values.
        /// </summary>
        [JsonProperty(PropertyName = "salesActivity")]
        public string SalesActivity { get; set; }

        /// <summary>
        /// leadPersonId (Marketingbeauftragter).  This must be the id of a
        /// user contact (Aus Benutzerkontakt).
        /// </summary>
        [JsonProperty(PropertyName = "leadPersonId")]
        public long? LeadPersonId { get; set; }

        /// <summary>
        /// reminderDate (Wiedervorlage).
        /// </summary>
        [JsonProperty(PropertyName = "reminderDate")]
        public long? ReminderDate { get; set; }

        /// <summary>
        /// salesPhase (Vertriebsphase). Please check your catalog in the
        /// Scopevisio desktop client for allowable values.
        /// </summary>
        [JsonProperty(PropertyName = "salesPhase")]
        public string SalesPhase { get; set; }

        /// <summary>
        /// salesStatus (Vertriebsstatus). Please check your catalog in the
        /// Scopevisio desktop client for allowable values.
        /// </summary>
        [JsonProperty(PropertyName = "salesStatus")]
        public string SalesStatus { get; set; }

        /// <summary>
        /// salesPriority (Vertriebspriorität). Please check your catalog in
        /// the Scopevisio desktop client for allowable values.
        /// </summary>
        [JsonProperty(PropertyName = "salesPriority")]
        public string SalesPriority { get; set; }

        /// <summary>
        /// salesRisk (Vertriebsrisiko). Please check your catalog in the
        /// Scopevisio desktop client for allowable values.
        /// </summary>
        [JsonProperty(PropertyName = "salesRisk")]
        public string SalesRisk { get; set; }

        /// <summary>
        /// salesReminderFrom (Wiedervorlagen nächste).
        /// </summary>
        [JsonProperty(PropertyName = "salesReminderFrom")]
        public long? SalesReminderFrom { get; set; }

        /// <summary>
        /// salesReminderTo (Wiedervorlagen weitere).
        /// </summary>
        [JsonProperty(PropertyName = "salesReminderTo")]
        public long? SalesReminderTo { get; set; }

        /// <summary>
        /// salesDescription (Vertriebsprojektbeschreibung).
        /// </summary>
        [JsonProperty(PropertyName = "salesDescription")]
        public string SalesDescription { get; set; }

        /// <summary>
        /// replacementProductName (Abzulösendes Bestandsprodukt). Please
        /// check your catalog in the Scopevisio desktop client for allowable
        /// values.
        /// </summary>
        [JsonProperty(PropertyName = "replacementProductName")]
        public string ReplacementProductName { get; set; }

        /// <summary>
        /// residualProductName (Verbleibende Bestandsprodukt). Please check
        /// your catalog in the Scopevisio desktop client for allowable
        /// values. To set more than one poduct use "¤¤¤" as a separator.
        /// </summary>
        [JsonProperty(PropertyName = "residualProductName")]
        public string ResidualProductName { get; set; }

        /// <summary>
        /// competitionProductsName (Wettbewerbsprodukte). Please check your
        /// catalog in the Scopevisio desktop client for allowable values. To
        /// set more than one poduct use "¤¤¤" as a separator.
        /// </summary>
        [JsonProperty(PropertyName = "competitionProductsName")]
        public string CompetitionProductsName { get; set; }

        /// <summary>
        /// contractObligation (Vetragsbindung).
        /// </summary>
        [JsonProperty(PropertyName = "contractObligation")]
        public long? ContractObligation { get; set; }

        /// <summary>
        /// salesPotenzial (Vertriebsinfo).
        /// </summary>
        [JsonProperty(PropertyName = "salesPotenzial")]
        public string SalesPotenzial { get; set; }

        /// <summary>
        /// salesUpgrade (Upgrade).
        /// </summary>
        [JsonProperty(PropertyName = "salesUpgrade")]
        public bool? SalesUpgrade { get; set; }

        /// <summary>
        /// servicePartnerName (Betreuender Servicepartner). Please check your
        /// catalog in the Scopevisio desktop client for allowable values.
        /// </summary>
        [JsonProperty(PropertyName = "servicePartnerName")]
        public string ServicePartnerName { get; set; }

        /// <summary>
        /// competitiveStrength (Wettbewerbsstärke). Please check your catalog
        /// in the Scopevisio desktop client for allowable values.
        /// </summary>
        [JsonProperty(PropertyName = "competitiveStrength")]
        public string CompetitiveStrength { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (this.CustomFields != null)
            {
                foreach (var element in this.CustomFields)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.ProjectEmployees != null)
            {
                foreach (var element1 in this.ProjectEmployees)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
