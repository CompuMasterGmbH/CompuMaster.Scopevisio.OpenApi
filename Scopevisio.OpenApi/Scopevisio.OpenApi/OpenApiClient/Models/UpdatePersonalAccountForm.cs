// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace CompuMaster.Scopevisio.OpenScopeApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class UpdatePersonalAccountForm
    {
        /// <summary>
        /// Initializes a new instance of the UpdatePersonalAccountForm class.
        /// </summary>
        public UpdatePersonalAccountForm() { }

        /// <summary>
        /// Initializes a new instance of the UpdatePersonalAccountForm class.
        /// </summary>
        public UpdatePersonalAccountForm(long? numberRangeNumber = default(long?), string group = default(string), string vatCode = default(string), string paymentType = default(string), string vatNumber = default(string), string vatId = default(string), string currency = default(string), string language = default(string), long? paymentTermId = default(long?), PaymentTermForm paymentTermForm = default(PaymentTermForm))
        {
            NumberRangeNumber = numberRangeNumber;
            Group = group;
            VatCode = vatCode;
            PaymentType = paymentType;
            VatNumber = vatNumber;
            VatId = vatId;
            Currency = currency;
            Language = language;
            PaymentTermId = paymentTermId;
            PaymentTermForm = paymentTermForm;
        }

        /// <summary>
        /// numberRangeNumber (Kreditoren-/Debitoren-Nummernkreis), the number
        /// of the number range for the personal account. If
        /// personalAccountNumber is not provided, the first available number
        /// for the provided numberRangeNumber is generated for the personal
        /// account.
        /// If numberRangeNumber not provided,  the first found number range
        /// will be used. We recommend setting "numberRangeNumber" if more
        /// than one number ranges for this account type(debitor or kreditor)
        /// exist otherwise errors may occur if the number range is full.
        /// The default number ranges in the Scopevisio desktop applications
        /// are "2" for debitors and "3" for creditors
        /// </summary>
        [JsonProperty(PropertyName = "numberRangeNumber")]
        public long? NumberRangeNumber { get; set; }

        /// <summary>
        /// group (Kundengruppe/Kreditorengruppe), if the given group does not
        /// exist, it is created and assigned to the personal account.
        /// </summary>
        [JsonProperty(PropertyName = "group")]
        public string Group { get; set; }

        /// <summary>
        /// vatCode(Steuerkennzeichen) for the personal account. Please see
        /// vat matrix (Steuermatrix) in the Scopevisio client if you wish
        /// other than the standard allowable values. Possible values
        /// include: 'INL', 'Drittland', 'EUmID', 'EUoID'
        /// </summary>
        [JsonProperty(PropertyName = "vatCode")]
        public string VatCode { get; set; }

        /// <summary>
        /// paymentType(Zahlungsart) for the pesonal account. Possible values
        /// include: 'Vorkasse', 'Überweisung', 'PayPal', 'Nachnahme',
        /// 'Einzugsermächtigung', 'Rechnung', 'EC-Karte',
        /// 'Abbuchungsgenehmigung', 'Bar', 'Kreditkarte'
        /// </summary>
        [JsonProperty(PropertyName = "paymentType")]
        public string PaymentType { get; set; }

        /// <summary>
        /// vatNumber(Steuernummer)
        /// </summary>
        [JsonProperty(PropertyName = "vatNumber")]
        public string VatNumber { get; set; }

        /// <summary>
        /// vatId (Umsatzsteuer-ID)
        /// </summary>
        [JsonProperty(PropertyName = "vatId")]
        public string VatId { get; set; }

        /// <summary>
        /// currency(Währung), the ISO 4217 alphabetic currency code
        /// </summary>
        [JsonProperty(PropertyName = "currency")]
        public string Currency { get; set; }

        /// <summary>
        /// language(Sprache), please check the Scopeviso client application
        /// for allowable values
        /// </summary>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <summary>
        /// paymentTermId (Zahlungsbedingung id), the id of the wished payment
        /// term for the personal account. If an existing paymentTerm should
        /// be assigned to the personal account, then use "paymentTermId" .
        /// If a new paymentTerm should be created, use the parameter
        /// "paymentTermForm". If both "paymentTermId" and "paymentTermForm"
        /// are provided, a payment term with the given "paymentTermId" is
        /// searched. If not found,the "paymentTermForm" is used. If a
        /// payment term with the given name is found, then it is assigned to
        /// the personal account, a new payment term is created otherwise.
        /// </summary>
        [JsonProperty(PropertyName = "paymentTermId")]
        public long? PaymentTermId { get; set; }

        /// <summary>
        /// paymentTermForm (Zahlungsbedingung), if an existing paymentTerm
        /// should be assigned to the personal account, then paymentTermId
        /// should be used. If a new paymentTerm should be created, use the
        /// parameter "paymentTermForm".If both "paymentTermId" and
        /// "paymentTermForm" are provided, a payment term with the given
        /// "paymentTermId" is searched. If not found,the "paymentTermForm"
        /// is used. If a payment term with the given name is found, then it
        /// is assigned to the personal account, a new payment term is
        /// created otherwise.
        /// </summary>
        [JsonProperty(PropertyName = "paymentTermForm")]
        public PaymentTermForm PaymentTermForm { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (this.PaymentTermForm != null)
            {
                this.PaymentTermForm.Validate();
            }
        }
    }
}
