/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CompuMaster.Scopevisio.OpenApi.Client.OpenAPIDateConverter;

namespace CompuMaster.Scopevisio.OpenApi.Model
{
    /// <summary>
    /// Mandatory if creating new outgoing invoice documents.
    /// </summary>
    [DataContract]
    public partial class PositionsForm :  IEquatable<PositionsForm>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PositionsForm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PositionsForm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PositionsForm" /> class.
        /// </summary>
        /// <param name="copyProductsToPositions">Set to true if you want to use the existing products to create the positions. The product values are used only if the user has not provided values himself. E.g. if the singleAmount has been provided in the request body, the singleAmount from product is not used. (default to false).</param>
        /// <param name="positions">positionsForm. Positions for outgoing invoice (required).</param>
        public PositionsForm(bool copyProductsToPositions = false, List<OutgoingInvoicePositionForm> positions = default(List<OutgoingInvoicePositionForm>))
        {
            // to ensure "positions" is required (not null)
            if (positions == null)
            {
                throw new InvalidDataException("positions is a required property for PositionsForm and cannot be null");
            }
            else
            {
                this.Positions = positions;
            }
            
            // use default value if no "copyProductsToPositions" provided
            if (copyProductsToPositions == null)
            {
                this.CopyProductsToPositions = false;
            }
            else
            {
                this.CopyProductsToPositions = copyProductsToPositions;
            }
        }
        
        /// <summary>
        /// Set to true if you want to use the existing products to create the positions. The product values are used only if the user has not provided values himself. E.g. if the singleAmount has been provided in the request body, the singleAmount from product is not used.
        /// </summary>
        /// <value>Set to true if you want to use the existing products to create the positions. The product values are used only if the user has not provided values himself. E.g. if the singleAmount has been provided in the request body, the singleAmount from product is not used.</value>
        [DataMember(Name="copyProductsToPositions", EmitDefaultValue=false)]
        public bool CopyProductsToPositions { get; set; }

        /// <summary>
        /// positionsForm. Positions for outgoing invoice
        /// </summary>
        /// <value>positionsForm. Positions for outgoing invoice</value>
        [DataMember(Name="positions", EmitDefaultValue=true)]
        public List<OutgoingInvoicePositionForm> Positions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PositionsForm {\n");
            sb.Append("  CopyProductsToPositions: ").Append(CopyProductsToPositions).Append("\n");
            sb.Append("  Positions: ").Append(Positions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PositionsForm);
        }

        /// <summary>
        /// Returns true if PositionsForm instances are equal
        /// </summary>
        /// <param name="input">Instance of PositionsForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PositionsForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CopyProductsToPositions == input.CopyProductsToPositions ||
                    (this.CopyProductsToPositions != null &&
                    this.CopyProductsToPositions.Equals(input.CopyProductsToPositions))
                ) && 
                (
                    this.Positions == input.Positions ||
                    this.Positions != null &&
                    input.Positions != null &&
                    this.Positions.SequenceEqual(input.Positions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CopyProductsToPositions != null)
                    hashCode = hashCode * 59 + this.CopyProductsToPositions.GetHashCode();
                if (this.Positions != null)
                    hashCode = hashCode * 59 + this.Positions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
