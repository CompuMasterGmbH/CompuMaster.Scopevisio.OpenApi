/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CompuMaster.Scopevisio.OpenApi.Client.OpenAPIDateConverter;

namespace CompuMaster.Scopevisio.OpenApi.Model
{
    /// <summary>
    /// ProductForm
    /// </summary>
    [DataContract]
    public partial class ProductForm :  IEquatable<ProductForm>, IValidatableObject
    {
        /// <summary>
        /// typeDisplay(Produktart), default value is \&quot;Ware\&quot; if not set by the user.
        /// </summary>
        /// <value>typeDisplay(Produktart), default value is \&quot;Ware\&quot; if not set by the user.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeDisplayEnum
        {
            /// <summary>
            /// Enum Ware for value: Ware
            /// </summary>
            [EnumMember(Value = "Ware")]
            Ware = 1,

            /// <summary>
            /// Enum Material for value: Material
            /// </summary>
            [EnumMember(Value = "Material")]
            Material = 2,

            /// <summary>
            /// Enum Leistung for value: Leistung
            /// </summary>
            [EnumMember(Value = "Leistung")]
            Leistung = 3,

            /// <summary>
            /// Enum Recht for value: Recht
            /// </summary>
            [EnumMember(Value = "Recht")]
            Recht = 4

        }

        /// <summary>
        /// typeDisplay(Produktart), default value is \&quot;Ware\&quot; if not set by the user.
        /// </summary>
        /// <value>typeDisplay(Produktart), default value is \&quot;Ware\&quot; if not set by the user.</value>
        [DataMember(Name="typeDisplay", EmitDefaultValue=false)]
        public TypeDisplayEnum? TypeDisplay { get; set; }
        /// <summary>
        /// invoicePostingMode(Zuordnung Rechnungsart), default value is \&quot;Einzel-/Teil-/Schlussrechnung\&quot; if not set by the user  
        /// </summary>
        /// <value>invoicePostingMode(Zuordnung Rechnungsart), default value is \&quot;Einzel-/Teil-/Schlussrechnung\&quot; if not set by the user  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InvoicePostingModeEnum
        {
            /// <summary>
            /// Enum EinzelTeilSchlussrechnung for value: Einzel-/Teil-/Schlussrechnung
            /// </summary>
            [EnumMember(Value = "Einzel-/Teil-/Schlussrechnung")]
            EinzelTeilSchlussrechnung = 1,

            /// <summary>
            /// Enum AnzahlungsAbschlagsrechnung for value: Anzahlungs-/Abschlagsrechnung
            /// </summary>
            [EnumMember(Value = "Anzahlungs-/Abschlagsrechnung")]
            AnzahlungsAbschlagsrechnung = 2

        }

        /// <summary>
        /// invoicePostingMode(Zuordnung Rechnungsart), default value is \&quot;Einzel-/Teil-/Schlussrechnung\&quot; if not set by the user  
        /// </summary>
        /// <value>invoicePostingMode(Zuordnung Rechnungsart), default value is \&quot;Einzel-/Teil-/Schlussrechnung\&quot; if not set by the user  </value>
        [DataMember(Name="invoicePostingMode", EmitDefaultValue=false)]
        public InvoicePostingModeEnum? InvoicePostingMode { get; set; }
        /// <summary>
        /// revenueAccountMode(0 &#x3D; Standard-Erlöskonten verwenden, 1 &#x3D; Manuelle Erlöskonten verwenden). If revenue accounts are provided (\&quot;revenueAccount0\&quot;, etc.), it is set automatically to 1. Default value is 0 Standard-Erlöskonten verwenden) if not set by the user explicitly. 
        /// </summary>
        /// <value>revenueAccountMode(0 &#x3D; Standard-Erlöskonten verwenden, 1 &#x3D; Manuelle Erlöskonten verwenden). If revenue accounts are provided (\&quot;revenueAccount0\&quot;, etc.), it is set automatically to 1. Default value is 0 Standard-Erlöskonten verwenden) if not set by the user explicitly. </value>
        public enum RevenueAccountModeEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1

        }

        /// <summary>
        /// revenueAccountMode(0 &#x3D; Standard-Erlöskonten verwenden, 1 &#x3D; Manuelle Erlöskonten verwenden). If revenue accounts are provided (\&quot;revenueAccount0\&quot;, etc.), it is set automatically to 1. Default value is 0 Standard-Erlöskonten verwenden) if not set by the user explicitly. 
        /// </summary>
        /// <value>revenueAccountMode(0 &#x3D; Standard-Erlöskonten verwenden, 1 &#x3D; Manuelle Erlöskonten verwenden). If revenue accounts are provided (\&quot;revenueAccount0\&quot;, etc.), it is set automatically to 1. Default value is 0 Standard-Erlöskonten verwenden) if not set by the user explicitly. </value>
        [DataMember(Name="revenueAccountMode", EmitDefaultValue=false)]
        public RevenueAccountModeEnum? RevenueAccountMode { get; set; }
        /// <summary>
        /// Unit(Einheit). For more untits please check the Scopevisio client application, catalog Abrechnungsbelege -&gt; Einheit.
        /// </summary>
        /// <value>Unit(Einheit). For more untits please check the Scopevisio client application, catalog Abrechnungsbelege -&gt; Einheit.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitEnum
        {
            /// <summary>
            /// Enum Gramm for value: Gramm
            /// </summary>
            [EnumMember(Value = "Gramm")]
            Gramm = 1,

            /// <summary>
            /// Enum Kartons for value: Kartons
            /// </summary>
            [EnumMember(Value = "Kartons")]
            Kartons = 2,

            /// <summary>
            /// Enum Kilogramm for value: Kilogramm
            /// </summary>
            [EnumMember(Value = "Kilogramm")]
            Kilogramm = 3,

            /// <summary>
            /// Enum Kilometer for value: Kilometer
            /// </summary>
            [EnumMember(Value = "Kilometer")]
            Kilometer = 4,

            /// <summary>
            /// Enum Kisten for value: Kisten
            /// </summary>
            [EnumMember(Value = "Kisten")]
            Kisten = 5,

            /// <summary>
            /// Enum Kubikmeter for value: Kubikmeter
            /// </summary>
            [EnumMember(Value = "Kubikmeter")]
            Kubikmeter = 6,

            /// <summary>
            /// Enum Liter for value: Liter
            /// </summary>
            [EnumMember(Value = "Liter")]
            Liter = 7,

            /// <summary>
            /// Enum Meter for value: Meter
            /// </summary>
            [EnumMember(Value = "Meter")]
            Meter = 8,

            /// <summary>
            /// Enum Miligramm for value: Miligramm
            /// </summary>
            [EnumMember(Value = "Miligramm")]
            Miligramm = 9,

            /// <summary>
            /// Enum Mililiter for value: Mililiter
            /// </summary>
            [EnumMember(Value = "Mililiter")]
            Mililiter = 10,

            /// <summary>
            /// Enum Minuten for value: Minuten
            /// </summary>
            [EnumMember(Value = "Minuten")]
            Minuten = 11,

            /// <summary>
            /// Enum Monate for value: Monate
            /// </summary>
            [EnumMember(Value = "Monate")]
            Monate = 12,

            /// <summary>
            /// Enum Paket for value: Paket
            /// </summary>
            [EnumMember(Value = "Paket")]
            Paket = 13,

            /// <summary>
            /// Enum Paletten for value: Paletten
            /// </summary>
            [EnumMember(Value = "Paletten")]
            Paletten = 14,

            /// <summary>
            /// Enum Pauschale for value: Pauschale
            /// </summary>
            [EnumMember(Value = "Pauschale")]
            Pauschale = 15,

            /// <summary>
            /// Enum Quadratmeter for value: Quadratmeter
            /// </summary>
            [EnumMember(Value = "Quadratmeter")]
            Quadratmeter = 16,

            /// <summary>
            /// Enum Stck for value: Stück
            /// </summary>
            [EnumMember(Value = "Stück")]
            Stck = 17,

            /// <summary>
            /// Enum Stunden for value: Stunden
            /// </summary>
            [EnumMember(Value = "Stunden")]
            Stunden = 18,

            /// <summary>
            /// Enum Tage for value: Tage
            /// </summary>
            [EnumMember(Value = "Tage")]
            Tage = 19,

            /// <summary>
            /// Enum Tonnen for value: Tonnen
            /// </summary>
            [EnumMember(Value = "Tonnen")]
            Tonnen = 20

        }

        /// <summary>
        /// Unit(Einheit). For more untits please check the Scopevisio client application, catalog Abrechnungsbelege -&gt; Einheit.
        /// </summary>
        /// <value>Unit(Einheit). For more untits please check the Scopevisio client application, catalog Abrechnungsbelege -&gt; Einheit.</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public UnitEnum Unit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductForm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductForm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductForm" /> class.
        /// </summary>
        /// <param name="number">number(Produktnummer). \&quot;number\&quot; is a mandatory field when saving a product. If a new product is created and no \&quot;number\&quot; provided a value is generated and assigned to the product automatically..</param>
        /// <param name="name">name(Bezeichnung).</param>
        /// <param name="description">description(Beschreibung).</param>
        /// <param name="typeDisplay">typeDisplay(Produktart), default value is \&quot;Ware\&quot; if not set by the user..</param>
        /// <param name="invoicePostingMode">invoicePostingMode(Zuordnung Rechnungsart), default value is \&quot;Einzel-/Teil-/Schlussrechnung\&quot; if not set by the user  .</param>
        /// <param name="taxRate">taxRate(Steuersatz), default value is 0% if not set by the user..</param>
        /// <param name="revenueAccountMode">revenueAccountMode(0 &#x3D; Standard-Erlöskonten verwenden, 1 &#x3D; Manuelle Erlöskonten verwenden). If revenue accounts are provided (\&quot;revenueAccount0\&quot;, etc.), it is set automatically to 1. Default value is 0 Standard-Erlöskonten verwenden) if not set by the user explicitly. .</param>
        /// <param name="revenueAccount0">revenueAccount0(Manuelle erlöskonten verwenden - Inland).</param>
        /// <param name="revenueAccount1">revenueAccount1(Manuelle erlöskonten verwenden - EU Ausland).</param>
        /// <param name="revenueAccount2">revenueAccount2(Manuelle erlöskonten verwenden - Ausland).</param>
        /// <param name="revenueAccount3">revenueAccount3(Manuelle erlöskonten verwenden - Abschlagsrechnungen).</param>
        /// <param name="unit">Unit(Einheit). For more untits please check the Scopevisio client application, catalog Abrechnungsbelege -&gt; Einheit. (required).</param>
        /// <param name="asIfSold">asIfSold(As-if-sold) (default to false).</param>
        /// <param name="billable">billable(Fakturierbar) (default to false).</param>
        /// <param name="locked">locked(Gesperrt) (default to false).</param>
        /// <param name="planValue">planValue(Planwert).</param>
        /// <param name="costPrice">costPrice(Einkaufspreis).</param>
        /// <param name="singleAmount">singleAmount(Netto Preisgruppe 1).</param>
        /// <param name="singleAmount2">singleAmount2(Netto Preisgruppe 2).</param>
        /// <param name="singleAmount3">singleAmount3(Netto Preisgruppe 3).</param>
        /// <param name="singleAmountGross">singleAmountGross(Brutto Preisgruppe 1).</param>
        /// <param name="singleAmountGross2">singleAmountGross2(Brutto Preisgruppe 2).</param>
        /// <param name="singleAmountGross3">singleAmountGross3(Brutto Preisgruppe 3).</param>
        /// <param name="nameLng1">nameLng1(Englisch Bezeichnung).</param>
        /// <param name="descriptionLng1">descriptionLng1(Englisch Beschreibung).</param>
        /// <param name="productGroupName">productGroupName(Produktgruppen).</param>
        public ProductForm(string number = default(string), string name = default(string), string description = default(string), TypeDisplayEnum? typeDisplay = default(TypeDisplayEnum?), InvoicePostingModeEnum? invoicePostingMode = default(InvoicePostingModeEnum?), decimal taxRate = default(decimal), RevenueAccountModeEnum? revenueAccountMode = default(RevenueAccountModeEnum?), string revenueAccount0 = default(string), string revenueAccount1 = default(string), string revenueAccount2 = default(string), string revenueAccount3 = default(string), UnitEnum unit = default(UnitEnum), bool asIfSold = false, bool billable = false, bool locked = false, decimal planValue = default(decimal), decimal costPrice = default(decimal), decimal singleAmount = default(decimal), decimal singleAmount2 = default(decimal), decimal singleAmount3 = default(decimal), decimal singleAmountGross = default(decimal), decimal singleAmountGross2 = default(decimal), decimal singleAmountGross3 = default(decimal), string nameLng1 = default(string), string descriptionLng1 = default(string), string productGroupName = default(string))
        {
            // to ensure "unit" is required (not null)
            if (unit == null)
            {
                throw new InvalidDataException("unit is a required property for ProductForm and cannot be null");
            }
            else
            {
                this.Unit = unit;
            }
            
            this.Number = number;
            this.Name = name;
            this.Description = description;
            this.TypeDisplay = typeDisplay;
            this.InvoicePostingMode = invoicePostingMode;
            this.TaxRate = taxRate;
            this.RevenueAccountMode = revenueAccountMode;
            this.RevenueAccount0 = revenueAccount0;
            this.RevenueAccount1 = revenueAccount1;
            this.RevenueAccount2 = revenueAccount2;
            this.RevenueAccount3 = revenueAccount3;
            // use default value if no "asIfSold" provided
            if (asIfSold == null)
            {
                this.AsIfSold = false;
            }
            else
            {
                this.AsIfSold = asIfSold;
            }
            // use default value if no "billable" provided
            if (billable == null)
            {
                this.Billable = false;
            }
            else
            {
                this.Billable = billable;
            }
            // use default value if no "locked" provided
            if (locked == null)
            {
                this.Locked = false;
            }
            else
            {
                this.Locked = locked;
            }
            this.PlanValue = planValue;
            this.CostPrice = costPrice;
            this.SingleAmount = singleAmount;
            this.SingleAmount2 = singleAmount2;
            this.SingleAmount3 = singleAmount3;
            this.SingleAmountGross = singleAmountGross;
            this.SingleAmountGross2 = singleAmountGross2;
            this.SingleAmountGross3 = singleAmountGross3;
            this.NameLng1 = nameLng1;
            this.DescriptionLng1 = descriptionLng1;
            this.ProductGroupName = productGroupName;
        }
        
        /// <summary>
        /// number(Produktnummer). \&quot;number\&quot; is a mandatory field when saving a product. If a new product is created and no \&quot;number\&quot; provided a value is generated and assigned to the product automatically.
        /// </summary>
        /// <value>number(Produktnummer). \&quot;number\&quot; is a mandatory field when saving a product. If a new product is created and no \&quot;number\&quot; provided a value is generated and assigned to the product automatically.</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// name(Bezeichnung)
        /// </summary>
        /// <value>name(Bezeichnung)</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// description(Beschreibung)
        /// </summary>
        /// <value>description(Beschreibung)</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// type(Produkttyp nummerisch) \&quot;type\&quot; is set automtically on the basis of \&quot;typeDisplay\&quot;. 
        /// </summary>
        /// <value>type(Produkttyp nummerisch) \&quot;type\&quot; is set automtically on the basis of \&quot;typeDisplay\&quot;. </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public long Type { get; private set; }



        /// <summary>
        /// taxRate(Steuersatz), default value is 0% if not set by the user.
        /// </summary>
        /// <value>taxRate(Steuersatz), default value is 0% if not set by the user.</value>
        [DataMember(Name="taxRate", EmitDefaultValue=false)]
        public decimal TaxRate { get; set; }


        /// <summary>
        /// revenueAccount0(Manuelle erlöskonten verwenden - Inland)
        /// </summary>
        /// <value>revenueAccount0(Manuelle erlöskonten verwenden - Inland)</value>
        [DataMember(Name="revenueAccount0", EmitDefaultValue=false)]
        public string RevenueAccount0 { get; set; }

        /// <summary>
        /// revenueAccount1(Manuelle erlöskonten verwenden - EU Ausland)
        /// </summary>
        /// <value>revenueAccount1(Manuelle erlöskonten verwenden - EU Ausland)</value>
        [DataMember(Name="revenueAccount1", EmitDefaultValue=false)]
        public string RevenueAccount1 { get; set; }

        /// <summary>
        /// revenueAccount2(Manuelle erlöskonten verwenden - Ausland)
        /// </summary>
        /// <value>revenueAccount2(Manuelle erlöskonten verwenden - Ausland)</value>
        [DataMember(Name="revenueAccount2", EmitDefaultValue=false)]
        public string RevenueAccount2 { get; set; }

        /// <summary>
        /// revenueAccount3(Manuelle erlöskonten verwenden - Abschlagsrechnungen)
        /// </summary>
        /// <value>revenueAccount3(Manuelle erlöskonten verwenden - Abschlagsrechnungen)</value>
        [DataMember(Name="revenueAccount3", EmitDefaultValue=false)]
        public string RevenueAccount3 { get; set; }


        /// <summary>
        /// asIfSold(As-if-sold)
        /// </summary>
        /// <value>asIfSold(As-if-sold)</value>
        [DataMember(Name="asIfSold", EmitDefaultValue=false)]
        public bool AsIfSold { get; set; }

        /// <summary>
        /// billable(Fakturierbar)
        /// </summary>
        /// <value>billable(Fakturierbar)</value>
        [DataMember(Name="billable", EmitDefaultValue=false)]
        public bool Billable { get; set; }

        /// <summary>
        /// locked(Gesperrt)
        /// </summary>
        /// <value>locked(Gesperrt)</value>
        [DataMember(Name="locked", EmitDefaultValue=false)]
        public bool Locked { get; set; }

        /// <summary>
        /// planValue(Planwert)
        /// </summary>
        /// <value>planValue(Planwert)</value>
        [DataMember(Name="planValue", EmitDefaultValue=false)]
        public decimal PlanValue { get; set; }

        /// <summary>
        /// costPrice(Einkaufspreis)
        /// </summary>
        /// <value>costPrice(Einkaufspreis)</value>
        [DataMember(Name="costPrice", EmitDefaultValue=false)]
        public decimal CostPrice { get; set; }

        /// <summary>
        /// singleAmount(Netto Preisgruppe 1)
        /// </summary>
        /// <value>singleAmount(Netto Preisgruppe 1)</value>
        [DataMember(Name="singleAmount", EmitDefaultValue=false)]
        public decimal SingleAmount { get; set; }

        /// <summary>
        /// singleAmount2(Netto Preisgruppe 2)
        /// </summary>
        /// <value>singleAmount2(Netto Preisgruppe 2)</value>
        [DataMember(Name="singleAmount2", EmitDefaultValue=false)]
        public decimal SingleAmount2 { get; set; }

        /// <summary>
        /// singleAmount3(Netto Preisgruppe 3)
        /// </summary>
        /// <value>singleAmount3(Netto Preisgruppe 3)</value>
        [DataMember(Name="singleAmount3", EmitDefaultValue=false)]
        public decimal SingleAmount3 { get; set; }

        /// <summary>
        /// singleAmountGross(Brutto Preisgruppe 1)
        /// </summary>
        /// <value>singleAmountGross(Brutto Preisgruppe 1)</value>
        [DataMember(Name="singleAmountGross", EmitDefaultValue=false)]
        public decimal SingleAmountGross { get; set; }

        /// <summary>
        /// singleAmountGross2(Brutto Preisgruppe 2)
        /// </summary>
        /// <value>singleAmountGross2(Brutto Preisgruppe 2)</value>
        [DataMember(Name="singleAmountGross2", EmitDefaultValue=false)]
        public decimal SingleAmountGross2 { get; set; }

        /// <summary>
        /// singleAmountGross3(Brutto Preisgruppe 3)
        /// </summary>
        /// <value>singleAmountGross3(Brutto Preisgruppe 3)</value>
        [DataMember(Name="singleAmountGross3", EmitDefaultValue=false)]
        public decimal SingleAmountGross3 { get; set; }

        /// <summary>
        /// nameLng1(Englisch Bezeichnung)
        /// </summary>
        /// <value>nameLng1(Englisch Bezeichnung)</value>
        [DataMember(Name="nameLng1", EmitDefaultValue=false)]
        public string NameLng1 { get; set; }

        /// <summary>
        /// descriptionLng1(Englisch Beschreibung)
        /// </summary>
        /// <value>descriptionLng1(Englisch Beschreibung)</value>
        [DataMember(Name="descriptionLng1", EmitDefaultValue=false)]
        public string DescriptionLng1 { get; set; }

        /// <summary>
        /// productGroupName(Produktgruppen)
        /// </summary>
        /// <value>productGroupName(Produktgruppen)</value>
        [DataMember(Name="productGroupName", EmitDefaultValue=false)]
        public string ProductGroupName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductForm {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeDisplay: ").Append(TypeDisplay).Append("\n");
            sb.Append("  InvoicePostingMode: ").Append(InvoicePostingMode).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  RevenueAccountMode: ").Append(RevenueAccountMode).Append("\n");
            sb.Append("  RevenueAccount0: ").Append(RevenueAccount0).Append("\n");
            sb.Append("  RevenueAccount1: ").Append(RevenueAccount1).Append("\n");
            sb.Append("  RevenueAccount2: ").Append(RevenueAccount2).Append("\n");
            sb.Append("  RevenueAccount3: ").Append(RevenueAccount3).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  AsIfSold: ").Append(AsIfSold).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  PlanValue: ").Append(PlanValue).Append("\n");
            sb.Append("  CostPrice: ").Append(CostPrice).Append("\n");
            sb.Append("  SingleAmount: ").Append(SingleAmount).Append("\n");
            sb.Append("  SingleAmount2: ").Append(SingleAmount2).Append("\n");
            sb.Append("  SingleAmount3: ").Append(SingleAmount3).Append("\n");
            sb.Append("  SingleAmountGross: ").Append(SingleAmountGross).Append("\n");
            sb.Append("  SingleAmountGross2: ").Append(SingleAmountGross2).Append("\n");
            sb.Append("  SingleAmountGross3: ").Append(SingleAmountGross3).Append("\n");
            sb.Append("  NameLng1: ").Append(NameLng1).Append("\n");
            sb.Append("  DescriptionLng1: ").Append(DescriptionLng1).Append("\n");
            sb.Append("  ProductGroupName: ").Append(ProductGroupName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductForm);
        }

        /// <summary>
        /// Returns true if ProductForm instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TypeDisplay == input.TypeDisplay ||
                    (this.TypeDisplay != null &&
                    this.TypeDisplay.Equals(input.TypeDisplay))
                ) && 
                (
                    this.InvoicePostingMode == input.InvoicePostingMode ||
                    (this.InvoicePostingMode != null &&
                    this.InvoicePostingMode.Equals(input.InvoicePostingMode))
                ) && 
                (
                    this.TaxRate == input.TaxRate ||
                    (this.TaxRate != null &&
                    this.TaxRate.Equals(input.TaxRate))
                ) && 
                (
                    this.RevenueAccountMode == input.RevenueAccountMode ||
                    (this.RevenueAccountMode != null &&
                    this.RevenueAccountMode.Equals(input.RevenueAccountMode))
                ) && 
                (
                    this.RevenueAccount0 == input.RevenueAccount0 ||
                    (this.RevenueAccount0 != null &&
                    this.RevenueAccount0.Equals(input.RevenueAccount0))
                ) && 
                (
                    this.RevenueAccount1 == input.RevenueAccount1 ||
                    (this.RevenueAccount1 != null &&
                    this.RevenueAccount1.Equals(input.RevenueAccount1))
                ) && 
                (
                    this.RevenueAccount2 == input.RevenueAccount2 ||
                    (this.RevenueAccount2 != null &&
                    this.RevenueAccount2.Equals(input.RevenueAccount2))
                ) && 
                (
                    this.RevenueAccount3 == input.RevenueAccount3 ||
                    (this.RevenueAccount3 != null &&
                    this.RevenueAccount3.Equals(input.RevenueAccount3))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.AsIfSold == input.AsIfSold ||
                    (this.AsIfSold != null &&
                    this.AsIfSold.Equals(input.AsIfSold))
                ) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.Locked == input.Locked ||
                    (this.Locked != null &&
                    this.Locked.Equals(input.Locked))
                ) && 
                (
                    this.PlanValue == input.PlanValue ||
                    (this.PlanValue != null &&
                    this.PlanValue.Equals(input.PlanValue))
                ) && 
                (
                    this.CostPrice == input.CostPrice ||
                    (this.CostPrice != null &&
                    this.CostPrice.Equals(input.CostPrice))
                ) && 
                (
                    this.SingleAmount == input.SingleAmount ||
                    (this.SingleAmount != null &&
                    this.SingleAmount.Equals(input.SingleAmount))
                ) && 
                (
                    this.SingleAmount2 == input.SingleAmount2 ||
                    (this.SingleAmount2 != null &&
                    this.SingleAmount2.Equals(input.SingleAmount2))
                ) && 
                (
                    this.SingleAmount3 == input.SingleAmount3 ||
                    (this.SingleAmount3 != null &&
                    this.SingleAmount3.Equals(input.SingleAmount3))
                ) && 
                (
                    this.SingleAmountGross == input.SingleAmountGross ||
                    (this.SingleAmountGross != null &&
                    this.SingleAmountGross.Equals(input.SingleAmountGross))
                ) && 
                (
                    this.SingleAmountGross2 == input.SingleAmountGross2 ||
                    (this.SingleAmountGross2 != null &&
                    this.SingleAmountGross2.Equals(input.SingleAmountGross2))
                ) && 
                (
                    this.SingleAmountGross3 == input.SingleAmountGross3 ||
                    (this.SingleAmountGross3 != null &&
                    this.SingleAmountGross3.Equals(input.SingleAmountGross3))
                ) && 
                (
                    this.NameLng1 == input.NameLng1 ||
                    (this.NameLng1 != null &&
                    this.NameLng1.Equals(input.NameLng1))
                ) && 
                (
                    this.DescriptionLng1 == input.DescriptionLng1 ||
                    (this.DescriptionLng1 != null &&
                    this.DescriptionLng1.Equals(input.DescriptionLng1))
                ) && 
                (
                    this.ProductGroupName == input.ProductGroupName ||
                    (this.ProductGroupName != null &&
                    this.ProductGroupName.Equals(input.ProductGroupName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TypeDisplay != null)
                    hashCode = hashCode * 59 + this.TypeDisplay.GetHashCode();
                if (this.InvoicePostingMode != null)
                    hashCode = hashCode * 59 + this.InvoicePostingMode.GetHashCode();
                if (this.TaxRate != null)
                    hashCode = hashCode * 59 + this.TaxRate.GetHashCode();
                if (this.RevenueAccountMode != null)
                    hashCode = hashCode * 59 + this.RevenueAccountMode.GetHashCode();
                if (this.RevenueAccount0 != null)
                    hashCode = hashCode * 59 + this.RevenueAccount0.GetHashCode();
                if (this.RevenueAccount1 != null)
                    hashCode = hashCode * 59 + this.RevenueAccount1.GetHashCode();
                if (this.RevenueAccount2 != null)
                    hashCode = hashCode * 59 + this.RevenueAccount2.GetHashCode();
                if (this.RevenueAccount3 != null)
                    hashCode = hashCode * 59 + this.RevenueAccount3.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.AsIfSold != null)
                    hashCode = hashCode * 59 + this.AsIfSold.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.Locked != null)
                    hashCode = hashCode * 59 + this.Locked.GetHashCode();
                if (this.PlanValue != null)
                    hashCode = hashCode * 59 + this.PlanValue.GetHashCode();
                if (this.CostPrice != null)
                    hashCode = hashCode * 59 + this.CostPrice.GetHashCode();
                if (this.SingleAmount != null)
                    hashCode = hashCode * 59 + this.SingleAmount.GetHashCode();
                if (this.SingleAmount2 != null)
                    hashCode = hashCode * 59 + this.SingleAmount2.GetHashCode();
                if (this.SingleAmount3 != null)
                    hashCode = hashCode * 59 + this.SingleAmount3.GetHashCode();
                if (this.SingleAmountGross != null)
                    hashCode = hashCode * 59 + this.SingleAmountGross.GetHashCode();
                if (this.SingleAmountGross2 != null)
                    hashCode = hashCode * 59 + this.SingleAmountGross2.GetHashCode();
                if (this.SingleAmountGross3 != null)
                    hashCode = hashCode * 59 + this.SingleAmountGross3.GetHashCode();
                if (this.NameLng1 != null)
                    hashCode = hashCode * 59 + this.NameLng1.GetHashCode();
                if (this.DescriptionLng1 != null)
                    hashCode = hashCode * 59 + this.DescriptionLng1.GetHashCode();
                if (this.ProductGroupName != null)
                    hashCode = hashCode * 59 + this.ProductGroupName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
