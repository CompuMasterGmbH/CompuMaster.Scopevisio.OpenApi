/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CompuMaster.Scopevisio.OpenApi.Client.OpenAPIDateConverter;

namespace CompuMaster.Scopevisio.OpenApi.Model
{
    /// <summary>
    /// ProjectForm
    /// </summary>
    [DataContract]
    public partial class ProjectForm :  IEquatable<ProjectForm>, IValidatableObject
    {
        /// <summary>
        /// category (Projektkategorie), if not given, it is set to \&quot;Kundenprojekt\&quot;
        /// </summary>
        /// <value>category (Projektkategorie), if not given, it is set to \&quot;Kundenprojekt\&quot;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum Kundenprojekt for value: Kundenprojekt
            /// </summary>
            [EnumMember(Value = "Kundenprojekt")]
            Kundenprojekt = 1,

            /// <summary>
            /// Enum Vertriebsprojekt for value: Vertriebsprojekt
            /// </summary>
            [EnumMember(Value = "Vertriebsprojekt")]
            Vertriebsprojekt = 2,

            /// <summary>
            /// Enum Investitionsprojekt for value: Investitionsprojekt
            /// </summary>
            [EnumMember(Value = "Investitionsprojekt")]
            Investitionsprojekt = 3,

            /// <summary>
            /// Enum Entwicklungsprojekt for value: Entwicklungsprojekt
            /// </summary>
            [EnumMember(Value = "Entwicklungsprojekt")]
            Entwicklungsprojekt = 4,

            /// <summary>
            /// Enum Beratungsprojekt for value: Beratungsprojekt
            /// </summary>
            [EnumMember(Value = "Beratungsprojekt")]
            Beratungsprojekt = 5,

            /// <summary>
            /// Enum Organisationsprojekt for value: Organisationsprojekt
            /// </summary>
            [EnumMember(Value = "Organisationsprojekt")]
            Organisationsprojekt = 6,

            /// <summary>
            /// Enum SozialesProjekt for value: Soziales Projekt
            /// </summary>
            [EnumMember(Value = "Soziales Projekt")]
            SozialesProjekt = 7,

            /// <summary>
            /// Enum SonstigesProjekt for value: Sonstiges Projekt
            /// </summary>
            [EnumMember(Value = "Sonstiges Projekt")]
            SonstigesProjekt = 8

        }

        /// <summary>
        /// category (Projektkategorie), if not given, it is set to \&quot;Kundenprojekt\&quot;
        /// </summary>
        /// <value>category (Projektkategorie), if not given, it is set to \&quot;Kundenprojekt\&quot;</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryEnum? Category { get; set; }
        /// <summary>
        /// type (Projektbezug) 
        /// </summary>
        /// <value>type (Projektbezug) </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Intern for value: intern
            /// </summary>
            [EnumMember(Value = "intern")]
            Intern = 1,

            /// <summary>
            /// Enum Extern for value: extern
            /// </summary>
            [EnumMember(Value = "extern")]
            Extern = 2

        }

        /// <summary>
        /// type (Projektbezug) 
        /// </summary>
        /// <value>type (Projektbezug) </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// type2 (Projektart) - the allowable values depend on the project category. Please check the Scopevisio desktop application for all allowable values per category. The example values are for category \&quot;Kundenprojekt\&quot;
        /// </summary>
        /// <value>type2 (Projektart) - the allowable values depend on the project category. Please check the Scopevisio desktop application for all allowable values per category. The example values are for category \&quot;Kundenprojekt\&quot;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Type2Enum
        {
            /// <summary>
            /// Enum Kundenauftrag for value: Kundenauftrag
            /// </summary>
            [EnumMember(Value = "Kundenauftrag")]
            Kundenauftrag = 1,

            /// <summary>
            /// Enum Lieferung for value: Lieferung
            /// </summary>
            [EnumMember(Value = "Lieferung")]
            Lieferung = 2,

            /// <summary>
            /// Enum Bestellabwicklung for value: Bestellabwicklung
            /// </summary>
            [EnumMember(Value = "Bestellabwicklung")]
            Bestellabwicklung = 3,

            /// <summary>
            /// Enum Leistungserbringung for value: Leistungserbringung
            /// </summary>
            [EnumMember(Value = "Leistungserbringung")]
            Leistungserbringung = 4,

            /// <summary>
            /// Enum Auftragserbringung for value: Auftragserbringung
            /// </summary>
            [EnumMember(Value = "Auftragserbringung")]
            Auftragserbringung = 5,

            /// <summary>
            /// Enum Sonstiges for value: Sonstiges
            /// </summary>
            [EnumMember(Value = "Sonstiges")]
            Sonstiges = 6

        }

        /// <summary>
        /// type2 (Projektart) - the allowable values depend on the project category. Please check the Scopevisio desktop application for all allowable values per category. The example values are for category \&quot;Kundenprojekt\&quot;
        /// </summary>
        /// <value>type2 (Projektart) - the allowable values depend on the project category. Please check the Scopevisio desktop application for all allowable values per category. The example values are for category \&quot;Kundenprojekt\&quot;</value>
        [DataMember(Name="type2", EmitDefaultValue=false)]
        public Type2Enum? Type2 { get; set; }
        /// <summary>
        /// phase (Projekt-Phase) - the allowable values depend on the project category. Please check the Scopevisio desktop application for all allowable values per category. The example values are for category \&quot;Kundenprojekt\&quot;
        /// </summary>
        /// <value>phase (Projekt-Phase) - the allowable values depend on the project category. Please check the Scopevisio desktop application for all allowable values per category. The example values are for category \&quot;Kundenprojekt\&quot;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PhaseEnum
        {
            /// <summary>
            /// Enum Vorbereitung for value: Vorbereitung
            /// </summary>
            [EnumMember(Value = "Vorbereitung")]
            Vorbereitung = 1,

            /// <summary>
            /// Enum Durchfhrung for value: Durchführung
            /// </summary>
            [EnumMember(Value = "Durchführung")]
            Durchfhrung = 2,

            /// <summary>
            /// Enum DurchfhrungundTeilabrechnung for value: Durchführung und Teilabrechnung
            /// </summary>
            [EnumMember(Value = "Durchführung und Teilabrechnung")]
            DurchfhrungundTeilabrechnung = 3,

            /// <summary>
            /// Enum Abschluss for value: Abschluss
            /// </summary>
            [EnumMember(Value = "Abschluss")]
            Abschluss = 4,

            /// <summary>
            /// Enum Schluabrechnung for value: Schlußabrechnung
            /// </summary>
            [EnumMember(Value = "Schlußabrechnung")]
            Schluabrechnung = 5,

            /// <summary>
            /// Enum Bewertung for value: Bewertung
            /// </summary>
            [EnumMember(Value = "Bewertung")]
            Bewertung = 6,

            /// <summary>
            /// Enum Zahlungsberwachung for value: Zahlungsüberwachung
            /// </summary>
            [EnumMember(Value = "Zahlungsüberwachung")]
            Zahlungsberwachung = 7

        }

        /// <summary>
        /// phase (Projekt-Phase) - the allowable values depend on the project category. Please check the Scopevisio desktop application for all allowable values per category. The example values are for category \&quot;Kundenprojekt\&quot;
        /// </summary>
        /// <value>phase (Projekt-Phase) - the allowable values depend on the project category. Please check the Scopevisio desktop application for all allowable values per category. The example values are for category \&quot;Kundenprojekt\&quot;</value>
        [DataMember(Name="phase", EmitDefaultValue=false)]
        public PhaseEnum? Phase { get; set; }
        /// <summary>
        /// status (Projekt-Status) - the allowable values depend on the project category. Please checkthe Scopevisio desktop application for all allowable values per category. The example values are for category \&quot;Kundenprojekt\&quot;
        /// </summary>
        /// <value>status (Projekt-Status) - the allowable values depend on the project category. Please checkthe Scopevisio desktop application for all allowable values per category. The example values are for category \&quot;Kundenprojekt\&quot;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Anstehend for value: anstehend
            /// </summary>
            [EnumMember(Value = "anstehend")]
            Anstehend = 1,

            /// <summary>
            /// Enum Gestartet for value: gestartet
            /// </summary>
            [EnumMember(Value = "gestartet")]
            Gestartet = 2,

            /// <summary>
            /// Enum Beendet for value: beendet
            /// </summary>
            [EnumMember(Value = "beendet")]
            Beendet = 3,

            /// <summary>
            /// Enum Unterbrochen for value: unterbrochen
            /// </summary>
            [EnumMember(Value = "unterbrochen")]
            Unterbrochen = 4,

            /// <summary>
            /// Enum Zurckgestellt for value: zurückgestellt
            /// </summary>
            [EnumMember(Value = "zurückgestellt")]
            Zurckgestellt = 5,

            /// <summary>
            /// Enum Abgebrochen for value: abgebrochen
            /// </summary>
            [EnumMember(Value = "abgebrochen")]
            Abgebrochen = 6,

            /// <summary>
            /// Enum Unbekannt for value: unbekannt
            /// </summary>
            [EnumMember(Value = "unbekannt")]
            Unbekannt = 7

        }

        /// <summary>
        /// status (Projekt-Status) - the allowable values depend on the project category. Please checkthe Scopevisio desktop application for all allowable values per category. The example values are for category \&quot;Kundenprojekt\&quot;
        /// </summary>
        /// <value>status (Projekt-Status) - the allowable values depend on the project category. Please checkthe Scopevisio desktop application for all allowable values per category. The example values are for category \&quot;Kundenprojekt\&quot;</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// priority (Projekt-Priorität)
        /// </summary>
        /// <value>priority (Projekt-Priorität)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriorityEnum
        {
            /// <summary>
            /// Enum Niedrig for value: niedrig
            /// </summary>
            [EnumMember(Value = "niedrig")]
            Niedrig = 1,

            /// <summary>
            /// Enum Mittel for value: mittel
            /// </summary>
            [EnumMember(Value = "mittel")]
            Mittel = 2,

            /// <summary>
            /// Enum Hoch for value: hoch
            /// </summary>
            [EnumMember(Value = "hoch")]
            Hoch = 3,

            /// <summary>
            /// Enum Sehrhoch for value: sehr hoch
            /// </summary>
            [EnumMember(Value = "sehr hoch")]
            Sehrhoch = 4,

            /// <summary>
            /// Enum Sofort for value: sofort
            /// </summary>
            [EnumMember(Value = "sofort")]
            Sofort = 5

        }

        /// <summary>
        /// priority (Projekt-Priorität)
        /// </summary>
        /// <value>priority (Projekt-Priorität)</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public PriorityEnum? Priority { get; set; }
        /// <summary>
        /// risk (Projekt-Risiko)
        /// </summary>
        /// <value>risk (Projekt-Risiko)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RiskEnum
        {
            /// <summary>
            /// Enum Niedrig for value: niedrig
            /// </summary>
            [EnumMember(Value = "niedrig")]
            Niedrig = 1,

            /// <summary>
            /// Enum Mittel for value: mittel
            /// </summary>
            [EnumMember(Value = "mittel")]
            Mittel = 2,

            /// <summary>
            /// Enum Hoch for value: hoch
            /// </summary>
            [EnumMember(Value = "hoch")]
            Hoch = 3,

            /// <summary>
            /// Enum Sehrhoch for value: sehr hoch
            /// </summary>
            [EnumMember(Value = "sehr hoch")]
            Sehrhoch = 4,

            /// <summary>
            /// Enum Unbekannt for value: unbekannt
            /// </summary>
            [EnumMember(Value = "unbekannt")]
            Unbekannt = 5

        }

        /// <summary>
        /// risk (Projekt-Risiko)
        /// </summary>
        /// <value>risk (Projekt-Risiko)</value>
        [DataMember(Name="risk", EmitDefaultValue=false)]
        public RiskEnum? Risk { get; set; }
        /// <summary>
        /// billable (Fakturierbar)
        /// </summary>
        /// <value>billable (Fakturierbar)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BillableEnum
        {
            /// <summary>
            /// Enum Ja for value: Ja
            /// </summary>
            [EnumMember(Value = "Ja")]
            Ja = 1,

            /// <summary>
            /// Enum Nein for value: Nein
            /// </summary>
            [EnumMember(Value = "Nein")]
            Nein = 2,

            /// <summary>
            /// Enum Nochzugenehmigen for value: Noch zu genehmigen
            /// </summary>
            [EnumMember(Value = "Noch zu genehmigen")]
            Nochzugenehmigen = 3

        }

        /// <summary>
        /// billable (Fakturierbar)
        /// </summary>
        /// <value>billable (Fakturierbar)</value>
        [DataMember(Name="billable", EmitDefaultValue=false)]
        public BillableEnum? Billable { get; set; }
        /// <summary>
        /// timeRecordable (Zeiterfassung)
        /// </summary>
        /// <value>timeRecordable (Zeiterfassung)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TimeRecordableEnum
        {
            /// <summary>
            /// Enum Ja for value: Ja
            /// </summary>
            [EnumMember(Value = "Ja")]
            Ja = 1,

            /// <summary>
            /// Enum Nein for value: Nein
            /// </summary>
            [EnumMember(Value = "Nein")]
            Nein = 2,

            /// <summary>
            /// Enum Nochzugenehmigen for value: Noch zu genehmigen
            /// </summary>
            [EnumMember(Value = "Noch zu genehmigen")]
            Nochzugenehmigen = 3

        }

        /// <summary>
        /// timeRecordable (Zeiterfassung)
        /// </summary>
        /// <value>timeRecordable (Zeiterfassung)</value>
        [DataMember(Name="timeRecordable", EmitDefaultValue=false)]
        public TimeRecordableEnum? TimeRecordable { get; set; }
        /// <summary>
        /// time record type (Zeiterfassung in...)
        /// </summary>
        /// <value>time record type (Zeiterfassung in...)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TimeRecordTypeEnum
        {
            /// <summary>
            /// Enum Minuten for value: Minuten
            /// </summary>
            [EnumMember(Value = "Minuten")]
            Minuten = 1,

            /// <summary>
            /// Enum Stunden for value: Stunden
            /// </summary>
            [EnumMember(Value = "Stunden")]
            Stunden = 2,

            /// <summary>
            /// Enum Tage for value: Tage
            /// </summary>
            [EnumMember(Value = "Tage")]
            Tage = 3,

            /// <summary>
            /// Enum Wochen for value: Wochen
            /// </summary>
            [EnumMember(Value = "Wochen")]
            Wochen = 4,

            /// <summary>
            /// Enum Jahren for value: Jahren
            /// </summary>
            [EnumMember(Value = "Jahren")]
            Jahren = 5

        }

        /// <summary>
        /// time record type (Zeiterfassung in...)
        /// </summary>
        /// <value>time record type (Zeiterfassung in...)</value>
        [DataMember(Name="timeRecordType", EmitDefaultValue=false)]
        public TimeRecordTypeEnum? TimeRecordType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectForm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectForm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectForm" /> class.
        /// </summary>
        /// <param name="number">number.</param>
        /// <param name="name">name (required).</param>
        /// <param name="category">category (Projektkategorie), if not given, it is set to \&quot;Kundenprojekt\&quot;.</param>
        /// <param name="type">type (Projektbezug) .</param>
        /// <param name="type2">type2 (Projektart) - the allowable values depend on the project category. Please check the Scopevisio desktop application for all allowable values per category. The example values are for category \&quot;Kundenprojekt\&quot;.</param>
        /// <param name="description">description (Projektbeschreibung).</param>
        /// <param name="contactId">contactId (Projektadressat) (required).</param>
        /// <param name="legacyNumber">legacyNumber (ID Vorsystem). The Id of the project used in the previous system..</param>
        /// <param name="initiatorContactId">project initiator (Projektträger).</param>
        /// <param name="contactPerson">contactPerson (Ansprechpartner beim Kunden/Lead/Interessenten). The contact id of the contact person for the project - the selected contact must be an employee of the project contact and the project contact must be main employer..</param>
        /// <param name="ownerUid">ownerUid (Projektinhaber). Uid of the user, who is the owner of this project. Refer to /users to retrieve the uid.</param>
        /// <param name="workdays">workdays (Arbeitstage). Please check the Scopevisio desktop application for all allowable values for workdays.</param>
        /// <param name="startTs">Project start (Projektstart).</param>
        /// <param name="endTs">project end (Projektende).</param>
        /// <param name="decisionTs">Project decision timestamp (Entsch.zeitp.).</param>
        /// <param name="estimatedHoursMode">estimatedHoursMode (checbox Manuell). Toggle if estimated hours is set manually or not, 0 &#x3D; false, 1 &#x3D; true (default to false).</param>
        /// <param name="estimatedHours">Estimated hours field is evaluated only if estimatedHoursMode is present and set to true.</param>
        /// <param name="dimensionNumber">dimensionNumber (Projektkostenstelle).</param>
        /// <param name="dimensionName">dimensionName (Projektkostenstelle) Name of the dimensionNumber. If not given, it is set to the project name..</param>
        /// <param name="phase">phase (Projekt-Phase) - the allowable values depend on the project category. Please check the Scopevisio desktop application for all allowable values per category. The example values are for category \&quot;Kundenprojekt\&quot;.</param>
        /// <param name="status">status (Projekt-Status) - the allowable values depend on the project category. Please checkthe Scopevisio desktop application for all allowable values per category. The example values are for category \&quot;Kundenprojekt\&quot;.</param>
        /// <param name="priority">priority (Projekt-Priorität).</param>
        /// <param name="risk">risk (Projekt-Risiko).</param>
        /// <param name="riskDescription">riskDescription (Risikobeschreibung).</param>
        /// <param name="billable">billable (Fakturierbar).</param>
        /// <param name="timeRecordable">timeRecordable (Zeiterfassung).</param>
        /// <param name="timeRecordType">time record type (Zeiterfassung in...).</param>
        /// <param name="hoursPerDay">hours per day (Stunden pro Arbeitstag).</param>
        /// <param name="mail">project email (E-Mail).</param>
        /// <param name="customFields">custom fields (Benutzerdefinierte Felder)- these are available for projects only if your client supports sales projects.</param>
        /// <param name="projectEmployees">project employees are all contacts involved in the project (Projektbeteiligte).</param>
        /// <param name="permissionType">permissionType(Berechtigungen)0 &#x3D; Öffentlich, 1 &#x3D; Benutzerdefiniert, 2 &#x3D; Persönlich.</param>
        /// <param name="readPermissionProfiles">comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1..</param>
        /// <param name="readPermissionLogins">comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1..</param>
        /// <param name="writePermissionProfiles">comma separated list of profiles for full access, evaluated only if permissionType equals 1..</param>
        /// <param name="writePermissionLogins">comma separated list of user login emails, evaluated only if permissionType equals 1..</param>
        public ProjectForm(string number = default(string), string name = default(string), CategoryEnum? category = default(CategoryEnum?), TypeEnum? type = default(TypeEnum?), Type2Enum? type2 = default(Type2Enum?), string description = default(string), long contactId = default(long), string legacyNumber = default(string), long initiatorContactId = default(long), long contactPerson = default(long), string ownerUid = default(string), decimal workdays = default(decimal), long startTs = default(long), long endTs = default(long), long decisionTs = default(long), bool estimatedHoursMode = false, decimal estimatedHours = default(decimal), long dimensionNumber = default(long), string dimensionName = default(string), PhaseEnum? phase = default(PhaseEnum?), StatusEnum? status = default(StatusEnum?), PriorityEnum? priority = default(PriorityEnum?), RiskEnum? risk = default(RiskEnum?), string riskDescription = default(string), BillableEnum? billable = default(BillableEnum?), TimeRecordableEnum? timeRecordable = default(TimeRecordableEnum?), TimeRecordTypeEnum? timeRecordType = default(TimeRecordTypeEnum?), long hoursPerDay = default(long), string mail = default(string), List<CustomField> customFields = default(List<CustomField>), List<ProjectEmployeeForm> projectEmployees = default(List<ProjectEmployeeForm>), long permissionType = default(long), string readPermissionProfiles = default(string), string readPermissionLogins = default(string), string writePermissionProfiles = default(string), string writePermissionLogins = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ProjectForm and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            // to ensure "contactId" is required (not null)
            if (contactId == null)
            {
                throw new InvalidDataException("contactId is a required property for ProjectForm and cannot be null");
            }
            else
            {
                this.ContactId = contactId;
            }
            
            this.Number = number;
            this.Category = category;
            this.Type = type;
            this.Type2 = type2;
            this.Description = description;
            this.LegacyNumber = legacyNumber;
            this.InitiatorContactId = initiatorContactId;
            this.ContactPerson = contactPerson;
            this.OwnerUid = ownerUid;
            this.Workdays = workdays;
            this.StartTs = startTs;
            this.EndTs = endTs;
            this.DecisionTs = decisionTs;
            // use default value if no "estimatedHoursMode" provided
            if (estimatedHoursMode == null)
            {
                this.EstimatedHoursMode = false;
            }
            else
            {
                this.EstimatedHoursMode = estimatedHoursMode;
            }
            this.EstimatedHours = estimatedHours;
            this.DimensionNumber = dimensionNumber;
            this.DimensionName = dimensionName;
            this.Phase = phase;
            this.Status = status;
            this.Priority = priority;
            this.Risk = risk;
            this.RiskDescription = riskDescription;
            this.Billable = billable;
            this.TimeRecordable = timeRecordable;
            this.TimeRecordType = timeRecordType;
            this.HoursPerDay = hoursPerDay;
            this.Mail = mail;
            this.CustomFields = customFields;
            this.ProjectEmployees = projectEmployees;
            this.PermissionType = permissionType;
            this.ReadPermissionProfiles = readPermissionProfiles;
            this.ReadPermissionLogins = readPermissionLogins;
            this.WritePermissionProfiles = writePermissionProfiles;
            this.WritePermissionLogins = writePermissionLogins;
        }
        
        /// <summary>
        /// number
        /// </summary>
        /// <value>number</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// name
        /// </summary>
        /// <value>name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }




        /// <summary>
        /// description (Projektbeschreibung)
        /// </summary>
        /// <value>description (Projektbeschreibung)</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// contactId (Projektadressat)
        /// </summary>
        /// <value>contactId (Projektadressat)</value>
        [DataMember(Name="contactId", EmitDefaultValue=false)]
        public long ContactId { get; set; }

        /// <summary>
        /// legacyNumber (ID Vorsystem). The Id of the project used in the previous system.
        /// </summary>
        /// <value>legacyNumber (ID Vorsystem). The Id of the project used in the previous system.</value>
        [DataMember(Name="legacyNumber", EmitDefaultValue=false)]
        public string LegacyNumber { get; set; }

        /// <summary>
        /// project initiator (Projektträger)
        /// </summary>
        /// <value>project initiator (Projektträger)</value>
        [DataMember(Name="initiatorContactId", EmitDefaultValue=false)]
        public long InitiatorContactId { get; set; }

        /// <summary>
        /// contactPerson (Ansprechpartner beim Kunden/Lead/Interessenten). The contact id of the contact person for the project - the selected contact must be an employee of the project contact and the project contact must be main employer.
        /// </summary>
        /// <value>contactPerson (Ansprechpartner beim Kunden/Lead/Interessenten). The contact id of the contact person for the project - the selected contact must be an employee of the project contact and the project contact must be main employer.</value>
        [DataMember(Name="contactPerson", EmitDefaultValue=false)]
        public long ContactPerson { get; set; }

        /// <summary>
        /// ownerUid (Projektinhaber). Uid of the user, who is the owner of this project. Refer to /users to retrieve the uid
        /// </summary>
        /// <value>ownerUid (Projektinhaber). Uid of the user, who is the owner of this project. Refer to /users to retrieve the uid</value>
        [DataMember(Name="ownerUid", EmitDefaultValue=false)]
        public string OwnerUid { get; set; }

        /// <summary>
        /// workdays (Arbeitstage). Please check the Scopevisio desktop application for all allowable values for workdays
        /// </summary>
        /// <value>workdays (Arbeitstage). Please check the Scopevisio desktop application for all allowable values for workdays</value>
        [DataMember(Name="workdays", EmitDefaultValue=false)]
        public decimal Workdays { get; set; }

        /// <summary>
        /// Project start (Projektstart)
        /// </summary>
        /// <value>Project start (Projektstart)</value>
        [DataMember(Name="startTs", EmitDefaultValue=false)]
        public long StartTs { get; set; }

        /// <summary>
        /// project end (Projektende)
        /// </summary>
        /// <value>project end (Projektende)</value>
        [DataMember(Name="endTs", EmitDefaultValue=false)]
        public long EndTs { get; set; }

        /// <summary>
        /// Project decision timestamp (Entsch.zeitp.)
        /// </summary>
        /// <value>Project decision timestamp (Entsch.zeitp.)</value>
        [DataMember(Name="decisionTs", EmitDefaultValue=false)]
        public long DecisionTs { get; set; }

        /// <summary>
        /// estimatedHoursMode (checbox Manuell). Toggle if estimated hours is set manually or not, 0 &#x3D; false, 1 &#x3D; true
        /// </summary>
        /// <value>estimatedHoursMode (checbox Manuell). Toggle if estimated hours is set manually or not, 0 &#x3D; false, 1 &#x3D; true</value>
        [DataMember(Name="estimatedHoursMode", EmitDefaultValue=false)]
        public bool EstimatedHoursMode { get; set; }

        /// <summary>
        /// Estimated hours field is evaluated only if estimatedHoursMode is present and set to true
        /// </summary>
        /// <value>Estimated hours field is evaluated only if estimatedHoursMode is present and set to true</value>
        [DataMember(Name="estimatedHours", EmitDefaultValue=false)]
        public decimal EstimatedHours { get; set; }

        /// <summary>
        /// dimensionNumber (Projektkostenstelle)
        /// </summary>
        /// <value>dimensionNumber (Projektkostenstelle)</value>
        [DataMember(Name="dimensionNumber", EmitDefaultValue=false)]
        public long DimensionNumber { get; set; }

        /// <summary>
        /// dimensionName (Projektkostenstelle) Name of the dimensionNumber. If not given, it is set to the project name.
        /// </summary>
        /// <value>dimensionName (Projektkostenstelle) Name of the dimensionNumber. If not given, it is set to the project name.</value>
        [DataMember(Name="dimensionName", EmitDefaultValue=false)]
        public string DimensionName { get; set; }





        /// <summary>
        /// riskDescription (Risikobeschreibung)
        /// </summary>
        /// <value>riskDescription (Risikobeschreibung)</value>
        [DataMember(Name="riskDescription", EmitDefaultValue=false)]
        public string RiskDescription { get; set; }




        /// <summary>
        /// hours per day (Stunden pro Arbeitstag)
        /// </summary>
        /// <value>hours per day (Stunden pro Arbeitstag)</value>
        [DataMember(Name="hoursPerDay", EmitDefaultValue=false)]
        public long HoursPerDay { get; set; }

        /// <summary>
        /// project email (E-Mail)
        /// </summary>
        /// <value>project email (E-Mail)</value>
        [DataMember(Name="mail", EmitDefaultValue=false)]
        public string Mail { get; set; }

        /// <summary>
        /// custom fields (Benutzerdefinierte Felder)- these are available for projects only if your client supports sales projects
        /// </summary>
        /// <value>custom fields (Benutzerdefinierte Felder)- these are available for projects only if your client supports sales projects</value>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public List<CustomField> CustomFields { get; set; }

        /// <summary>
        /// project employees are all contacts involved in the project (Projektbeteiligte)
        /// </summary>
        /// <value>project employees are all contacts involved in the project (Projektbeteiligte)</value>
        [DataMember(Name="projectEmployees", EmitDefaultValue=false)]
        public List<ProjectEmployeeForm> ProjectEmployees { get; set; }

        /// <summary>
        /// permissionType(Berechtigungen)0 &#x3D; Öffentlich, 1 &#x3D; Benutzerdefiniert, 2 &#x3D; Persönlich
        /// </summary>
        /// <value>permissionType(Berechtigungen)0 &#x3D; Öffentlich, 1 &#x3D; Benutzerdefiniert, 2 &#x3D; Persönlich</value>
        [DataMember(Name="permissionType", EmitDefaultValue=false)]
        public long PermissionType { get; set; }

        /// <summary>
        /// comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="readPermissionProfiles", EmitDefaultValue=false)]
        public string ReadPermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="readPermissionLogins", EmitDefaultValue=false)]
        public string ReadPermissionLogins { get; set; }

        /// <summary>
        /// comma separated list of profiles for full access, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of profiles for full access, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="writePermissionProfiles", EmitDefaultValue=false)]
        public string WritePermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of user login emails, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="writePermissionLogins", EmitDefaultValue=false)]
        public string WritePermissionLogins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectForm {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Type2: ").Append(Type2).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  LegacyNumber: ").Append(LegacyNumber).Append("\n");
            sb.Append("  InitiatorContactId: ").Append(InitiatorContactId).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  OwnerUid: ").Append(OwnerUid).Append("\n");
            sb.Append("  Workdays: ").Append(Workdays).Append("\n");
            sb.Append("  StartTs: ").Append(StartTs).Append("\n");
            sb.Append("  EndTs: ").Append(EndTs).Append("\n");
            sb.Append("  DecisionTs: ").Append(DecisionTs).Append("\n");
            sb.Append("  EstimatedHoursMode: ").Append(EstimatedHoursMode).Append("\n");
            sb.Append("  EstimatedHours: ").Append(EstimatedHours).Append("\n");
            sb.Append("  DimensionNumber: ").Append(DimensionNumber).Append("\n");
            sb.Append("  DimensionName: ").Append(DimensionName).Append("\n");
            sb.Append("  Phase: ").Append(Phase).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Risk: ").Append(Risk).Append("\n");
            sb.Append("  RiskDescription: ").Append(RiskDescription).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  TimeRecordable: ").Append(TimeRecordable).Append("\n");
            sb.Append("  TimeRecordType: ").Append(TimeRecordType).Append("\n");
            sb.Append("  HoursPerDay: ").Append(HoursPerDay).Append("\n");
            sb.Append("  Mail: ").Append(Mail).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  ProjectEmployees: ").Append(ProjectEmployees).Append("\n");
            sb.Append("  PermissionType: ").Append(PermissionType).Append("\n");
            sb.Append("  ReadPermissionProfiles: ").Append(ReadPermissionProfiles).Append("\n");
            sb.Append("  ReadPermissionLogins: ").Append(ReadPermissionLogins).Append("\n");
            sb.Append("  WritePermissionProfiles: ").Append(WritePermissionProfiles).Append("\n");
            sb.Append("  WritePermissionLogins: ").Append(WritePermissionLogins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectForm);
        }

        /// <summary>
        /// Returns true if ProjectForm instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Type2 == input.Type2 ||
                    (this.Type2 != null &&
                    this.Type2.Equals(input.Type2))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.LegacyNumber == input.LegacyNumber ||
                    (this.LegacyNumber != null &&
                    this.LegacyNumber.Equals(input.LegacyNumber))
                ) && 
                (
                    this.InitiatorContactId == input.InitiatorContactId ||
                    (this.InitiatorContactId != null &&
                    this.InitiatorContactId.Equals(input.InitiatorContactId))
                ) && 
                (
                    this.ContactPerson == input.ContactPerson ||
                    (this.ContactPerson != null &&
                    this.ContactPerson.Equals(input.ContactPerson))
                ) && 
                (
                    this.OwnerUid == input.OwnerUid ||
                    (this.OwnerUid != null &&
                    this.OwnerUid.Equals(input.OwnerUid))
                ) && 
                (
                    this.Workdays == input.Workdays ||
                    (this.Workdays != null &&
                    this.Workdays.Equals(input.Workdays))
                ) && 
                (
                    this.StartTs == input.StartTs ||
                    (this.StartTs != null &&
                    this.StartTs.Equals(input.StartTs))
                ) && 
                (
                    this.EndTs == input.EndTs ||
                    (this.EndTs != null &&
                    this.EndTs.Equals(input.EndTs))
                ) && 
                (
                    this.DecisionTs == input.DecisionTs ||
                    (this.DecisionTs != null &&
                    this.DecisionTs.Equals(input.DecisionTs))
                ) && 
                (
                    this.EstimatedHoursMode == input.EstimatedHoursMode ||
                    (this.EstimatedHoursMode != null &&
                    this.EstimatedHoursMode.Equals(input.EstimatedHoursMode))
                ) && 
                (
                    this.EstimatedHours == input.EstimatedHours ||
                    (this.EstimatedHours != null &&
                    this.EstimatedHours.Equals(input.EstimatedHours))
                ) && 
                (
                    this.DimensionNumber == input.DimensionNumber ||
                    (this.DimensionNumber != null &&
                    this.DimensionNumber.Equals(input.DimensionNumber))
                ) && 
                (
                    this.DimensionName == input.DimensionName ||
                    (this.DimensionName != null &&
                    this.DimensionName.Equals(input.DimensionName))
                ) && 
                (
                    this.Phase == input.Phase ||
                    (this.Phase != null &&
                    this.Phase.Equals(input.Phase))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Risk == input.Risk ||
                    (this.Risk != null &&
                    this.Risk.Equals(input.Risk))
                ) && 
                (
                    this.RiskDescription == input.RiskDescription ||
                    (this.RiskDescription != null &&
                    this.RiskDescription.Equals(input.RiskDescription))
                ) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.TimeRecordable == input.TimeRecordable ||
                    (this.TimeRecordable != null &&
                    this.TimeRecordable.Equals(input.TimeRecordable))
                ) && 
                (
                    this.TimeRecordType == input.TimeRecordType ||
                    (this.TimeRecordType != null &&
                    this.TimeRecordType.Equals(input.TimeRecordType))
                ) && 
                (
                    this.HoursPerDay == input.HoursPerDay ||
                    (this.HoursPerDay != null &&
                    this.HoursPerDay.Equals(input.HoursPerDay))
                ) && 
                (
                    this.Mail == input.Mail ||
                    (this.Mail != null &&
                    this.Mail.Equals(input.Mail))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) && 
                (
                    this.ProjectEmployees == input.ProjectEmployees ||
                    this.ProjectEmployees != null &&
                    input.ProjectEmployees != null &&
                    this.ProjectEmployees.SequenceEqual(input.ProjectEmployees)
                ) && 
                (
                    this.PermissionType == input.PermissionType ||
                    (this.PermissionType != null &&
                    this.PermissionType.Equals(input.PermissionType))
                ) && 
                (
                    this.ReadPermissionProfiles == input.ReadPermissionProfiles ||
                    (this.ReadPermissionProfiles != null &&
                    this.ReadPermissionProfiles.Equals(input.ReadPermissionProfiles))
                ) && 
                (
                    this.ReadPermissionLogins == input.ReadPermissionLogins ||
                    (this.ReadPermissionLogins != null &&
                    this.ReadPermissionLogins.Equals(input.ReadPermissionLogins))
                ) && 
                (
                    this.WritePermissionProfiles == input.WritePermissionProfiles ||
                    (this.WritePermissionProfiles != null &&
                    this.WritePermissionProfiles.Equals(input.WritePermissionProfiles))
                ) && 
                (
                    this.WritePermissionLogins == input.WritePermissionLogins ||
                    (this.WritePermissionLogins != null &&
                    this.WritePermissionLogins.Equals(input.WritePermissionLogins))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Type2 != null)
                    hashCode = hashCode * 59 + this.Type2.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.LegacyNumber != null)
                    hashCode = hashCode * 59 + this.LegacyNumber.GetHashCode();
                if (this.InitiatorContactId != null)
                    hashCode = hashCode * 59 + this.InitiatorContactId.GetHashCode();
                if (this.ContactPerson != null)
                    hashCode = hashCode * 59 + this.ContactPerson.GetHashCode();
                if (this.OwnerUid != null)
                    hashCode = hashCode * 59 + this.OwnerUid.GetHashCode();
                if (this.Workdays != null)
                    hashCode = hashCode * 59 + this.Workdays.GetHashCode();
                if (this.StartTs != null)
                    hashCode = hashCode * 59 + this.StartTs.GetHashCode();
                if (this.EndTs != null)
                    hashCode = hashCode * 59 + this.EndTs.GetHashCode();
                if (this.DecisionTs != null)
                    hashCode = hashCode * 59 + this.DecisionTs.GetHashCode();
                if (this.EstimatedHoursMode != null)
                    hashCode = hashCode * 59 + this.EstimatedHoursMode.GetHashCode();
                if (this.EstimatedHours != null)
                    hashCode = hashCode * 59 + this.EstimatedHours.GetHashCode();
                if (this.DimensionNumber != null)
                    hashCode = hashCode * 59 + this.DimensionNumber.GetHashCode();
                if (this.DimensionName != null)
                    hashCode = hashCode * 59 + this.DimensionName.GetHashCode();
                if (this.Phase != null)
                    hashCode = hashCode * 59 + this.Phase.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.Risk != null)
                    hashCode = hashCode * 59 + this.Risk.GetHashCode();
                if (this.RiskDescription != null)
                    hashCode = hashCode * 59 + this.RiskDescription.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.TimeRecordable != null)
                    hashCode = hashCode * 59 + this.TimeRecordable.GetHashCode();
                if (this.TimeRecordType != null)
                    hashCode = hashCode * 59 + this.TimeRecordType.GetHashCode();
                if (this.HoursPerDay != null)
                    hashCode = hashCode * 59 + this.HoursPerDay.GetHashCode();
                if (this.Mail != null)
                    hashCode = hashCode * 59 + this.Mail.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                if (this.ProjectEmployees != null)
                    hashCode = hashCode * 59 + this.ProjectEmployees.GetHashCode();
                if (this.PermissionType != null)
                    hashCode = hashCode * 59 + this.PermissionType.GetHashCode();
                if (this.ReadPermissionProfiles != null)
                    hashCode = hashCode * 59 + this.ReadPermissionProfiles.GetHashCode();
                if (this.ReadPermissionLogins != null)
                    hashCode = hashCode * 59 + this.ReadPermissionLogins.GetHashCode();
                if (this.WritePermissionProfiles != null)
                    hashCode = hashCode * 59 + this.WritePermissionProfiles.GetHashCode();
                if (this.WritePermissionLogins != null)
                    hashCode = hashCode * 59 + this.WritePermissionLogins.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
