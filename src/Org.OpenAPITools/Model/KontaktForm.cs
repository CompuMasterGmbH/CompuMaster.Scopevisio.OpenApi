/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// KontaktForm
    /// </summary>
    [DataContract]
    public partial class KontaktForm :  IEquatable<KontaktForm>, IValidatableObject
    {
        /// <summary>
        /// Anrede
        /// </summary>
        /// <value>Anrede</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SalutationEnum
        {
            /// <summary>
            /// Enum Herr for value: Herr
            /// </summary>
            [EnumMember(Value = "Herr")]
            Herr = 1,

            /// <summary>
            /// Enum Frau for value: Frau
            /// </summary>
            [EnumMember(Value = "Frau")]
            Frau = 2,

            /// <summary>
            /// Enum Familie for value: Familie
            /// </summary>
            [EnumMember(Value = "Familie")]
            Familie = 3,

            /// <summary>
            /// Enum Eheleute for value: Eheleute
            /// </summary>
            [EnumMember(Value = "Eheleute")]
            Eheleute = 4

        }

        /// <summary>
        /// Anrede
        /// </summary>
        /// <value>Anrede</value>
        [DataMember(Name="salutation", EmitDefaultValue=false)]
        public SalutationEnum? Salutation { get; set; }
        /// <summary>
        /// Titel
        /// </summary>
        /// <value>Titel</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TitleEnum
        {
            /// <summary>
            /// Enum Bachelor for value: Bachelor
            /// </summary>
            [EnumMember(Value = "Bachelor")]
            Bachelor = 1,

            /// <summary>
            /// Enum Master for value: Master
            /// </summary>
            [EnumMember(Value = "Master")]
            Master = 2,

            /// <summary>
            /// Enum Magister for value: Magister
            /// </summary>
            [EnumMember(Value = "Magister")]
            Magister = 3,

            /// <summary>
            /// Enum Lizentiat for value: Lizentiat
            /// </summary>
            [EnumMember(Value = "Lizentiat")]
            Lizentiat = 4,

            /// <summary>
            /// Enum DiplomFH for value: Diplom (FH)
            /// </summary>
            [EnumMember(Value = "Diplom (FH)")]
            DiplomFH = 5,

            /// <summary>
            /// Enum Diplom for value: Diplom
            /// </summary>
            [EnumMember(Value = "Diplom")]
            Diplom = 6,

            /// <summary>
            /// Enum PhD for value: Ph.D.
            /// </summary>
            [EnumMember(Value = "Ph.D.")]
            PhD = 7,

            /// <summary>
            /// Enum Dr for value: Dr.
            /// </summary>
            [EnumMember(Value = "Dr.")]
            Dr = 8,

            /// <summary>
            /// Enum Drmult for value: Dr. mult.
            /// </summary>
            [EnumMember(Value = "Dr. mult.")]
            Drmult = 9,

            /// <summary>
            /// Enum Drhabil for value: Dr. habil.
            /// </summary>
            [EnumMember(Value = "Dr. habil.")]
            Drhabil = 10,

            /// <summary>
            /// Enum DrhC for value: Dr. h.c.
            /// </summary>
            [EnumMember(Value = "Dr. h.c.")]
            DrhC = 11,

            /// <summary>
            /// Enum DreH for value: Dr. e.h.
            /// </summary>
            [EnumMember(Value = "Dr. e.h.")]
            DreH = 12,

            /// <summary>
            /// Enum Prof for value: Prof.
            /// </summary>
            [EnumMember(Value = "Prof.")]
            Prof = 13,

            /// <summary>
            /// Enum ProfDr for value: Prof. Dr.
            /// </summary>
            [EnumMember(Value = "Prof. Dr.")]
            ProfDr = 14

        }

        /// <summary>
        /// Titel
        /// </summary>
        /// <value>Titel</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public TitleEnum? Title { get; set; }
        /// <summary>
        /// paymentTypeName (Zahlungsart).Sets also pamymentType.
        /// </summary>
        /// <value>paymentTypeName (Zahlungsart).Sets also pamymentType.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentTypeNameEnum
        {
            /// <summary>
            /// Enum Vorkasse for value: Vorkasse
            /// </summary>
            [EnumMember(Value = "Vorkasse")]
            Vorkasse = 1,

            /// <summary>
            /// Enum Berweisung for value: Überweisung
            /// </summary>
            [EnumMember(Value = "Überweisung")]
            Berweisung = 2,

            /// <summary>
            /// Enum Bar for value: Bar
            /// </summary>
            [EnumMember(Value = "Bar")]
            Bar = 3,

            /// <summary>
            /// Enum ECKarte for value: EC-Karte
            /// </summary>
            [EnumMember(Value = "EC-Karte")]
            ECKarte = 4,

            /// <summary>
            /// Enum Einzugsermchtung for value: Einzugsermächtung
            /// </summary>
            [EnumMember(Value = "Einzugsermächtung")]
            Einzugsermchtung = 5,

            /// <summary>
            /// Enum Projektleiter for value: Projektleiter
            /// </summary>
            [EnumMember(Value = "Projektleiter")]
            Projektleiter = 6,

            /// <summary>
            /// Enum Kreditkarte for value: Kreditkarte
            /// </summary>
            [EnumMember(Value = "Kreditkarte")]
            Kreditkarte = 7,

            /// <summary>
            /// Enum Nachnahme for value: Nachnahme
            /// </summary>
            [EnumMember(Value = "Nachnahme")]
            Nachnahme = 8,

            /// <summary>
            /// Enum PayPal for value: PayPal
            /// </summary>
            [EnumMember(Value = "PayPal")]
            PayPal = 9,

            /// <summary>
            /// Enum Rechnung for value: Rechnung
            /// </summary>
            [EnumMember(Value = "Rechnung")]
            Rechnung = 10

        }

        /// <summary>
        /// paymentTypeName (Zahlungsart).Sets also pamymentType.
        /// </summary>
        /// <value>paymentTypeName (Zahlungsart).Sets also pamymentType.</value>
        [DataMember(Name="paymentTypeName", EmitDefaultValue=false)]
        public PaymentTypeNameEnum? PaymentTypeName { get; set; }
        /// <summary>
        /// Language (Sprache).
        /// </summary>
        /// <value>Language (Sprache).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            /// <summary>
            /// Enum Arabisch for value: Arabisch
            /// </summary>
            [EnumMember(Value = "Arabisch")]
            Arabisch = 1,

            /// <summary>
            /// Enum ArabischVereinigteArabischeEmirate for value: Arabisch (Vereinigte Arabische Emirate)
            /// </summary>
            [EnumMember(Value = "Arabisch (Vereinigte Arabische Emirate)")]
            ArabischVereinigteArabischeEmirate = 2,

            /// <summary>
            /// Enum ArabischBahrain for value: Arabisch (Bahrain)
            /// </summary>
            [EnumMember(Value = "Arabisch (Bahrain)")]
            ArabischBahrain = 3,

            /// <summary>
            /// Enum ArabischAlgerien for value: Arabisch (Algerien)
            /// </summary>
            [EnumMember(Value = "Arabisch (Algerien)")]
            ArabischAlgerien = 4,

            /// <summary>
            /// Enum Arabischgypten for value: Arabisch (Ägypten)
            /// </summary>
            [EnumMember(Value = "Arabisch (Ägypten)")]
            Arabischgypten = 5,

            /// <summary>
            /// Enum ArabischIrak for value: Arabisch (Irak)
            /// </summary>
            [EnumMember(Value = "Arabisch (Irak)")]
            ArabischIrak = 6,

            /// <summary>
            /// Enum ArabischJordanien for value: Arabisch (Jordanien)
            /// </summary>
            [EnumMember(Value = "Arabisch (Jordanien)")]
            ArabischJordanien = 7,

            /// <summary>
            /// Enum ArabischKuwait for value: Arabisch (Kuwait)
            /// </summary>
            [EnumMember(Value = "Arabisch (Kuwait)")]
            ArabischKuwait = 8,

            /// <summary>
            /// Enum ArabischLibanon for value: Arabisch (Libanon)
            /// </summary>
            [EnumMember(Value = "Arabisch (Libanon)")]
            ArabischLibanon = 9,

            /// <summary>
            /// Enum ArabischLibyen for value: Arabisch (Libyen)
            /// </summary>
            [EnumMember(Value = "Arabisch (Libyen)")]
            ArabischLibyen = 10,

            /// <summary>
            /// Enum ArabischMarokko for value: Arabisch (Marokko)
            /// </summary>
            [EnumMember(Value = "Arabisch (Marokko)")]
            ArabischMarokko = 11,

            /// <summary>
            /// Enum ArabischOman for value: Arabisch (Oman)
            /// </summary>
            [EnumMember(Value = "Arabisch (Oman)")]
            ArabischOman = 12,

            /// <summary>
            /// Enum ArabischKatar for value: Arabisch (Katar)
            /// </summary>
            [EnumMember(Value = "Arabisch (Katar)")]
            ArabischKatar = 13,

            /// <summary>
            /// Enum ArabischSaudiArabien for value: Arabisch (Saudi-Arabien)
            /// </summary>
            [EnumMember(Value = "Arabisch (Saudi-Arabien)")]
            ArabischSaudiArabien = 14,

            /// <summary>
            /// Enum ArabischSudan for value: Arabisch (Sudan)
            /// </summary>
            [EnumMember(Value = "Arabisch (Sudan)")]
            ArabischSudan = 15,

            /// <summary>
            /// Enum ArabischSyrien for value: Arabisch (Syrien)
            /// </summary>
            [EnumMember(Value = "Arabisch (Syrien)")]
            ArabischSyrien = 16,

            /// <summary>
            /// Enum ArabischTunesien for value: Arabisch (Tunesien)
            /// </summary>
            [EnumMember(Value = "Arabisch (Tunesien)")]
            ArabischTunesien = 17,

            /// <summary>
            /// Enum ArabischJemen for value: Arabisch (Jemen)
            /// </summary>
            [EnumMember(Value = "Arabisch (Jemen)")]
            ArabischJemen = 18,

            /// <summary>
            /// Enum Belorussisch for value: Belorussisch
            /// </summary>
            [EnumMember(Value = "Belorussisch")]
            Belorussisch = 19,

            /// <summary>
            /// Enum BelorussischBelarus for value: Belorussisch (Belarus)
            /// </summary>
            [EnumMember(Value = "Belorussisch (Belarus)")]
            BelorussischBelarus = 20,

            /// <summary>
            /// Enum Bulgarisch for value: Bulgarisch
            /// </summary>
            [EnumMember(Value = "Bulgarisch")]
            Bulgarisch = 21,

            /// <summary>
            /// Enum BulgarischBulgarien for value: Bulgarisch (Bulgarien)
            /// </summary>
            [EnumMember(Value = "Bulgarisch (Bulgarien)")]
            BulgarischBulgarien = 22,

            /// <summary>
            /// Enum Katalanisch for value: Katalanisch
            /// </summary>
            [EnumMember(Value = "Katalanisch")]
            Katalanisch = 23,

            /// <summary>
            /// Enum KatalanischSpanien for value: Katalanisch (Spanien)
            /// </summary>
            [EnumMember(Value = "Katalanisch (Spanien)")]
            KatalanischSpanien = 24,

            /// <summary>
            /// Enum Tschechisch for value: Tschechisch
            /// </summary>
            [EnumMember(Value = "Tschechisch")]
            Tschechisch = 25,

            /// <summary>
            /// Enum TschechischTschechischeRepublik for value: Tschechisch (Tschechische Republik)
            /// </summary>
            [EnumMember(Value = "Tschechisch (Tschechische Republik)")]
            TschechischTschechischeRepublik = 26,

            /// <summary>
            /// Enum Dnisch for value: Dänisch
            /// </summary>
            [EnumMember(Value = "Dänisch")]
            Dnisch = 27,

            /// <summary>
            /// Enum DnischDnemark for value: Dänisch (Dänemark)
            /// </summary>
            [EnumMember(Value = "Dänisch (Dänemark)")]
            DnischDnemark = 28,

            /// <summary>
            /// Enum Deutsch for value: Deutsch
            /// </summary>
            [EnumMember(Value = "Deutsch")]
            Deutsch = 29,

            /// <summary>
            /// Enum Deutschsterreich for value: Deutsch (Österreich)
            /// </summary>
            [EnumMember(Value = "Deutsch (Österreich)")]
            Deutschsterreich = 30,

            /// <summary>
            /// Enum DeutschSchweiz for value: Deutsch (Schweiz)
            /// </summary>
            [EnumMember(Value = "Deutsch (Schweiz)")]
            DeutschSchweiz = 31,

            /// <summary>
            /// Enum DeutschDeutschland for value: Deutsch (Deutschland)
            /// </summary>
            [EnumMember(Value = "Deutsch (Deutschland)")]
            DeutschDeutschland = 32,

            /// <summary>
            /// Enum DeutschLuxemburg for value: Deutsch (Luxemburg)
            /// </summary>
            [EnumMember(Value = "Deutsch (Luxemburg)")]
            DeutschLuxemburg = 33,

            /// <summary>
            /// Enum Griechisch for value: Griechisch
            /// </summary>
            [EnumMember(Value = "Griechisch")]
            Griechisch = 34,

            /// <summary>
            /// Enum GriechischZypern for value: Griechisch (Zypern)
            /// </summary>
            [EnumMember(Value = "Griechisch (Zypern)")]
            GriechischZypern = 35,

            /// <summary>
            /// Enum GriechischGriechenland for value: Griechisch (Griechenland)
            /// </summary>
            [EnumMember(Value = "Griechisch (Griechenland)")]
            GriechischGriechenland = 36,

            /// <summary>
            /// Enum Englisch for value: Englisch
            /// </summary>
            [EnumMember(Value = "Englisch")]
            Englisch = 37,

            /// <summary>
            /// Enum EnglischAustralien for value: Englisch (Australien)
            /// </summary>
            [EnumMember(Value = "Englisch (Australien)")]
            EnglischAustralien = 38,

            /// <summary>
            /// Enum EnglischKanada for value: Englisch (Kanada)
            /// </summary>
            [EnumMember(Value = "Englisch (Kanada)")]
            EnglischKanada = 39,

            /// <summary>
            /// Enum EnglischVereinigtesKnigreich for value: Englisch (Vereinigtes Königreich)
            /// </summary>
            [EnumMember(Value = "Englisch (Vereinigtes Königreich)")]
            EnglischVereinigtesKnigreich = 40,

            /// <summary>
            /// Enum EnglischIrland for value: Englisch (Irland)
            /// </summary>
            [EnumMember(Value = "Englisch (Irland)")]
            EnglischIrland = 41,

            /// <summary>
            /// Enum EnglischIndien for value: Englisch (Indien)
            /// </summary>
            [EnumMember(Value = "Englisch (Indien)")]
            EnglischIndien = 42,

            /// <summary>
            /// Enum EnglischMalta for value: Englisch (Malta)
            /// </summary>
            [EnumMember(Value = "Englisch (Malta)")]
            EnglischMalta = 43,

            /// <summary>
            /// Enum EnglischNeuseeland for value: Englisch (Neuseeland)
            /// </summary>
            [EnumMember(Value = "Englisch (Neuseeland)")]
            EnglischNeuseeland = 44,

            /// <summary>
            /// Enum EnglischPhilippinen for value: Englisch (Philippinen)
            /// </summary>
            [EnumMember(Value = "Englisch (Philippinen)")]
            EnglischPhilippinen = 45,

            /// <summary>
            /// Enum EnglischSingapur for value: Englisch (Singapur)
            /// </summary>
            [EnumMember(Value = "Englisch (Singapur)")]
            EnglischSingapur = 46,

            /// <summary>
            /// Enum EnglischVereinigteStaatenvonAmerika for value: Englisch (Vereinigte Staaten von Amerika)
            /// </summary>
            [EnumMember(Value = "Englisch (Vereinigte Staaten von Amerika)")]
            EnglischVereinigteStaatenvonAmerika = 47,

            /// <summary>
            /// Enum EnglischSdafrika for value: Englisch (Südafrika)
            /// </summary>
            [EnumMember(Value = "Englisch (Südafrika)")]
            EnglischSdafrika = 48,

            /// <summary>
            /// Enum Spanisch for value: Spanisch
            /// </summary>
            [EnumMember(Value = "Spanisch")]
            Spanisch = 49,

            /// <summary>
            /// Enum SpanischArgentinien for value: Spanisch (Argentinien)
            /// </summary>
            [EnumMember(Value = "Spanisch (Argentinien)")]
            SpanischArgentinien = 50,

            /// <summary>
            /// Enum SpanischBolivien for value: Spanisch (Bolivien)
            /// </summary>
            [EnumMember(Value = "Spanisch (Bolivien)")]
            SpanischBolivien = 51,

            /// <summary>
            /// Enum SpanischChile for value: Spanisch (Chile)
            /// </summary>
            [EnumMember(Value = "Spanisch (Chile)")]
            SpanischChile = 52,

            /// <summary>
            /// Enum SpanischKolumbien for value: Spanisch (Kolumbien)
            /// </summary>
            [EnumMember(Value = "Spanisch (Kolumbien)")]
            SpanischKolumbien = 53,

            /// <summary>
            /// Enum SpanischCostaRica for value: Spanisch (Costa Rica)
            /// </summary>
            [EnumMember(Value = "Spanisch (Costa Rica)")]
            SpanischCostaRica = 54,

            /// <summary>
            /// Enum SpanischDominikanischeRepublik for value: Spanisch (Dominikanische Republik)
            /// </summary>
            [EnumMember(Value = "Spanisch (Dominikanische Republik)")]
            SpanischDominikanischeRepublik = 55,

            /// <summary>
            /// Enum SpanischEcuador for value: Spanisch (Ecuador)
            /// </summary>
            [EnumMember(Value = "Spanisch (Ecuador)")]
            SpanischEcuador = 56,

            /// <summary>
            /// Enum SpanischSpanien for value: Spanisch (Spanien)
            /// </summary>
            [EnumMember(Value = "Spanisch (Spanien)")]
            SpanischSpanien = 57,

            /// <summary>
            /// Enum SpanischGuatemala for value: Spanisch (Guatemala)
            /// </summary>
            [EnumMember(Value = "Spanisch (Guatemala)")]
            SpanischGuatemala = 58,

            /// <summary>
            /// Enum SpanischHonduras for value: Spanisch (Honduras)
            /// </summary>
            [EnumMember(Value = "Spanisch (Honduras)")]
            SpanischHonduras = 59,

            /// <summary>
            /// Enum SpanischMexiko for value: Spanisch (Mexiko)
            /// </summary>
            [EnumMember(Value = "Spanisch (Mexiko)")]
            SpanischMexiko = 60,

            /// <summary>
            /// Enum SpanischNicaragua for value: Spanisch (Nicaragua)
            /// </summary>
            [EnumMember(Value = "Spanisch (Nicaragua)")]
            SpanischNicaragua = 61,

            /// <summary>
            /// Enum SpanischPanama for value: Spanisch (Panama)
            /// </summary>
            [EnumMember(Value = "Spanisch (Panama)")]
            SpanischPanama = 62,

            /// <summary>
            /// Enum SpanischPeru for value: Spanisch (Peru)
            /// </summary>
            [EnumMember(Value = "Spanisch (Peru)")]
            SpanischPeru = 63,

            /// <summary>
            /// Enum SpanischPuertoRico for value: Spanisch (Puerto Rico)
            /// </summary>
            [EnumMember(Value = "Spanisch (Puerto Rico)")]
            SpanischPuertoRico = 64,

            /// <summary>
            /// Enum SpanischParaguay for value: Spanisch (Paraguay)
            /// </summary>
            [EnumMember(Value = "Spanisch (Paraguay)")]
            SpanischParaguay = 65,

            /// <summary>
            /// Enum SpanischElSalvador for value: Spanisch (El Salvador)
            /// </summary>
            [EnumMember(Value = "Spanisch (El Salvador)")]
            SpanischElSalvador = 66,

            /// <summary>
            /// Enum SpanischVereinigteStaatenvonAmerika for value: Spanisch (Vereinigte Staaten von Amerika)
            /// </summary>
            [EnumMember(Value = "Spanisch (Vereinigte Staaten von Amerika)")]
            SpanischVereinigteStaatenvonAmerika = 67,

            /// <summary>
            /// Enum SpanischUruguay for value: Spanisch (Uruguay)
            /// </summary>
            [EnumMember(Value = "Spanisch (Uruguay)")]
            SpanischUruguay = 68,

            /// <summary>
            /// Enum SpanischVenezuela for value: Spanisch (Venezuela)
            /// </summary>
            [EnumMember(Value = "Spanisch (Venezuela)")]
            SpanischVenezuela = 69,

            /// <summary>
            /// Enum Estnisch for value: Estnisch
            /// </summary>
            [EnumMember(Value = "Estnisch")]
            Estnisch = 70,

            /// <summary>
            /// Enum EstnischEstland for value: Estnisch (Estland)
            /// </summary>
            [EnumMember(Value = "Estnisch (Estland)")]
            EstnischEstland = 71,

            /// <summary>
            /// Enum Finnisch for value: Finnisch
            /// </summary>
            [EnumMember(Value = "Finnisch")]
            Finnisch = 72,

            /// <summary>
            /// Enum FinnischFinnland for value: Finnisch (Finnland)
            /// </summary>
            [EnumMember(Value = "Finnisch (Finnland)")]
            FinnischFinnland = 73,

            /// <summary>
            /// Enum Franzsisch for value: Französisch
            /// </summary>
            [EnumMember(Value = "Französisch")]
            Franzsisch = 74,

            /// <summary>
            /// Enum FranzsischBelgien for value: Französisch (Belgien)
            /// </summary>
            [EnumMember(Value = "Französisch (Belgien)")]
            FranzsischBelgien = 75,

            /// <summary>
            /// Enum FranzsischKanada for value: Französisch (Kanada)
            /// </summary>
            [EnumMember(Value = "Französisch (Kanada)")]
            FranzsischKanada = 76,

            /// <summary>
            /// Enum FranzsischSchweiz for value: Französisch (Schweiz)
            /// </summary>
            [EnumMember(Value = "Französisch (Schweiz)")]
            FranzsischSchweiz = 77,

            /// <summary>
            /// Enum FranzsischFrankreich for value: Französisch (Frankreich)
            /// </summary>
            [EnumMember(Value = "Französisch (Frankreich)")]
            FranzsischFrankreich = 78,

            /// <summary>
            /// Enum FranzsischLuxemburg for value: Französisch (Luxemburg)
            /// </summary>
            [EnumMember(Value = "Französisch (Luxemburg)")]
            FranzsischLuxemburg = 79,

            /// <summary>
            /// Enum Irisch for value: Irisch
            /// </summary>
            [EnumMember(Value = "Irisch")]
            Irisch = 80,

            /// <summary>
            /// Enum IrischIrland for value: Irisch (Irland)
            /// </summary>
            [EnumMember(Value = "Irisch (Irland)")]
            IrischIrland = 81,

            /// <summary>
            /// Enum HindiIndien for value: Hindi (Indien)
            /// </summary>
            [EnumMember(Value = "Hindi (Indien)")]
            HindiIndien = 82,

            /// <summary>
            /// Enum Kroatisch for value: Kroatisch
            /// </summary>
            [EnumMember(Value = "Kroatisch")]
            Kroatisch = 83,

            /// <summary>
            /// Enum KroatischKroatien for value: Kroatisch (Kroatien)
            /// </summary>
            [EnumMember(Value = "Kroatisch (Kroatien)")]
            KroatischKroatien = 84,

            /// <summary>
            /// Enum Ungarisch for value: Ungarisch
            /// </summary>
            [EnumMember(Value = "Ungarisch")]
            Ungarisch = 85,

            /// <summary>
            /// Enum UngarischUngarn for value: Ungarisch (Ungarn)
            /// </summary>
            [EnumMember(Value = "Ungarisch (Ungarn)")]
            UngarischUngarn = 86,

            /// <summary>
            /// Enum Indonesisch for value: Indonesisch
            /// </summary>
            [EnumMember(Value = "Indonesisch")]
            Indonesisch = 87,

            /// <summary>
            /// Enum IndonesischIndonesien for value: Indonesisch (Indonesien)
            /// </summary>
            [EnumMember(Value = "Indonesisch (Indonesien)")]
            IndonesischIndonesien = 88,

            /// <summary>
            /// Enum Islndisch for value: Isländisch
            /// </summary>
            [EnumMember(Value = "Isländisch")]
            Islndisch = 89,

            /// <summary>
            /// Enum IslndischIsland for value: Isländisch (Island)
            /// </summary>
            [EnumMember(Value = "Isländisch (Island)")]
            IslndischIsland = 90,

            /// <summary>
            /// Enum Italienisch for value: Italienisch
            /// </summary>
            [EnumMember(Value = "Italienisch")]
            Italienisch = 91,

            /// <summary>
            /// Enum ItalienischSchweiz for value: Italienisch (Schweiz)
            /// </summary>
            [EnumMember(Value = "Italienisch (Schweiz)")]
            ItalienischSchweiz = 92,

            /// <summary>
            /// Enum ItalienischItalien for value: Italienisch (Italien)
            /// </summary>
            [EnumMember(Value = "Italienisch (Italien)")]
            ItalienischItalien = 93,

            /// <summary>
            /// Enum Hebrisch for value: Hebräisch
            /// </summary>
            [EnumMember(Value = "Hebräisch")]
            Hebrisch = 94,

            /// <summary>
            /// Enum HebrischIsrael for value: Hebräisch (Israel)
            /// </summary>
            [EnumMember(Value = "Hebräisch (Israel)")]
            HebrischIsrael = 95,

            /// <summary>
            /// Enum Japanisch for value: Japanisch
            /// </summary>
            [EnumMember(Value = "Japanisch")]
            Japanisch = 96,

            /// <summary>
            /// Enum JapanischJapan for value: Japanisch (Japan)
            /// </summary>
            [EnumMember(Value = "Japanisch (Japan)")]
            JapanischJapan = 97,

            /// <summary>
            /// Enum JapanischJapan for value: Japanisch (Japan
            /// </summary>
            [EnumMember(Value = "Japanisch (Japan")]
            JapanischJapan2 = 98,

            /// <summary>
            /// Enum JP for value: JP)
            /// </summary>
            [EnumMember(Value = "JP)")]
            JP = 99,

            /// <summary>
            /// Enum Koreanisch for value: Koreanisch
            /// </summary>
            [EnumMember(Value = "Koreanisch")]
            Koreanisch = 100,

            /// <summary>
            /// Enum KoreanischSdkorea for value: Koreanisch (Südkorea)
            /// </summary>
            [EnumMember(Value = "Koreanisch (Südkorea)")]
            KoreanischSdkorea = 101,

            /// <summary>
            /// Enum Litauisch for value: Litauisch
            /// </summary>
            [EnumMember(Value = "Litauisch")]
            Litauisch = 102,

            /// <summary>
            /// Enum LitauischLitauen for value: Litauisch (Litauen)
            /// </summary>
            [EnumMember(Value = "Litauisch (Litauen)")]
            LitauischLitauen = 103,

            /// <summary>
            /// Enum Lettisch for value: Lettisch
            /// </summary>
            [EnumMember(Value = "Lettisch")]
            Lettisch = 104,

            /// <summary>
            /// Enum LettischLettland for value: Lettisch (Lettland)
            /// </summary>
            [EnumMember(Value = "Lettisch (Lettland)")]
            LettischLettland = 105,

            /// <summary>
            /// Enum Mazedonisch for value: Mazedonisch
            /// </summary>
            [EnumMember(Value = "Mazedonisch")]
            Mazedonisch = 106,

            /// <summary>
            /// Enum MazedonischMazedonien for value: Mazedonisch (Mazedonien)
            /// </summary>
            [EnumMember(Value = "Mazedonisch (Mazedonien)")]
            MazedonischMazedonien = 107,

            /// <summary>
            /// Enum Malay for value: Malay
            /// </summary>
            [EnumMember(Value = "Malay")]
            Malay = 108,

            /// <summary>
            /// Enum MalayMalaysia for value: Malay (Malaysia)
            /// </summary>
            [EnumMember(Value = "Malay (Malaysia)")]
            MalayMalaysia = 109,

            /// <summary>
            /// Enum Maltesisch for value: Maltesisch
            /// </summary>
            [EnumMember(Value = "Maltesisch")]
            Maltesisch = 110,

            /// <summary>
            /// Enum MaltesischMalta for value: Maltesisch (Malta)
            /// </summary>
            [EnumMember(Value = "Maltesisch (Malta)")]
            MaltesischMalta = 111,

            /// <summary>
            /// Enum Niederlndisch for value: Niederländisch
            /// </summary>
            [EnumMember(Value = "Niederländisch")]
            Niederlndisch = 112,

            /// <summary>
            /// Enum NiederlndischBelgien for value: Niederländisch (Belgien)
            /// </summary>
            [EnumMember(Value = "Niederländisch (Belgien)")]
            NiederlndischBelgien = 113,

            /// <summary>
            /// Enum NiederlndischNiederlande for value: Niederländisch (Niederlande)
            /// </summary>
            [EnumMember(Value = "Niederländisch (Niederlande)")]
            NiederlndischNiederlande = 114,

            /// <summary>
            /// Enum Norwegisch for value: Norwegisch
            /// </summary>
            [EnumMember(Value = "Norwegisch")]
            Norwegisch = 115,

            /// <summary>
            /// Enum NorwegischNorwegen for value: Norwegisch (Norwegen)
            /// </summary>
            [EnumMember(Value = "Norwegisch (Norwegen)")]
            NorwegischNorwegen = 116,

            /// <summary>
            /// Enum NorwegischNorwegen for value: Norwegisch (Norwegen
            /// </summary>
            [EnumMember(Value = "Norwegisch (Norwegen")]
            NorwegischNorwegen2 = 117,

            /// <summary>
            /// Enum Nynorsk for value: Nynorsk)
            /// </summary>
            [EnumMember(Value = "Nynorsk)")]
            Nynorsk = 118,

            /// <summary>
            /// Enum Polnisch for value: Polnisch
            /// </summary>
            [EnumMember(Value = "Polnisch")]
            Polnisch = 119,

            /// <summary>
            /// Enum PolnischPolen for value: Polnisch (Polen)
            /// </summary>
            [EnumMember(Value = "Polnisch (Polen)")]
            PolnischPolen = 120,

            /// <summary>
            /// Enum Portugiesisch for value: Portugiesisch
            /// </summary>
            [EnumMember(Value = "Portugiesisch")]
            Portugiesisch = 121,

            /// <summary>
            /// Enum PortugiesischBrasilien for value: Portugiesisch (Brasilien)
            /// </summary>
            [EnumMember(Value = "Portugiesisch (Brasilien)")]
            PortugiesischBrasilien = 122,

            /// <summary>
            /// Enum PortugiesischPortugal for value: Portugiesisch (Portugal)
            /// </summary>
            [EnumMember(Value = "Portugiesisch (Portugal)")]
            PortugiesischPortugal = 123,

            /// <summary>
            /// Enum Rumnisch for value: Rumänisch
            /// </summary>
            [EnumMember(Value = "Rumänisch")]
            Rumnisch = 124,

            /// <summary>
            /// Enum RumnischRumnien for value: Rumänisch (Rumänien)
            /// </summary>
            [EnumMember(Value = "Rumänisch (Rumänien)")]
            RumnischRumnien = 125,

            /// <summary>
            /// Enum Russisch for value: Russisch
            /// </summary>
            [EnumMember(Value = "Russisch")]
            Russisch = 126,

            /// <summary>
            /// Enum RussischRussland for value: Russisch (Russland)
            /// </summary>
            [EnumMember(Value = "Russisch (Russland)")]
            RussischRussland = 127,

            /// <summary>
            /// Enum Slowakisch for value: Slowakisch
            /// </summary>
            [EnumMember(Value = "Slowakisch")]
            Slowakisch = 128,

            /// <summary>
            /// Enum SlowakischSlowakei for value: Slowakisch (Slowakei)
            /// </summary>
            [EnumMember(Value = "Slowakisch (Slowakei)")]
            SlowakischSlowakei = 129,

            /// <summary>
            /// Enum Slowenisch for value: Slowenisch
            /// </summary>
            [EnumMember(Value = "Slowenisch")]
            Slowenisch = 130,

            /// <summary>
            /// Enum SlowenischSlowenien for value: Slowenisch (Slowenien)
            /// </summary>
            [EnumMember(Value = "Slowenisch (Slowenien)")]
            SlowenischSlowenien = 131,

            /// <summary>
            /// Enum Albanisch for value: Albanisch
            /// </summary>
            [EnumMember(Value = "Albanisch")]
            Albanisch = 132,

            /// <summary>
            /// Enum AlbanischAlbanien for value: Albanisch (Albanien)
            /// </summary>
            [EnumMember(Value = "Albanisch (Albanien)")]
            AlbanischAlbanien = 133,

            /// <summary>
            /// Enum Serbisch for value: Serbisch
            /// </summary>
            [EnumMember(Value = "Serbisch")]
            Serbisch = 134,

            /// <summary>
            /// Enum SerbischBosnienundHerzegowina for value: Serbisch (Bosnien und Herzegowina)
            /// </summary>
            [EnumMember(Value = "Serbisch (Bosnien und Herzegowina)")]
            SerbischBosnienundHerzegowina = 135,

            /// <summary>
            /// Enum SerbischSerbienundMontenegro for value: Serbisch (Serbien und Montenegro)
            /// </summary>
            [EnumMember(Value = "Serbisch (Serbien und Montenegro)")]
            SerbischSerbienundMontenegro = 136,

            /// <summary>
            /// Enum Schwedisch for value: Schwedisch
            /// </summary>
            [EnumMember(Value = "Schwedisch")]
            Schwedisch = 137,

            /// <summary>
            /// Enum SchwedischSchweden for value: Schwedisch (Schweden)
            /// </summary>
            [EnumMember(Value = "Schwedisch (Schweden)")]
            SchwedischSchweden = 138,

            /// <summary>
            /// Enum Thai for value: Thai
            /// </summary>
            [EnumMember(Value = "Thai")]
            Thai = 139,

            /// <summary>
            /// Enum ThaiThailand for value: Thai (Thailand)
            /// </summary>
            [EnumMember(Value = "Thai (Thailand)")]
            ThaiThailand = 140,

            /// <summary>
            /// Enum ThaiThailand for value: Thai (Thailand
            /// </summary>
            [EnumMember(Value = "Thai (Thailand")]
            ThaiThailand2 = 141,

            /// <summary>
            /// Enum TH for value: TH)
            /// </summary>
            [EnumMember(Value = "TH)")]
            TH = 142,

            /// <summary>
            /// Enum Trkisch for value: Türkisch
            /// </summary>
            [EnumMember(Value = "Türkisch")]
            Trkisch = 143,

            /// <summary>
            /// Enum TrkischTrkei for value: Türkisch (Türkei)
            /// </summary>
            [EnumMember(Value = "Türkisch (Türkei)")]
            TrkischTrkei = 144,

            /// <summary>
            /// Enum Ukrainisch for value: Ukrainisch
            /// </summary>
            [EnumMember(Value = "Ukrainisch")]
            Ukrainisch = 145,

            /// <summary>
            /// Enum UkrainischUkraine for value: Ukrainisch (Ukraine)
            /// </summary>
            [EnumMember(Value = "Ukrainisch (Ukraine)")]
            UkrainischUkraine = 146,

            /// <summary>
            /// Enum Vietnamesisch for value: Vietnamesisch
            /// </summary>
            [EnumMember(Value = "Vietnamesisch")]
            Vietnamesisch = 147,

            /// <summary>
            /// Enum VietnamesischVietnam for value: Vietnamesisch (Vietnam)
            /// </summary>
            [EnumMember(Value = "Vietnamesisch (Vietnam)")]
            VietnamesischVietnam = 148,

            /// <summary>
            /// Enum Chinesisch for value: Chinesisch
            /// </summary>
            [EnumMember(Value = "Chinesisch")]
            Chinesisch = 149,

            /// <summary>
            /// Enum ChinesischChina for value: Chinesisch (China)
            /// </summary>
            [EnumMember(Value = "Chinesisch (China)")]
            ChinesischChina = 150,

            /// <summary>
            /// Enum ChinesischHongkong for value: Chinesisch (Hongkong)
            /// </summary>
            [EnumMember(Value = "Chinesisch (Hongkong)")]
            ChinesischHongkong = 151,

            /// <summary>
            /// Enum ChinesischSingapur for value: Chinesisch (Singapur)
            /// </summary>
            [EnumMember(Value = "Chinesisch (Singapur)")]
            ChinesischSingapur = 152,

            /// <summary>
            /// Enum ChinesischTaiwan for value: Chinesisch (Taiwan)
            /// </summary>
            [EnumMember(Value = "Chinesisch (Taiwan)")]
            ChinesischTaiwan = 153

        }

        /// <summary>
        /// Language (Sprache).
        /// </summary>
        /// <value>Language (Sprache).</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// Position (Stelle). Please check your catalog in the Scopevisio client application for different values.
        /// </summary>
        /// <value>Position (Stelle). Please check your catalog in the Scopevisio client application for different values.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PositionEnum
        {
            /// <summary>
            /// Enum Abteilungsleiter for value: Abteilungsleiter
            /// </summary>
            [EnumMember(Value = "Abteilungsleiter")]
            Abteilungsleiter = 1,

            /// <summary>
            /// Enum Angestellter for value: Angestellter
            /// </summary>
            [EnumMember(Value = "Angestellter")]
            Angestellter = 2,

            /// <summary>
            /// Enum Bereichsleiter for value: Bereichsleiter
            /// </summary>
            [EnumMember(Value = "Bereichsleiter")]
            Bereichsleiter = 3,

            /// <summary>
            /// Enum Geschftsfhrer for value: Geschäftsführer
            /// </summary>
            [EnumMember(Value = "Geschäftsführer")]
            Geschftsfhrer = 4,

            /// <summary>
            /// Enum Projektleiter for value: Projektleiter
            /// </summary>
            [EnumMember(Value = "Projektleiter")]
            Projektleiter = 5,

            /// <summary>
            /// Enum LeiterEntwicklung for value: Leiter Entwicklung
            /// </summary>
            [EnumMember(Value = "Leiter Entwicklung")]
            LeiterEntwicklung = 6,

            /// <summary>
            /// Enum LeiterProduktion for value: Leiter Produktion
            /// </summary>
            [EnumMember(Value = "Leiter Produktion")]
            LeiterProduktion = 7,

            /// <summary>
            /// Enum Prokurist for value: Prokurist
            /// </summary>
            [EnumMember(Value = "Prokurist")]
            Prokurist = 8,

            /// <summary>
            /// Enum LeiterRechnungswesen for value: Leiter Rechnungswesen
            /// </summary>
            [EnumMember(Value = "Leiter Rechnungswesen")]
            LeiterRechnungswesen = 9,

            /// <summary>
            /// Enum Buchhalter for value: Buchhalter
            /// </summary>
            [EnumMember(Value = "Buchhalter")]
            Buchhalter = 10,

            /// <summary>
            /// Enum Finanzbuchhalter for value: Finanzbuchhalter
            /// </summary>
            [EnumMember(Value = "Finanzbuchhalter")]
            Finanzbuchhalter = 11,

            /// <summary>
            /// Enum Facharbeiter for value: Facharbeiter
            /// </summary>
            [EnumMember(Value = "Facharbeiter")]
            Facharbeiter = 12,

            /// <summary>
            /// Enum Auszubildender for value: Auszubildender
            /// </summary>
            [EnumMember(Value = "Auszubildender")]
            Auszubildender = 13,

            /// <summary>
            /// Enum ExternerMitarbeiter for value: Externer Mitarbeiter
            /// </summary>
            [EnumMember(Value = "Externer Mitarbeiter")]
            ExternerMitarbeiter = 14,

            /// <summary>
            /// Enum Berater for value: Berater
            /// </summary>
            [EnumMember(Value = "Berater")]
            Berater = 15,

            /// <summary>
            /// Enum ExternersteuerlicherBerater for value: Externer steuerlicher Berater
            /// </summary>
            [EnumMember(Value = "Externer steuerlicher Berater")]
            ExternersteuerlicherBerater = 16

        }

        /// <summary>
        /// Position (Stelle). Please check your catalog in the Scopevisio client application for different values.
        /// </summary>
        /// <value>Position (Stelle). Please check your catalog in the Scopevisio client application for different values.</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public PositionEnum? Position { get; set; }
        /// <summary>
        /// positionReplacement (Position). Same as position.Please check your catalog in the Scopevisio client application for different values.
        /// </summary>
        /// <value>positionReplacement (Position). Same as position.Please check your catalog in the Scopevisio client application for different values.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PositionReplacementEnum
        {
            /// <summary>
            /// Enum Abteilungsleiter for value: Abteilungsleiter
            /// </summary>
            [EnumMember(Value = "Abteilungsleiter")]
            Abteilungsleiter = 1,

            /// <summary>
            /// Enum Angestellter for value: Angestellter
            /// </summary>
            [EnumMember(Value = "Angestellter")]
            Angestellter = 2,

            /// <summary>
            /// Enum Bereichsleiter for value: Bereichsleiter
            /// </summary>
            [EnumMember(Value = "Bereichsleiter")]
            Bereichsleiter = 3,

            /// <summary>
            /// Enum Geschftsfhrer for value: Geschäftsführer
            /// </summary>
            [EnumMember(Value = "Geschäftsführer")]
            Geschftsfhrer = 4,

            /// <summary>
            /// Enum Projektleiter for value: Projektleiter
            /// </summary>
            [EnumMember(Value = "Projektleiter")]
            Projektleiter = 5,

            /// <summary>
            /// Enum LeiterEntwicklung for value: Leiter Entwicklung
            /// </summary>
            [EnumMember(Value = "Leiter Entwicklung")]
            LeiterEntwicklung = 6,

            /// <summary>
            /// Enum LeiterProduktion for value: Leiter Produktion
            /// </summary>
            [EnumMember(Value = "Leiter Produktion")]
            LeiterProduktion = 7,

            /// <summary>
            /// Enum Prokurist for value: Prokurist
            /// </summary>
            [EnumMember(Value = "Prokurist")]
            Prokurist = 8,

            /// <summary>
            /// Enum LeiterRechnungswesen for value: Leiter Rechnungswesen
            /// </summary>
            [EnumMember(Value = "Leiter Rechnungswesen")]
            LeiterRechnungswesen = 9,

            /// <summary>
            /// Enum Buchhalter for value: Buchhalter
            /// </summary>
            [EnumMember(Value = "Buchhalter")]
            Buchhalter = 10,

            /// <summary>
            /// Enum Finanzbuchhalter for value: Finanzbuchhalter
            /// </summary>
            [EnumMember(Value = "Finanzbuchhalter")]
            Finanzbuchhalter = 11,

            /// <summary>
            /// Enum Facharbeiter for value: Facharbeiter
            /// </summary>
            [EnumMember(Value = "Facharbeiter")]
            Facharbeiter = 12,

            /// <summary>
            /// Enum Auszubildender for value: Auszubildender
            /// </summary>
            [EnumMember(Value = "Auszubildender")]
            Auszubildender = 13,

            /// <summary>
            /// Enum ExternerMitarbeiter for value: Externer Mitarbeiter
            /// </summary>
            [EnumMember(Value = "Externer Mitarbeiter")]
            ExternerMitarbeiter = 14,

            /// <summary>
            /// Enum Berater for value: Berater
            /// </summary>
            [EnumMember(Value = "Berater")]
            Berater = 15,

            /// <summary>
            /// Enum ExternersteuerlicherBerater for value: Externer steuerlicher Berater
            /// </summary>
            [EnumMember(Value = "Externer steuerlicher Berater")]
            ExternersteuerlicherBerater = 16

        }

        /// <summary>
        /// positionReplacement (Position). Same as position.Please check your catalog in the Scopevisio client application for different values.
        /// </summary>
        /// <value>positionReplacement (Position). Same as position.Please check your catalog in the Scopevisio client application for different values.</value>
        [DataMember(Name="positionReplacement", EmitDefaultValue=false)]
        public PositionReplacementEnum? PositionReplacement { get; set; }
        /// <summary>
        /// Department (Abteilung). The value is set only if the contact is a personal contact. lease check your catalog in the Scopevisio client application for different values
        /// </summary>
        /// <value>Department (Abteilung). The value is set only if the contact is a personal contact. lease check your catalog in the Scopevisio client application for different values</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DepartmentEnum
        {
            /// <summary>
            /// Enum Absatz for value: Absatz
            /// </summary>
            [EnumMember(Value = "Absatz")]
            Absatz = 1,

            /// <summary>
            /// Enum Beschaffung for value: Beschaffung
            /// </summary>
            [EnumMember(Value = "Beschaffung")]
            Beschaffung = 2,

            /// <summary>
            /// Enum Buchhaltung for value: Buchhaltung
            /// </summary>
            [EnumMember(Value = "Buchhaltung")]
            Buchhaltung = 3,

            /// <summary>
            /// Enum Controlling for value: Controlling
            /// </summary>
            [EnumMember(Value = "Controlling")]
            Controlling = 4,

            /// <summary>
            /// Enum Einkauf for value: Einkauf
            /// </summary>
            [EnumMember(Value = "Einkauf")]
            Einkauf = 5,

            /// <summary>
            /// Enum Entwicklung for value: Entwicklung
            /// </summary>
            [EnumMember(Value = "Entwicklung")]
            Entwicklung = 6,

            /// <summary>
            /// Enum Finanzwesen for value: Finanzwesen
            /// </summary>
            [EnumMember(Value = "Finanzwesen")]
            Finanzwesen = 7,

            /// <summary>
            /// Enum Geschftsfhrung for value: Geschäftsführung
            /// </summary>
            [EnumMember(Value = "Geschäftsführung")]
            Geschftsfhrung = 8,

            /// <summary>
            /// Enum Geschftsfhrungsbro for value: Geschäftsführungsbüro
            /// </summary>
            [EnumMember(Value = "Geschäftsführungsbüro")]
            Geschftsfhrungsbro = 9,

            /// <summary>
            /// Enum Informationstechnologie for value: Informationstechnologie
            /// </summary>
            [EnumMember(Value = "Informationstechnologie")]
            Informationstechnologie = 10,

            /// <summary>
            /// Enum Kundenservice for value: Kundenservice
            /// </summary>
            [EnumMember(Value = "Kundenservice")]
            Kundenservice = 11,

            /// <summary>
            /// Enum Lager for value: Lager
            /// </summary>
            [EnumMember(Value = "Lager")]
            Lager = 12,

            /// <summary>
            /// Enum Logistik for value: Logistik
            /// </summary>
            [EnumMember(Value = "Logistik")]
            Logistik = 13,

            /// <summary>
            /// Enum Marketing for value: Marketing
            /// </summary>
            [EnumMember(Value = "Marketing")]
            Marketing = 14,

            /// <summary>
            /// Enum FfentlichkeitsarbeitPR for value: Öffentlichkeitsarbeit (PR)
            /// </summary>
            [EnumMember(Value = "Öffentlichkeitsarbeit (PR)")]
            FfentlichkeitsarbeitPR = 15,

            /// <summary>
            /// Enum Personal for value: Personal
            /// </summary>
            [EnumMember(Value = "Personal")]
            Personal = 16,

            /// <summary>
            /// Enum Planung for value: Planung
            /// </summary>
            [EnumMember(Value = "Planung")]
            Planung = 17,

            /// <summary>
            /// Enum Produktion for value: Produktion
            /// </summary>
            [EnumMember(Value = "Produktion")]
            Produktion = 18,

            /// <summary>
            /// Enum Projekte for value: Projekte
            /// </summary>
            [EnumMember(Value = "Projekte")]
            Projekte = 19,

            /// <summary>
            /// Enum Rechnungswesen for value: Rechnungswesen
            /// </summary>
            [EnumMember(Value = "Rechnungswesen")]
            Rechnungswesen = 20,

            /// <summary>
            /// Enum Support for value: Support
            /// </summary>
            [EnumMember(Value = "Support")]
            Support = 21,

            /// <summary>
            /// Enum Vertrieb for value: Vertrieb
            /// </summary>
            [EnumMember(Value = "Vertrieb")]
            Vertrieb = 22,

            /// <summary>
            /// Enum Vorstand for value: Vorstand
            /// </summary>
            [EnumMember(Value = "Vorstand")]
            Vorstand = 23,

            /// <summary>
            /// Enum Vorstandsbro for value: Vorstandsbüro
            /// </summary>
            [EnumMember(Value = "Vorstandsbüro")]
            Vorstandsbro = 24

        }

        /// <summary>
        /// Department (Abteilung). The value is set only if the contact is a personal contact. lease check your catalog in the Scopevisio client application for different values
        /// </summary>
        /// <value>Department (Abteilung). The value is set only if the contact is a personal contact. lease check your catalog in the Scopevisio client application for different values</value>
        [DataMember(Name="department", EmitDefaultValue=false)]
        public DepartmentEnum? Department { get; set; }
        /// <summary>
        /// Incoterms (Sphere Vendor/Rolle Lieferant). The allowable values depend on the system catalog in the Scopevisio client application.
        /// </summary>
        /// <value>Incoterms (Sphere Vendor/Rolle Lieferant). The allowable values depend on the system catalog in the Scopevisio client application.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeliveryTermIncotermEnum
        {
            /// <summary>
            /// Enum AbWerk for value: Ab Werk
            /// </summary>
            [EnumMember(Value = "Ab Werk")]
            AbWerk = 1,

            /// <summary>
            /// Enum FrachtundVersicherungbezahlt for value: Fracht und Versicherung bezahlt
            /// </summary>
            [EnumMember(Value = "Fracht und Versicherung bezahlt")]
            FrachtundVersicherungbezahlt = 2,

            /// <summary>
            /// Enum Frachtfrei for value: Frachtfrei
            /// </summary>
            [EnumMember(Value = "Frachtfrei")]
            Frachtfrei = 3,

            /// <summary>
            /// Enum FreianBord for value: Frei an Bord
            /// </summary>
            [EnumMember(Value = "Frei an Bord")]
            FreianBord = 4,

            /// <summary>
            /// Enum FreiFrachtfhrer for value: Frei Frachtführer
            /// </summary>
            [EnumMember(Value = "Frei Frachtführer")]
            FreiFrachtfhrer = 5,

            /// <summary>
            /// Enum FreiLngsseiteSchiff for value: Frei Längsseite Schiff
            /// </summary>
            [EnumMember(Value = "Frei Längsseite Schiff")]
            FreiLngsseiteSchiff = 6,

            /// <summary>
            /// Enum GeliefertabKaiverzollt for value: Geliefert ab Kai (verzollt)
            /// </summary>
            [EnumMember(Value = "Geliefert ab Kai (verzollt)")]
            GeliefertabKaiverzollt = 7,

            /// <summary>
            /// Enum GeliefertabSchiff for value: Geliefert ab Schiff
            /// </summary>
            [EnumMember(Value = "Geliefert ab Schiff")]
            GeliefertabSchiff = 8,

            /// <summary>
            /// Enum GeliefertbenannterOrt for value: Geliefert benannter Ort
            /// </summary>
            [EnumMember(Value = "Geliefert benannter Ort")]
            GeliefertbenannterOrt = 9,

            /// <summary>
            /// Enum GeliefertGrenze for value: Geliefert Grenze
            /// </summary>
            [EnumMember(Value = "Geliefert Grenze")]
            GeliefertGrenze = 10,

            /// <summary>
            /// Enum GeliefertTerminal for value: Geliefert Terminal
            /// </summary>
            [EnumMember(Value = "Geliefert Terminal")]
            GeliefertTerminal = 11,

            /// <summary>
            /// Enum Geliefertverzollt for value: Geliefert verzollt
            /// </summary>
            [EnumMember(Value = "Geliefert verzollt")]
            Geliefertverzollt = 12,

            /// <summary>
            /// Enum KostenundFracht for value: Kosten und Fracht
            /// </summary>
            [EnumMember(Value = "Kosten und Fracht")]
            KostenundFracht = 13,

            /// <summary>
            /// Enum Kosten for value: Kosten
            /// </summary>
            [EnumMember(Value = "Kosten")]
            Kosten = 14,

            /// <summary>
            /// Enum VersicherungundFracht for value: Versicherung und Fracht
            /// </summary>
            [EnumMember(Value = "Versicherung und Fracht")]
            VersicherungundFracht = 15

        }

        /// <summary>
        /// Incoterms (Sphere Vendor/Rolle Lieferant). The allowable values depend on the system catalog in the Scopevisio client application.
        /// </summary>
        /// <value>Incoterms (Sphere Vendor/Rolle Lieferant). The allowable values depend on the system catalog in the Scopevisio client application.</value>
        [DataMember(Name="deliveryTermIncoterm", EmitDefaultValue=false)]
        public DeliveryTermIncotermEnum? DeliveryTermIncoterm { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KontaktForm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KontaktForm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KontaktForm" /> class.
        /// </summary>
        /// <param name="person">true &#x3D; Person, false &#x3D; Gesellschaft. Evaluated only when creating a contact. (required) (default to false).</param>
        /// <param name="salutation">Anrede.</param>
        /// <param name="title">Titel.</param>
        /// <param name="lastname">Name/Gesellschaftsname (required).</param>
        /// <param name="firstname">Vorname.</param>
        /// <param name="paymentTypeName">paymentTypeName (Zahlungsart).Sets also pamymentType..</param>
        /// <param name="federalState">Bundesland [Hauptadresse].</param>
        /// <param name="federalState2">Bundesland [Rechnungsadresse].</param>
        /// <param name="federalState3">Bundesland [Lieferadresse].</param>
        /// <param name="federalState4">Bundesland [Postalisch].</param>
        /// <param name="federalState5">Bundesland [Privat].</param>
        /// <param name="federalState6">Bundesland [weiteres].</param>
        /// <param name="street1">Straße und Hausnummer [Hauptadresse].</param>
        /// <param name="street2">Straße und Hausnummer [Rechnungsadresse].</param>
        /// <param name="street3">Straße und Hausnummer [Lieferadresse].</param>
        /// <param name="street4">Straße und Hausnummer [Postalisch].</param>
        /// <param name="street5">Straße und Hausnummer [Privat].</param>
        /// <param name="street6">Straße und Hausnummer [weiteres].</param>
        /// <param name="addressExtra1">Zustellanweisung [c/o] [Hauptadresse].</param>
        /// <param name="addressExtra2">Zustellanweisung [c/o] [Rechnungsadresse].</param>
        /// <param name="addressExtra3">Zustellanweisung [c/o] [Lieferadresse].</param>
        /// <param name="addressExtra4">Zustellanweisung [c/o] [Postalisch].</param>
        /// <param name="addressExtra5">Zustellanweisung [c/o] [Privat].</param>
        /// <param name="addressExtra6">Zustellanweisung [c/o] [weiteres].</param>
        /// <param name="city1">Stadt [Hauptadresse].</param>
        /// <param name="city2">Stadt [Rechnungsadresse].</param>
        /// <param name="city3">Stadt [Lieferadresse].</param>
        /// <param name="city4">Stadt [Postalisch].</param>
        /// <param name="city5">Stadt [Privat].</param>
        /// <param name="city6">Stadt [weiteres].</param>
        /// <param name="postcode1">Postleitzahl [Hauptadresse].</param>
        /// <param name="postcode2">Postleitzahl [Rechnungsadresse].</param>
        /// <param name="postcode3">Postleitzahl [Lieferadresse].</param>
        /// <param name="postcode4">Postleitzahl [Postalisch].</param>
        /// <param name="postcode5">Postleitzahl [Privat].</param>
        /// <param name="postcode6">Postleitzahl.</param>
        /// <param name="country1">Land [Hauptadresse].</param>
        /// <param name="country2">Land [Rechnungsadresse].</param>
        /// <param name="country3">Land [Lieferadresse].</param>
        /// <param name="country4">Land [Postalisch].</param>
        /// <param name="country5">Land [Privat].</param>
        /// <param name="country6">Land [weiteres].</param>
        /// <param name="email">E-Mai-Addresse [Geschäftlich].</param>
        /// <param name="email2">E-Mail-Addresse [Geschäftlich 2].</param>
        /// <param name="email3">E-Mail-Addresse[Assistent].</param>
        /// <param name="email4">E-Mail-Addresse[Privat].</param>
        /// <param name="email5">E-Mail-Addresse[Privat 2].</param>
        /// <param name="email6">E-Mail-Addresse[weiteres].</param>
        /// <param name="phone">Telefon [Geschäftlich].</param>
        /// <param name="phone2">Telefon [Geschäftlich 2].</param>
        /// <param name="phone3">Telefon [Assistent].</param>
        /// <param name="phone4">Telefon [Privat].</param>
        /// <param name="phone5">Telefon [Privat 2].</param>
        /// <param name="phone6">Telefon [weiteres].</param>
        /// <param name="mobile">Mobiltelefon [Geschäftlich].</param>
        /// <param name="mobile2">Mobiltelefon  [Geschäftlich 2].</param>
        /// <param name="mobile3">Mobiltelefon  [Assistent].</param>
        /// <param name="mobile4">Mobiltelefon  [Privat].</param>
        /// <param name="mobile5">Mobiltelefon  [Privat 2].</param>
        /// <param name="mobile6">Mobiltelefon  [weiteres].</param>
        /// <param name="fax">Telefax [Geschäftlich].</param>
        /// <param name="fax2">Telefax [Geschäftlich 2].</param>
        /// <param name="fax3">Telefax [Assistent].</param>
        /// <param name="fax4">Telefax [Privat].</param>
        /// <param name="fax5">Telefax [Privat 2].</param>
        /// <param name="fax6">Telefax [weiteres].</param>
        /// <param name="language">Language (Sprache)..</param>
        /// <param name="position">Position (Stelle). Please check your catalog in the Scopevisio client application for different values..</param>
        /// <param name="positionReplacement">positionReplacement (Position). Same as position.Please check your catalog in the Scopevisio client application for different values..</param>
        /// <param name="department">Department (Abteilung). The value is set only if the contact is a personal contact. lease check your catalog in the Scopevisio client application for different values.</param>
        /// <param name="industry">Industry (Branche). Please check your catalog for allowable values..</param>
        /// <param name="customerNumber">Kontaktnummer.</param>
        /// <param name="legacyNumber">ID Vorsystem.</param>
        /// <param name="tags">Schlagwörter.</param>
        /// <param name="website">Website.</param>
        /// <param name="description">Description (Notiz). Use \&quot;\\\\\\n\&quot; to insert new line..</param>
        /// <param name="vatId">vatId/taxId. If the kontakt has personal account(s) assigned, the vatId will not be updated in the accounts..</param>
        /// <param name="currency">currency. If the kontakt has personal account(s) assigned, the currency will not be updated in the accounts..</param>
        /// <param name="customFields">Benutzerdefinierte Felder.</param>
        /// <param name="employers">Employer and visibility in role \&quot;Arbeitnehmer\&quot;.If more than one employer of type \&quot;Hauptarbeitgeber\&quot; is given, the last in the list is set in the contact card \&quot;Angaben zur Person\&quot;.</param>
        /// <param name="deliveryTermIncoterm">Incoterms (Sphere Vendor/Rolle Lieferant). The allowable values depend on the system catalog in the Scopevisio client application..</param>
        /// <param name="deliveryTermIncotermLocation">Incoterms-Ort (Sphere Vendor/Rolle Lieferant).</param>
        /// <param name="ownerUid">ownerUid (Kontaktinhaber). The UID of a scopevisio user.</param>
        /// <param name="permissionType">0 &#x3D; Öffentlich, 1 &#x3D; Benutzerdefiniert, 2 &#x3D; Persönlich.</param>
        /// <param name="readPermissionProfiles">comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1..</param>
        /// <param name="readPermissionLogins">comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1..</param>
        /// <param name="writePermissionProfiles">comma separated list of profiles for full access, evaluated only if permissionType equals 1..</param>
        /// <param name="writePermissionLogins">comma separated list of user login emails, evaluated only if permissionType equals 1..</param>
        public KontaktForm(bool person = false, SalutationEnum? salutation = default(SalutationEnum?), TitleEnum? title = default(TitleEnum?), string lastname = default(string), string firstname = default(string), PaymentTypeNameEnum? paymentTypeName = default(PaymentTypeNameEnum?), string federalState = default(string), string federalState2 = default(string), string federalState3 = default(string), string federalState4 = default(string), string federalState5 = default(string), string federalState6 = default(string), string street1 = default(string), string street2 = default(string), string street3 = default(string), string street4 = default(string), string street5 = default(string), string street6 = default(string), string addressExtra1 = default(string), string addressExtra2 = default(string), string addressExtra3 = default(string), string addressExtra4 = default(string), string addressExtra5 = default(string), string addressExtra6 = default(string), string city1 = default(string), string city2 = default(string), string city3 = default(string), string city4 = default(string), string city5 = default(string), string city6 = default(string), string postcode1 = default(string), string postcode2 = default(string), string postcode3 = default(string), string postcode4 = default(string), string postcode5 = default(string), string postcode6 = default(string), string country1 = default(string), string country2 = default(string), string country3 = default(string), string country4 = default(string), string country5 = default(string), string country6 = default(string), string email = default(string), string email2 = default(string), string email3 = default(string), string email4 = default(string), string email5 = default(string), string email6 = default(string), string phone = default(string), string phone2 = default(string), string phone3 = default(string), string phone4 = default(string), string phone5 = default(string), string phone6 = default(string), string mobile = default(string), string mobile2 = default(string), string mobile3 = default(string), string mobile4 = default(string), string mobile5 = default(string), string mobile6 = default(string), string fax = default(string), string fax2 = default(string), string fax3 = default(string), string fax4 = default(string), string fax5 = default(string), string fax6 = default(string), LanguageEnum? language = default(LanguageEnum?), PositionEnum? position = default(PositionEnum?), PositionReplacementEnum? positionReplacement = default(PositionReplacementEnum?), DepartmentEnum? department = default(DepartmentEnum?), string industry = default(string), string customerNumber = default(string), string legacyNumber = default(string), string tags = default(string), string website = default(string), string description = default(string), string vatId = default(string), string currency = default(string), List<CustomField> customFields = default(List<CustomField>), List<Employer> employers = default(List<Employer>), DeliveryTermIncotermEnum? deliveryTermIncoterm = default(DeliveryTermIncotermEnum?), string deliveryTermIncotermLocation = default(string), string ownerUid = default(string), long permissionType = default(long), string readPermissionProfiles = default(string), string readPermissionLogins = default(string), string writePermissionProfiles = default(string), string writePermissionLogins = default(string))
        {
            // to ensure "person" is required (not null)
            if (person == null)
            {
                throw new InvalidDataException("person is a required property for KontaktForm and cannot be null");
            }
            else
            {
                this.Person = person;
            }
            
            // to ensure "lastname" is required (not null)
            if (lastname == null)
            {
                throw new InvalidDataException("lastname is a required property for KontaktForm and cannot be null");
            }
            else
            {
                this.Lastname = lastname;
            }
            
            this.Salutation = salutation;
            this.Title = title;
            this.Firstname = firstname;
            this.PaymentTypeName = paymentTypeName;
            this.FederalState = federalState;
            this.FederalState2 = federalState2;
            this.FederalState3 = federalState3;
            this.FederalState4 = federalState4;
            this.FederalState5 = federalState5;
            this.FederalState6 = federalState6;
            this.Street1 = street1;
            this.Street2 = street2;
            this.Street3 = street3;
            this.Street4 = street4;
            this.Street5 = street5;
            this.Street6 = street6;
            this.AddressExtra1 = addressExtra1;
            this.AddressExtra2 = addressExtra2;
            this.AddressExtra3 = addressExtra3;
            this.AddressExtra4 = addressExtra4;
            this.AddressExtra5 = addressExtra5;
            this.AddressExtra6 = addressExtra6;
            this.City1 = city1;
            this.City2 = city2;
            this.City3 = city3;
            this.City4 = city4;
            this.City5 = city5;
            this.City6 = city6;
            this.Postcode1 = postcode1;
            this.Postcode2 = postcode2;
            this.Postcode3 = postcode3;
            this.Postcode4 = postcode4;
            this.Postcode5 = postcode5;
            this.Postcode6 = postcode6;
            this.Country1 = country1;
            this.Country2 = country2;
            this.Country3 = country3;
            this.Country4 = country4;
            this.Country5 = country5;
            this.Country6 = country6;
            this.Email = email;
            this.Email2 = email2;
            this.Email3 = email3;
            this.Email4 = email4;
            this.Email5 = email5;
            this.Email6 = email6;
            this.Phone = phone;
            this.Phone2 = phone2;
            this.Phone3 = phone3;
            this.Phone4 = phone4;
            this.Phone5 = phone5;
            this.Phone6 = phone6;
            this.Mobile = mobile;
            this.Mobile2 = mobile2;
            this.Mobile3 = mobile3;
            this.Mobile4 = mobile4;
            this.Mobile5 = mobile5;
            this.Mobile6 = mobile6;
            this.Fax = fax;
            this.Fax2 = fax2;
            this.Fax3 = fax3;
            this.Fax4 = fax4;
            this.Fax5 = fax5;
            this.Fax6 = fax6;
            this.Language = language;
            this.Position = position;
            this.PositionReplacement = positionReplacement;
            this.Department = department;
            this.Industry = industry;
            this.CustomerNumber = customerNumber;
            this.LegacyNumber = legacyNumber;
            this.Tags = tags;
            this.Website = website;
            this.Description = description;
            this.VatId = vatId;
            this.Currency = currency;
            this.CustomFields = customFields;
            this.Employers = employers;
            this.DeliveryTermIncoterm = deliveryTermIncoterm;
            this.DeliveryTermIncotermLocation = deliveryTermIncotermLocation;
            this.OwnerUid = ownerUid;
            this.PermissionType = permissionType;
            this.ReadPermissionProfiles = readPermissionProfiles;
            this.ReadPermissionLogins = readPermissionLogins;
            this.WritePermissionProfiles = writePermissionProfiles;
            this.WritePermissionLogins = writePermissionLogins;
        }
        
        /// <summary>
        /// true &#x3D; Person, false &#x3D; Gesellschaft. Evaluated only when creating a contact.
        /// </summary>
        /// <value>true &#x3D; Person, false &#x3D; Gesellschaft. Evaluated only when creating a contact.</value>
        [DataMember(Name="person", EmitDefaultValue=false)]
        public bool Person { get; set; }



        /// <summary>
        /// Name/Gesellschaftsname
        /// </summary>
        /// <value>Name/Gesellschaftsname</value>
        [DataMember(Name="lastname", EmitDefaultValue=false)]
        public string Lastname { get; set; }

        /// <summary>
        /// Vorname
        /// </summary>
        /// <value>Vorname</value>
        [DataMember(Name="firstname", EmitDefaultValue=false)]
        public string Firstname { get; set; }


        /// <summary>
        /// Bundesland [Hauptadresse]
        /// </summary>
        /// <value>Bundesland [Hauptadresse]</value>
        [DataMember(Name="federalState", EmitDefaultValue=false)]
        public string FederalState { get; set; }

        /// <summary>
        /// Bundesland [Rechnungsadresse]
        /// </summary>
        /// <value>Bundesland [Rechnungsadresse]</value>
        [DataMember(Name="federalState2", EmitDefaultValue=false)]
        public string FederalState2 { get; set; }

        /// <summary>
        /// Bundesland [Lieferadresse]
        /// </summary>
        /// <value>Bundesland [Lieferadresse]</value>
        [DataMember(Name="federalState3", EmitDefaultValue=false)]
        public string FederalState3 { get; set; }

        /// <summary>
        /// Bundesland [Postalisch]
        /// </summary>
        /// <value>Bundesland [Postalisch]</value>
        [DataMember(Name="federalState4", EmitDefaultValue=false)]
        public string FederalState4 { get; set; }

        /// <summary>
        /// Bundesland [Privat]
        /// </summary>
        /// <value>Bundesland [Privat]</value>
        [DataMember(Name="federalState5", EmitDefaultValue=false)]
        public string FederalState5 { get; set; }

        /// <summary>
        /// Bundesland [weiteres]
        /// </summary>
        /// <value>Bundesland [weiteres]</value>
        [DataMember(Name="federalState6", EmitDefaultValue=false)]
        public string FederalState6 { get; set; }

        /// <summary>
        /// Straße und Hausnummer [Hauptadresse]
        /// </summary>
        /// <value>Straße und Hausnummer [Hauptadresse]</value>
        [DataMember(Name="street1", EmitDefaultValue=false)]
        public string Street1 { get; set; }

        /// <summary>
        /// Straße und Hausnummer [Rechnungsadresse]
        /// </summary>
        /// <value>Straße und Hausnummer [Rechnungsadresse]</value>
        [DataMember(Name="street2", EmitDefaultValue=false)]
        public string Street2 { get; set; }

        /// <summary>
        /// Straße und Hausnummer [Lieferadresse]
        /// </summary>
        /// <value>Straße und Hausnummer [Lieferadresse]</value>
        [DataMember(Name="street3", EmitDefaultValue=false)]
        public string Street3 { get; set; }

        /// <summary>
        /// Straße und Hausnummer [Postalisch]
        /// </summary>
        /// <value>Straße und Hausnummer [Postalisch]</value>
        [DataMember(Name="street4", EmitDefaultValue=false)]
        public string Street4 { get; set; }

        /// <summary>
        /// Straße und Hausnummer [Privat]
        /// </summary>
        /// <value>Straße und Hausnummer [Privat]</value>
        [DataMember(Name="street5", EmitDefaultValue=false)]
        public string Street5 { get; set; }

        /// <summary>
        /// Straße und Hausnummer [weiteres]
        /// </summary>
        /// <value>Straße und Hausnummer [weiteres]</value>
        [DataMember(Name="street6", EmitDefaultValue=false)]
        public string Street6 { get; set; }

        /// <summary>
        /// Zustellanweisung [c/o] [Hauptadresse]
        /// </summary>
        /// <value>Zustellanweisung [c/o] [Hauptadresse]</value>
        [DataMember(Name="addressExtra1", EmitDefaultValue=false)]
        public string AddressExtra1 { get; set; }

        /// <summary>
        /// Zustellanweisung [c/o] [Rechnungsadresse]
        /// </summary>
        /// <value>Zustellanweisung [c/o] [Rechnungsadresse]</value>
        [DataMember(Name="addressExtra2", EmitDefaultValue=false)]
        public string AddressExtra2 { get; set; }

        /// <summary>
        /// Zustellanweisung [c/o] [Lieferadresse]
        /// </summary>
        /// <value>Zustellanweisung [c/o] [Lieferadresse]</value>
        [DataMember(Name="addressExtra3", EmitDefaultValue=false)]
        public string AddressExtra3 { get; set; }

        /// <summary>
        /// Zustellanweisung [c/o] [Postalisch]
        /// </summary>
        /// <value>Zustellanweisung [c/o] [Postalisch]</value>
        [DataMember(Name="addressExtra4", EmitDefaultValue=false)]
        public string AddressExtra4 { get; set; }

        /// <summary>
        /// Zustellanweisung [c/o] [Privat]
        /// </summary>
        /// <value>Zustellanweisung [c/o] [Privat]</value>
        [DataMember(Name="addressExtra5", EmitDefaultValue=false)]
        public string AddressExtra5 { get; set; }

        /// <summary>
        /// Zustellanweisung [c/o] [weiteres]
        /// </summary>
        /// <value>Zustellanweisung [c/o] [weiteres]</value>
        [DataMember(Name="addressExtra6", EmitDefaultValue=false)]
        public string AddressExtra6 { get; set; }

        /// <summary>
        /// Stadt [Hauptadresse]
        /// </summary>
        /// <value>Stadt [Hauptadresse]</value>
        [DataMember(Name="city1", EmitDefaultValue=false)]
        public string City1 { get; set; }

        /// <summary>
        /// Stadt [Rechnungsadresse]
        /// </summary>
        /// <value>Stadt [Rechnungsadresse]</value>
        [DataMember(Name="city2", EmitDefaultValue=false)]
        public string City2 { get; set; }

        /// <summary>
        /// Stadt [Lieferadresse]
        /// </summary>
        /// <value>Stadt [Lieferadresse]</value>
        [DataMember(Name="city3", EmitDefaultValue=false)]
        public string City3 { get; set; }

        /// <summary>
        /// Stadt [Postalisch]
        /// </summary>
        /// <value>Stadt [Postalisch]</value>
        [DataMember(Name="city4", EmitDefaultValue=false)]
        public string City4 { get; set; }

        /// <summary>
        /// Stadt [Privat]
        /// </summary>
        /// <value>Stadt [Privat]</value>
        [DataMember(Name="city5", EmitDefaultValue=false)]
        public string City5 { get; set; }

        /// <summary>
        /// Stadt [weiteres]
        /// </summary>
        /// <value>Stadt [weiteres]</value>
        [DataMember(Name="city6", EmitDefaultValue=false)]
        public string City6 { get; set; }

        /// <summary>
        /// Postleitzahl [Hauptadresse]
        /// </summary>
        /// <value>Postleitzahl [Hauptadresse]</value>
        [DataMember(Name="postcode1", EmitDefaultValue=false)]
        public string Postcode1 { get; set; }

        /// <summary>
        /// Postleitzahl [Rechnungsadresse]
        /// </summary>
        /// <value>Postleitzahl [Rechnungsadresse]</value>
        [DataMember(Name="postcode2", EmitDefaultValue=false)]
        public string Postcode2 { get; set; }

        /// <summary>
        /// Postleitzahl [Lieferadresse]
        /// </summary>
        /// <value>Postleitzahl [Lieferadresse]</value>
        [DataMember(Name="postcode3", EmitDefaultValue=false)]
        public string Postcode3 { get; set; }

        /// <summary>
        /// Postleitzahl [Postalisch]
        /// </summary>
        /// <value>Postleitzahl [Postalisch]</value>
        [DataMember(Name="postcode4", EmitDefaultValue=false)]
        public string Postcode4 { get; set; }

        /// <summary>
        /// Postleitzahl [Privat]
        /// </summary>
        /// <value>Postleitzahl [Privat]</value>
        [DataMember(Name="postcode5", EmitDefaultValue=false)]
        public string Postcode5 { get; set; }

        /// <summary>
        /// Postleitzahl
        /// </summary>
        /// <value>Postleitzahl</value>
        [DataMember(Name="postcode6", EmitDefaultValue=false)]
        public string Postcode6 { get; set; }

        /// <summary>
        /// Land [Hauptadresse]
        /// </summary>
        /// <value>Land [Hauptadresse]</value>
        [DataMember(Name="country1", EmitDefaultValue=false)]
        public string Country1 { get; set; }

        /// <summary>
        /// Land [Rechnungsadresse]
        /// </summary>
        /// <value>Land [Rechnungsadresse]</value>
        [DataMember(Name="country2", EmitDefaultValue=false)]
        public string Country2 { get; set; }

        /// <summary>
        /// Land [Lieferadresse]
        /// </summary>
        /// <value>Land [Lieferadresse]</value>
        [DataMember(Name="country3", EmitDefaultValue=false)]
        public string Country3 { get; set; }

        /// <summary>
        /// Land [Postalisch]
        /// </summary>
        /// <value>Land [Postalisch]</value>
        [DataMember(Name="country4", EmitDefaultValue=false)]
        public string Country4 { get; set; }

        /// <summary>
        /// Land [Privat]
        /// </summary>
        /// <value>Land [Privat]</value>
        [DataMember(Name="country5", EmitDefaultValue=false)]
        public string Country5 { get; set; }

        /// <summary>
        /// Land [weiteres]
        /// </summary>
        /// <value>Land [weiteres]</value>
        [DataMember(Name="country6", EmitDefaultValue=false)]
        public string Country6 { get; set; }

        /// <summary>
        /// E-Mai-Addresse [Geschäftlich]
        /// </summary>
        /// <value>E-Mai-Addresse [Geschäftlich]</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// E-Mail-Addresse [Geschäftlich 2]
        /// </summary>
        /// <value>E-Mail-Addresse [Geschäftlich 2]</value>
        [DataMember(Name="email2", EmitDefaultValue=false)]
        public string Email2 { get; set; }

        /// <summary>
        /// E-Mail-Addresse[Assistent]
        /// </summary>
        /// <value>E-Mail-Addresse[Assistent]</value>
        [DataMember(Name="email3", EmitDefaultValue=false)]
        public string Email3 { get; set; }

        /// <summary>
        /// E-Mail-Addresse[Privat]
        /// </summary>
        /// <value>E-Mail-Addresse[Privat]</value>
        [DataMember(Name="email4", EmitDefaultValue=false)]
        public string Email4 { get; set; }

        /// <summary>
        /// E-Mail-Addresse[Privat 2]
        /// </summary>
        /// <value>E-Mail-Addresse[Privat 2]</value>
        [DataMember(Name="email5", EmitDefaultValue=false)]
        public string Email5 { get; set; }

        /// <summary>
        /// E-Mail-Addresse[weiteres]
        /// </summary>
        /// <value>E-Mail-Addresse[weiteres]</value>
        [DataMember(Name="email6", EmitDefaultValue=false)]
        public string Email6 { get; set; }

        /// <summary>
        /// Telefon [Geschäftlich]
        /// </summary>
        /// <value>Telefon [Geschäftlich]</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Telefon [Geschäftlich 2]
        /// </summary>
        /// <value>Telefon [Geschäftlich 2]</value>
        [DataMember(Name="phone2", EmitDefaultValue=false)]
        public string Phone2 { get; set; }

        /// <summary>
        /// Telefon [Assistent]
        /// </summary>
        /// <value>Telefon [Assistent]</value>
        [DataMember(Name="phone3", EmitDefaultValue=false)]
        public string Phone3 { get; set; }

        /// <summary>
        /// Telefon [Privat]
        /// </summary>
        /// <value>Telefon [Privat]</value>
        [DataMember(Name="phone4", EmitDefaultValue=false)]
        public string Phone4 { get; set; }

        /// <summary>
        /// Telefon [Privat 2]
        /// </summary>
        /// <value>Telefon [Privat 2]</value>
        [DataMember(Name="phone5", EmitDefaultValue=false)]
        public string Phone5 { get; set; }

        /// <summary>
        /// Telefon [weiteres]
        /// </summary>
        /// <value>Telefon [weiteres]</value>
        [DataMember(Name="phone6", EmitDefaultValue=false)]
        public string Phone6 { get; set; }

        /// <summary>
        /// Mobiltelefon [Geschäftlich]
        /// </summary>
        /// <value>Mobiltelefon [Geschäftlich]</value>
        [DataMember(Name="mobile", EmitDefaultValue=false)]
        public string Mobile { get; set; }

        /// <summary>
        /// Mobiltelefon  [Geschäftlich 2]
        /// </summary>
        /// <value>Mobiltelefon  [Geschäftlich 2]</value>
        [DataMember(Name="mobile2", EmitDefaultValue=false)]
        public string Mobile2 { get; set; }

        /// <summary>
        /// Mobiltelefon  [Assistent]
        /// </summary>
        /// <value>Mobiltelefon  [Assistent]</value>
        [DataMember(Name="mobile3", EmitDefaultValue=false)]
        public string Mobile3 { get; set; }

        /// <summary>
        /// Mobiltelefon  [Privat]
        /// </summary>
        /// <value>Mobiltelefon  [Privat]</value>
        [DataMember(Name="mobile4", EmitDefaultValue=false)]
        public string Mobile4 { get; set; }

        /// <summary>
        /// Mobiltelefon  [Privat 2]
        /// </summary>
        /// <value>Mobiltelefon  [Privat 2]</value>
        [DataMember(Name="mobile5", EmitDefaultValue=false)]
        public string Mobile5 { get; set; }

        /// <summary>
        /// Mobiltelefon  [weiteres]
        /// </summary>
        /// <value>Mobiltelefon  [weiteres]</value>
        [DataMember(Name="mobile6", EmitDefaultValue=false)]
        public string Mobile6 { get; set; }

        /// <summary>
        /// Telefax [Geschäftlich]
        /// </summary>
        /// <value>Telefax [Geschäftlich]</value>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public string Fax { get; set; }

        /// <summary>
        /// Telefax [Geschäftlich 2]
        /// </summary>
        /// <value>Telefax [Geschäftlich 2]</value>
        [DataMember(Name="fax2", EmitDefaultValue=false)]
        public string Fax2 { get; set; }

        /// <summary>
        /// Telefax [Assistent]
        /// </summary>
        /// <value>Telefax [Assistent]</value>
        [DataMember(Name="fax3", EmitDefaultValue=false)]
        public string Fax3 { get; set; }

        /// <summary>
        /// Telefax [Privat]
        /// </summary>
        /// <value>Telefax [Privat]</value>
        [DataMember(Name="fax4", EmitDefaultValue=false)]
        public string Fax4 { get; set; }

        /// <summary>
        /// Telefax [Privat 2]
        /// </summary>
        /// <value>Telefax [Privat 2]</value>
        [DataMember(Name="fax5", EmitDefaultValue=false)]
        public string Fax5 { get; set; }

        /// <summary>
        /// Telefax [weiteres]
        /// </summary>
        /// <value>Telefax [weiteres]</value>
        [DataMember(Name="fax6", EmitDefaultValue=false)]
        public string Fax6 { get; set; }





        /// <summary>
        /// Industry (Branche). Please check your catalog for allowable values.
        /// </summary>
        /// <value>Industry (Branche). Please check your catalog for allowable values.</value>
        [DataMember(Name="industry", EmitDefaultValue=false)]
        public string Industry { get; set; }

        /// <summary>
        /// Kontaktnummer
        /// </summary>
        /// <value>Kontaktnummer</value>
        [DataMember(Name="customerNumber", EmitDefaultValue=false)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// ID Vorsystem
        /// </summary>
        /// <value>ID Vorsystem</value>
        [DataMember(Name="legacyNumber", EmitDefaultValue=false)]
        public string LegacyNumber { get; set; }

        /// <summary>
        /// Schlagwörter
        /// </summary>
        /// <value>Schlagwörter</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public string Tags { get; set; }

        /// <summary>
        /// Website
        /// </summary>
        /// <value>Website</value>
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; set; }

        /// <summary>
        /// Description (Notiz). Use \&quot;\\\\\\n\&quot; to insert new line.
        /// </summary>
        /// <value>Description (Notiz). Use \&quot;\\\\\\n\&quot; to insert new line.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// vatId/taxId. If the kontakt has personal account(s) assigned, the vatId will not be updated in the accounts.
        /// </summary>
        /// <value>vatId/taxId. If the kontakt has personal account(s) assigned, the vatId will not be updated in the accounts.</value>
        [DataMember(Name="vatId", EmitDefaultValue=false)]
        public string VatId { get; set; }

        /// <summary>
        /// currency. If the kontakt has personal account(s) assigned, the currency will not be updated in the accounts.
        /// </summary>
        /// <value>currency. If the kontakt has personal account(s) assigned, the currency will not be updated in the accounts.</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Benutzerdefinierte Felder
        /// </summary>
        /// <value>Benutzerdefinierte Felder</value>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public List<CustomField> CustomFields { get; set; }

        /// <summary>
        /// Employer and visibility in role \&quot;Arbeitnehmer\&quot;.If more than one employer of type \&quot;Hauptarbeitgeber\&quot; is given, the last in the list is set in the contact card \&quot;Angaben zur Person\&quot;
        /// </summary>
        /// <value>Employer and visibility in role \&quot;Arbeitnehmer\&quot;.If more than one employer of type \&quot;Hauptarbeitgeber\&quot; is given, the last in the list is set in the contact card \&quot;Angaben zur Person\&quot;</value>
        [DataMember(Name="employers", EmitDefaultValue=false)]
        public List<Employer> Employers { get; set; }


        /// <summary>
        /// Incoterms-Ort (Sphere Vendor/Rolle Lieferant)
        /// </summary>
        /// <value>Incoterms-Ort (Sphere Vendor/Rolle Lieferant)</value>
        [DataMember(Name="deliveryTermIncotermLocation", EmitDefaultValue=false)]
        public string DeliveryTermIncotermLocation { get; set; }

        /// <summary>
        /// ownerUid (Kontaktinhaber). The UID of a scopevisio user
        /// </summary>
        /// <value>ownerUid (Kontaktinhaber). The UID of a scopevisio user</value>
        [DataMember(Name="ownerUid", EmitDefaultValue=false)]
        public string OwnerUid { get; set; }

        /// <summary>
        /// 0 &#x3D; Öffentlich, 1 &#x3D; Benutzerdefiniert, 2 &#x3D; Persönlich
        /// </summary>
        /// <value>0 &#x3D; Öffentlich, 1 &#x3D; Benutzerdefiniert, 2 &#x3D; Persönlich</value>
        [DataMember(Name="permissionType", EmitDefaultValue=false)]
        public long PermissionType { get; set; }

        /// <summary>
        /// comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="readPermissionProfiles", EmitDefaultValue=false)]
        public string ReadPermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="readPermissionLogins", EmitDefaultValue=false)]
        public string ReadPermissionLogins { get; set; }

        /// <summary>
        /// comma separated list of profiles for full access, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of profiles for full access, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="writePermissionProfiles", EmitDefaultValue=false)]
        public string WritePermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of user login emails, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="writePermissionLogins", EmitDefaultValue=false)]
        public string WritePermissionLogins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KontaktForm {\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  Salutation: ").Append(Salutation).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("  PaymentTypeName: ").Append(PaymentTypeName).Append("\n");
            sb.Append("  FederalState: ").Append(FederalState).Append("\n");
            sb.Append("  FederalState2: ").Append(FederalState2).Append("\n");
            sb.Append("  FederalState3: ").Append(FederalState3).Append("\n");
            sb.Append("  FederalState4: ").Append(FederalState4).Append("\n");
            sb.Append("  FederalState5: ").Append(FederalState5).Append("\n");
            sb.Append("  FederalState6: ").Append(FederalState6).Append("\n");
            sb.Append("  Street1: ").Append(Street1).Append("\n");
            sb.Append("  Street2: ").Append(Street2).Append("\n");
            sb.Append("  Street3: ").Append(Street3).Append("\n");
            sb.Append("  Street4: ").Append(Street4).Append("\n");
            sb.Append("  Street5: ").Append(Street5).Append("\n");
            sb.Append("  Street6: ").Append(Street6).Append("\n");
            sb.Append("  AddressExtra1: ").Append(AddressExtra1).Append("\n");
            sb.Append("  AddressExtra2: ").Append(AddressExtra2).Append("\n");
            sb.Append("  AddressExtra3: ").Append(AddressExtra3).Append("\n");
            sb.Append("  AddressExtra4: ").Append(AddressExtra4).Append("\n");
            sb.Append("  AddressExtra5: ").Append(AddressExtra5).Append("\n");
            sb.Append("  AddressExtra6: ").Append(AddressExtra6).Append("\n");
            sb.Append("  City1: ").Append(City1).Append("\n");
            sb.Append("  City2: ").Append(City2).Append("\n");
            sb.Append("  City3: ").Append(City3).Append("\n");
            sb.Append("  City4: ").Append(City4).Append("\n");
            sb.Append("  City5: ").Append(City5).Append("\n");
            sb.Append("  City6: ").Append(City6).Append("\n");
            sb.Append("  Postcode1: ").Append(Postcode1).Append("\n");
            sb.Append("  Postcode2: ").Append(Postcode2).Append("\n");
            sb.Append("  Postcode3: ").Append(Postcode3).Append("\n");
            sb.Append("  Postcode4: ").Append(Postcode4).Append("\n");
            sb.Append("  Postcode5: ").Append(Postcode5).Append("\n");
            sb.Append("  Postcode6: ").Append(Postcode6).Append("\n");
            sb.Append("  Country1: ").Append(Country1).Append("\n");
            sb.Append("  Country2: ").Append(Country2).Append("\n");
            sb.Append("  Country3: ").Append(Country3).Append("\n");
            sb.Append("  Country4: ").Append(Country4).Append("\n");
            sb.Append("  Country5: ").Append(Country5).Append("\n");
            sb.Append("  Country6: ").Append(Country6).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Email2: ").Append(Email2).Append("\n");
            sb.Append("  Email3: ").Append(Email3).Append("\n");
            sb.Append("  Email4: ").Append(Email4).Append("\n");
            sb.Append("  Email5: ").Append(Email5).Append("\n");
            sb.Append("  Email6: ").Append(Email6).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Phone2: ").Append(Phone2).Append("\n");
            sb.Append("  Phone3: ").Append(Phone3).Append("\n");
            sb.Append("  Phone4: ").Append(Phone4).Append("\n");
            sb.Append("  Phone5: ").Append(Phone5).Append("\n");
            sb.Append("  Phone6: ").Append(Phone6).Append("\n");
            sb.Append("  Mobile: ").Append(Mobile).Append("\n");
            sb.Append("  Mobile2: ").Append(Mobile2).Append("\n");
            sb.Append("  Mobile3: ").Append(Mobile3).Append("\n");
            sb.Append("  Mobile4: ").Append(Mobile4).Append("\n");
            sb.Append("  Mobile5: ").Append(Mobile5).Append("\n");
            sb.Append("  Mobile6: ").Append(Mobile6).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Fax2: ").Append(Fax2).Append("\n");
            sb.Append("  Fax3: ").Append(Fax3).Append("\n");
            sb.Append("  Fax4: ").Append(Fax4).Append("\n");
            sb.Append("  Fax5: ").Append(Fax5).Append("\n");
            sb.Append("  Fax6: ").Append(Fax6).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  PositionReplacement: ").Append(PositionReplacement).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  Industry: ").Append(Industry).Append("\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  LegacyNumber: ").Append(LegacyNumber).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  VatId: ").Append(VatId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Employers: ").Append(Employers).Append("\n");
            sb.Append("  DeliveryTermIncoterm: ").Append(DeliveryTermIncoterm).Append("\n");
            sb.Append("  DeliveryTermIncotermLocation: ").Append(DeliveryTermIncotermLocation).Append("\n");
            sb.Append("  OwnerUid: ").Append(OwnerUid).Append("\n");
            sb.Append("  PermissionType: ").Append(PermissionType).Append("\n");
            sb.Append("  ReadPermissionProfiles: ").Append(ReadPermissionProfiles).Append("\n");
            sb.Append("  ReadPermissionLogins: ").Append(ReadPermissionLogins).Append("\n");
            sb.Append("  WritePermissionProfiles: ").Append(WritePermissionProfiles).Append("\n");
            sb.Append("  WritePermissionLogins: ").Append(WritePermissionLogins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KontaktForm);
        }

        /// <summary>
        /// Returns true if KontaktForm instances are equal
        /// </summary>
        /// <param name="input">Instance of KontaktForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KontaktForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Person == input.Person ||
                    (this.Person != null &&
                    this.Person.Equals(input.Person))
                ) && 
                (
                    this.Salutation == input.Salutation ||
                    (this.Salutation != null &&
                    this.Salutation.Equals(input.Salutation))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Lastname == input.Lastname ||
                    (this.Lastname != null &&
                    this.Lastname.Equals(input.Lastname))
                ) && 
                (
                    this.Firstname == input.Firstname ||
                    (this.Firstname != null &&
                    this.Firstname.Equals(input.Firstname))
                ) && 
                (
                    this.PaymentTypeName == input.PaymentTypeName ||
                    (this.PaymentTypeName != null &&
                    this.PaymentTypeName.Equals(input.PaymentTypeName))
                ) && 
                (
                    this.FederalState == input.FederalState ||
                    (this.FederalState != null &&
                    this.FederalState.Equals(input.FederalState))
                ) && 
                (
                    this.FederalState2 == input.FederalState2 ||
                    (this.FederalState2 != null &&
                    this.FederalState2.Equals(input.FederalState2))
                ) && 
                (
                    this.FederalState3 == input.FederalState3 ||
                    (this.FederalState3 != null &&
                    this.FederalState3.Equals(input.FederalState3))
                ) && 
                (
                    this.FederalState4 == input.FederalState4 ||
                    (this.FederalState4 != null &&
                    this.FederalState4.Equals(input.FederalState4))
                ) && 
                (
                    this.FederalState5 == input.FederalState5 ||
                    (this.FederalState5 != null &&
                    this.FederalState5.Equals(input.FederalState5))
                ) && 
                (
                    this.FederalState6 == input.FederalState6 ||
                    (this.FederalState6 != null &&
                    this.FederalState6.Equals(input.FederalState6))
                ) && 
                (
                    this.Street1 == input.Street1 ||
                    (this.Street1 != null &&
                    this.Street1.Equals(input.Street1))
                ) && 
                (
                    this.Street2 == input.Street2 ||
                    (this.Street2 != null &&
                    this.Street2.Equals(input.Street2))
                ) && 
                (
                    this.Street3 == input.Street3 ||
                    (this.Street3 != null &&
                    this.Street3.Equals(input.Street3))
                ) && 
                (
                    this.Street4 == input.Street4 ||
                    (this.Street4 != null &&
                    this.Street4.Equals(input.Street4))
                ) && 
                (
                    this.Street5 == input.Street5 ||
                    (this.Street5 != null &&
                    this.Street5.Equals(input.Street5))
                ) && 
                (
                    this.Street6 == input.Street6 ||
                    (this.Street6 != null &&
                    this.Street6.Equals(input.Street6))
                ) && 
                (
                    this.AddressExtra1 == input.AddressExtra1 ||
                    (this.AddressExtra1 != null &&
                    this.AddressExtra1.Equals(input.AddressExtra1))
                ) && 
                (
                    this.AddressExtra2 == input.AddressExtra2 ||
                    (this.AddressExtra2 != null &&
                    this.AddressExtra2.Equals(input.AddressExtra2))
                ) && 
                (
                    this.AddressExtra3 == input.AddressExtra3 ||
                    (this.AddressExtra3 != null &&
                    this.AddressExtra3.Equals(input.AddressExtra3))
                ) && 
                (
                    this.AddressExtra4 == input.AddressExtra4 ||
                    (this.AddressExtra4 != null &&
                    this.AddressExtra4.Equals(input.AddressExtra4))
                ) && 
                (
                    this.AddressExtra5 == input.AddressExtra5 ||
                    (this.AddressExtra5 != null &&
                    this.AddressExtra5.Equals(input.AddressExtra5))
                ) && 
                (
                    this.AddressExtra6 == input.AddressExtra6 ||
                    (this.AddressExtra6 != null &&
                    this.AddressExtra6.Equals(input.AddressExtra6))
                ) && 
                (
                    this.City1 == input.City1 ||
                    (this.City1 != null &&
                    this.City1.Equals(input.City1))
                ) && 
                (
                    this.City2 == input.City2 ||
                    (this.City2 != null &&
                    this.City2.Equals(input.City2))
                ) && 
                (
                    this.City3 == input.City3 ||
                    (this.City3 != null &&
                    this.City3.Equals(input.City3))
                ) && 
                (
                    this.City4 == input.City4 ||
                    (this.City4 != null &&
                    this.City4.Equals(input.City4))
                ) && 
                (
                    this.City5 == input.City5 ||
                    (this.City5 != null &&
                    this.City5.Equals(input.City5))
                ) && 
                (
                    this.City6 == input.City6 ||
                    (this.City6 != null &&
                    this.City6.Equals(input.City6))
                ) && 
                (
                    this.Postcode1 == input.Postcode1 ||
                    (this.Postcode1 != null &&
                    this.Postcode1.Equals(input.Postcode1))
                ) && 
                (
                    this.Postcode2 == input.Postcode2 ||
                    (this.Postcode2 != null &&
                    this.Postcode2.Equals(input.Postcode2))
                ) && 
                (
                    this.Postcode3 == input.Postcode3 ||
                    (this.Postcode3 != null &&
                    this.Postcode3.Equals(input.Postcode3))
                ) && 
                (
                    this.Postcode4 == input.Postcode4 ||
                    (this.Postcode4 != null &&
                    this.Postcode4.Equals(input.Postcode4))
                ) && 
                (
                    this.Postcode5 == input.Postcode5 ||
                    (this.Postcode5 != null &&
                    this.Postcode5.Equals(input.Postcode5))
                ) && 
                (
                    this.Postcode6 == input.Postcode6 ||
                    (this.Postcode6 != null &&
                    this.Postcode6.Equals(input.Postcode6))
                ) && 
                (
                    this.Country1 == input.Country1 ||
                    (this.Country1 != null &&
                    this.Country1.Equals(input.Country1))
                ) && 
                (
                    this.Country2 == input.Country2 ||
                    (this.Country2 != null &&
                    this.Country2.Equals(input.Country2))
                ) && 
                (
                    this.Country3 == input.Country3 ||
                    (this.Country3 != null &&
                    this.Country3.Equals(input.Country3))
                ) && 
                (
                    this.Country4 == input.Country4 ||
                    (this.Country4 != null &&
                    this.Country4.Equals(input.Country4))
                ) && 
                (
                    this.Country5 == input.Country5 ||
                    (this.Country5 != null &&
                    this.Country5.Equals(input.Country5))
                ) && 
                (
                    this.Country6 == input.Country6 ||
                    (this.Country6 != null &&
                    this.Country6.Equals(input.Country6))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Email2 == input.Email2 ||
                    (this.Email2 != null &&
                    this.Email2.Equals(input.Email2))
                ) && 
                (
                    this.Email3 == input.Email3 ||
                    (this.Email3 != null &&
                    this.Email3.Equals(input.Email3))
                ) && 
                (
                    this.Email4 == input.Email4 ||
                    (this.Email4 != null &&
                    this.Email4.Equals(input.Email4))
                ) && 
                (
                    this.Email5 == input.Email5 ||
                    (this.Email5 != null &&
                    this.Email5.Equals(input.Email5))
                ) && 
                (
                    this.Email6 == input.Email6 ||
                    (this.Email6 != null &&
                    this.Email6.Equals(input.Email6))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Phone2 == input.Phone2 ||
                    (this.Phone2 != null &&
                    this.Phone2.Equals(input.Phone2))
                ) && 
                (
                    this.Phone3 == input.Phone3 ||
                    (this.Phone3 != null &&
                    this.Phone3.Equals(input.Phone3))
                ) && 
                (
                    this.Phone4 == input.Phone4 ||
                    (this.Phone4 != null &&
                    this.Phone4.Equals(input.Phone4))
                ) && 
                (
                    this.Phone5 == input.Phone5 ||
                    (this.Phone5 != null &&
                    this.Phone5.Equals(input.Phone5))
                ) && 
                (
                    this.Phone6 == input.Phone6 ||
                    (this.Phone6 != null &&
                    this.Phone6.Equals(input.Phone6))
                ) && 
                (
                    this.Mobile == input.Mobile ||
                    (this.Mobile != null &&
                    this.Mobile.Equals(input.Mobile))
                ) && 
                (
                    this.Mobile2 == input.Mobile2 ||
                    (this.Mobile2 != null &&
                    this.Mobile2.Equals(input.Mobile2))
                ) && 
                (
                    this.Mobile3 == input.Mobile3 ||
                    (this.Mobile3 != null &&
                    this.Mobile3.Equals(input.Mobile3))
                ) && 
                (
                    this.Mobile4 == input.Mobile4 ||
                    (this.Mobile4 != null &&
                    this.Mobile4.Equals(input.Mobile4))
                ) && 
                (
                    this.Mobile5 == input.Mobile5 ||
                    (this.Mobile5 != null &&
                    this.Mobile5.Equals(input.Mobile5))
                ) && 
                (
                    this.Mobile6 == input.Mobile6 ||
                    (this.Mobile6 != null &&
                    this.Mobile6.Equals(input.Mobile6))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.Fax2 == input.Fax2 ||
                    (this.Fax2 != null &&
                    this.Fax2.Equals(input.Fax2))
                ) && 
                (
                    this.Fax3 == input.Fax3 ||
                    (this.Fax3 != null &&
                    this.Fax3.Equals(input.Fax3))
                ) && 
                (
                    this.Fax4 == input.Fax4 ||
                    (this.Fax4 != null &&
                    this.Fax4.Equals(input.Fax4))
                ) && 
                (
                    this.Fax5 == input.Fax5 ||
                    (this.Fax5 != null &&
                    this.Fax5.Equals(input.Fax5))
                ) && 
                (
                    this.Fax6 == input.Fax6 ||
                    (this.Fax6 != null &&
                    this.Fax6.Equals(input.Fax6))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.PositionReplacement == input.PositionReplacement ||
                    (this.PositionReplacement != null &&
                    this.PositionReplacement.Equals(input.PositionReplacement))
                ) && 
                (
                    this.Department == input.Department ||
                    (this.Department != null &&
                    this.Department.Equals(input.Department))
                ) && 
                (
                    this.Industry == input.Industry ||
                    (this.Industry != null &&
                    this.Industry.Equals(input.Industry))
                ) && 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    (this.CustomerNumber != null &&
                    this.CustomerNumber.Equals(input.CustomerNumber))
                ) && 
                (
                    this.LegacyNumber == input.LegacyNumber ||
                    (this.LegacyNumber != null &&
                    this.LegacyNumber.Equals(input.LegacyNumber))
                ) && 
                (
                    this.Tags == input.Tags ||
                    (this.Tags != null &&
                    this.Tags.Equals(input.Tags))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.VatId == input.VatId ||
                    (this.VatId != null &&
                    this.VatId.Equals(input.VatId))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) && 
                (
                    this.Employers == input.Employers ||
                    this.Employers != null &&
                    input.Employers != null &&
                    this.Employers.SequenceEqual(input.Employers)
                ) && 
                (
                    this.DeliveryTermIncoterm == input.DeliveryTermIncoterm ||
                    (this.DeliveryTermIncoterm != null &&
                    this.DeliveryTermIncoterm.Equals(input.DeliveryTermIncoterm))
                ) && 
                (
                    this.DeliveryTermIncotermLocation == input.DeliveryTermIncotermLocation ||
                    (this.DeliveryTermIncotermLocation != null &&
                    this.DeliveryTermIncotermLocation.Equals(input.DeliveryTermIncotermLocation))
                ) && 
                (
                    this.OwnerUid == input.OwnerUid ||
                    (this.OwnerUid != null &&
                    this.OwnerUid.Equals(input.OwnerUid))
                ) && 
                (
                    this.PermissionType == input.PermissionType ||
                    (this.PermissionType != null &&
                    this.PermissionType.Equals(input.PermissionType))
                ) && 
                (
                    this.ReadPermissionProfiles == input.ReadPermissionProfiles ||
                    (this.ReadPermissionProfiles != null &&
                    this.ReadPermissionProfiles.Equals(input.ReadPermissionProfiles))
                ) && 
                (
                    this.ReadPermissionLogins == input.ReadPermissionLogins ||
                    (this.ReadPermissionLogins != null &&
                    this.ReadPermissionLogins.Equals(input.ReadPermissionLogins))
                ) && 
                (
                    this.WritePermissionProfiles == input.WritePermissionProfiles ||
                    (this.WritePermissionProfiles != null &&
                    this.WritePermissionProfiles.Equals(input.WritePermissionProfiles))
                ) && 
                (
                    this.WritePermissionLogins == input.WritePermissionLogins ||
                    (this.WritePermissionLogins != null &&
                    this.WritePermissionLogins.Equals(input.WritePermissionLogins))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Person != null)
                    hashCode = hashCode * 59 + this.Person.GetHashCode();
                if (this.Salutation != null)
                    hashCode = hashCode * 59 + this.Salutation.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Lastname != null)
                    hashCode = hashCode * 59 + this.Lastname.GetHashCode();
                if (this.Firstname != null)
                    hashCode = hashCode * 59 + this.Firstname.GetHashCode();
                if (this.PaymentTypeName != null)
                    hashCode = hashCode * 59 + this.PaymentTypeName.GetHashCode();
                if (this.FederalState != null)
                    hashCode = hashCode * 59 + this.FederalState.GetHashCode();
                if (this.FederalState2 != null)
                    hashCode = hashCode * 59 + this.FederalState2.GetHashCode();
                if (this.FederalState3 != null)
                    hashCode = hashCode * 59 + this.FederalState3.GetHashCode();
                if (this.FederalState4 != null)
                    hashCode = hashCode * 59 + this.FederalState4.GetHashCode();
                if (this.FederalState5 != null)
                    hashCode = hashCode * 59 + this.FederalState5.GetHashCode();
                if (this.FederalState6 != null)
                    hashCode = hashCode * 59 + this.FederalState6.GetHashCode();
                if (this.Street1 != null)
                    hashCode = hashCode * 59 + this.Street1.GetHashCode();
                if (this.Street2 != null)
                    hashCode = hashCode * 59 + this.Street2.GetHashCode();
                if (this.Street3 != null)
                    hashCode = hashCode * 59 + this.Street3.GetHashCode();
                if (this.Street4 != null)
                    hashCode = hashCode * 59 + this.Street4.GetHashCode();
                if (this.Street5 != null)
                    hashCode = hashCode * 59 + this.Street5.GetHashCode();
                if (this.Street6 != null)
                    hashCode = hashCode * 59 + this.Street6.GetHashCode();
                if (this.AddressExtra1 != null)
                    hashCode = hashCode * 59 + this.AddressExtra1.GetHashCode();
                if (this.AddressExtra2 != null)
                    hashCode = hashCode * 59 + this.AddressExtra2.GetHashCode();
                if (this.AddressExtra3 != null)
                    hashCode = hashCode * 59 + this.AddressExtra3.GetHashCode();
                if (this.AddressExtra4 != null)
                    hashCode = hashCode * 59 + this.AddressExtra4.GetHashCode();
                if (this.AddressExtra5 != null)
                    hashCode = hashCode * 59 + this.AddressExtra5.GetHashCode();
                if (this.AddressExtra6 != null)
                    hashCode = hashCode * 59 + this.AddressExtra6.GetHashCode();
                if (this.City1 != null)
                    hashCode = hashCode * 59 + this.City1.GetHashCode();
                if (this.City2 != null)
                    hashCode = hashCode * 59 + this.City2.GetHashCode();
                if (this.City3 != null)
                    hashCode = hashCode * 59 + this.City3.GetHashCode();
                if (this.City4 != null)
                    hashCode = hashCode * 59 + this.City4.GetHashCode();
                if (this.City5 != null)
                    hashCode = hashCode * 59 + this.City5.GetHashCode();
                if (this.City6 != null)
                    hashCode = hashCode * 59 + this.City6.GetHashCode();
                if (this.Postcode1 != null)
                    hashCode = hashCode * 59 + this.Postcode1.GetHashCode();
                if (this.Postcode2 != null)
                    hashCode = hashCode * 59 + this.Postcode2.GetHashCode();
                if (this.Postcode3 != null)
                    hashCode = hashCode * 59 + this.Postcode3.GetHashCode();
                if (this.Postcode4 != null)
                    hashCode = hashCode * 59 + this.Postcode4.GetHashCode();
                if (this.Postcode5 != null)
                    hashCode = hashCode * 59 + this.Postcode5.GetHashCode();
                if (this.Postcode6 != null)
                    hashCode = hashCode * 59 + this.Postcode6.GetHashCode();
                if (this.Country1 != null)
                    hashCode = hashCode * 59 + this.Country1.GetHashCode();
                if (this.Country2 != null)
                    hashCode = hashCode * 59 + this.Country2.GetHashCode();
                if (this.Country3 != null)
                    hashCode = hashCode * 59 + this.Country3.GetHashCode();
                if (this.Country4 != null)
                    hashCode = hashCode * 59 + this.Country4.GetHashCode();
                if (this.Country5 != null)
                    hashCode = hashCode * 59 + this.Country5.GetHashCode();
                if (this.Country6 != null)
                    hashCode = hashCode * 59 + this.Country6.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Email2 != null)
                    hashCode = hashCode * 59 + this.Email2.GetHashCode();
                if (this.Email3 != null)
                    hashCode = hashCode * 59 + this.Email3.GetHashCode();
                if (this.Email4 != null)
                    hashCode = hashCode * 59 + this.Email4.GetHashCode();
                if (this.Email5 != null)
                    hashCode = hashCode * 59 + this.Email5.GetHashCode();
                if (this.Email6 != null)
                    hashCode = hashCode * 59 + this.Email6.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Phone2 != null)
                    hashCode = hashCode * 59 + this.Phone2.GetHashCode();
                if (this.Phone3 != null)
                    hashCode = hashCode * 59 + this.Phone3.GetHashCode();
                if (this.Phone4 != null)
                    hashCode = hashCode * 59 + this.Phone4.GetHashCode();
                if (this.Phone5 != null)
                    hashCode = hashCode * 59 + this.Phone5.GetHashCode();
                if (this.Phone6 != null)
                    hashCode = hashCode * 59 + this.Phone6.GetHashCode();
                if (this.Mobile != null)
                    hashCode = hashCode * 59 + this.Mobile.GetHashCode();
                if (this.Mobile2 != null)
                    hashCode = hashCode * 59 + this.Mobile2.GetHashCode();
                if (this.Mobile3 != null)
                    hashCode = hashCode * 59 + this.Mobile3.GetHashCode();
                if (this.Mobile4 != null)
                    hashCode = hashCode * 59 + this.Mobile4.GetHashCode();
                if (this.Mobile5 != null)
                    hashCode = hashCode * 59 + this.Mobile5.GetHashCode();
                if (this.Mobile6 != null)
                    hashCode = hashCode * 59 + this.Mobile6.GetHashCode();
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                if (this.Fax2 != null)
                    hashCode = hashCode * 59 + this.Fax2.GetHashCode();
                if (this.Fax3 != null)
                    hashCode = hashCode * 59 + this.Fax3.GetHashCode();
                if (this.Fax4 != null)
                    hashCode = hashCode * 59 + this.Fax4.GetHashCode();
                if (this.Fax5 != null)
                    hashCode = hashCode * 59 + this.Fax5.GetHashCode();
                if (this.Fax6 != null)
                    hashCode = hashCode * 59 + this.Fax6.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.PositionReplacement != null)
                    hashCode = hashCode * 59 + this.PositionReplacement.GetHashCode();
                if (this.Department != null)
                    hashCode = hashCode * 59 + this.Department.GetHashCode();
                if (this.Industry != null)
                    hashCode = hashCode * 59 + this.Industry.GetHashCode();
                if (this.CustomerNumber != null)
                    hashCode = hashCode * 59 + this.CustomerNumber.GetHashCode();
                if (this.LegacyNumber != null)
                    hashCode = hashCode * 59 + this.LegacyNumber.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.VatId != null)
                    hashCode = hashCode * 59 + this.VatId.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                if (this.Employers != null)
                    hashCode = hashCode * 59 + this.Employers.GetHashCode();
                if (this.DeliveryTermIncoterm != null)
                    hashCode = hashCode * 59 + this.DeliveryTermIncoterm.GetHashCode();
                if (this.DeliveryTermIncotermLocation != null)
                    hashCode = hashCode * 59 + this.DeliveryTermIncotermLocation.GetHashCode();
                if (this.OwnerUid != null)
                    hashCode = hashCode * 59 + this.OwnerUid.GetHashCode();
                if (this.PermissionType != null)
                    hashCode = hashCode * 59 + this.PermissionType.GetHashCode();
                if (this.ReadPermissionProfiles != null)
                    hashCode = hashCode * 59 + this.ReadPermissionProfiles.GetHashCode();
                if (this.ReadPermissionLogins != null)
                    hashCode = hashCode * 59 + this.ReadPermissionLogins.GetHashCode();
                if (this.WritePermissionProfiles != null)
                    hashCode = hashCode * 59 + this.WritePermissionProfiles.GetHashCode();
                if (this.WritePermissionLogins != null)
                    hashCode = hashCode * 59 + this.WritePermissionLogins.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
