/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CompuMaster.Scopevisio.OpenApi.Client.OpenAPIDateConverter;

namespace CompuMaster.Scopevisio.OpenApi.Model
{
    /// <summary>
    /// TimeEntryForm
    /// </summary>
    [DataContract]
    public partial class TimeEntryForm :  IEquatable<TimeEntryForm>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeEntryForm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimeEntryForm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeEntryForm" /> class.
        /// </summary>
        /// <param name="employeeId">Id of the user contact (Aus Benutzerkontakt) (required).</param>
        /// <param name="startTs">Start timestamp. If not given it is set to the current time..</param>
        /// <param name="endTs">End timestamp. If not given it is set to the current time..</param>
        /// <param name="fullDay">fullDay. When set the data given in startTs and endTs is ignored. Both timestamps are set to the full day start and end time configured in the Scopevisio desktop application. (default to false).</param>
        /// <param name="contactId">contactId. If no contact is set explicitly by the user, the contact from project, task or order (in this priority order) is set. E.g. the user sets no contact and no project, but task and order. In this case the task contact is set to the time entry. If there is no contact in task, the order contact is set to the time entry..</param>
        /// <param name="projectId">projectId. If no project is set by the user explicitly the project from task or order(in this priority order) is set. E.g. the user sets no contact and no project, but task and order(in the order there is a project set). In this case the task project contact is set to the time entry. If there is no project in task, the order project is set to the time entry..</param>
        /// <param name="taskId">taskId.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="productIdOrNumber">productId or product number.</param>
        /// <param name="billable">billable (default to false).</param>
        /// <param name="confirmed">confirmed (default to false).</param>
        /// <param name="stateDone">done (Durchgeführt) (default to false).</param>
        /// <param name="internalNote">internal Note.</param>
        /// <param name="note">note.</param>
        /// <param name="permissionType">0 &#x3D; Öffentlich, 1 &#x3D; Benutzerdefiniert, 2 &#x3D; Persönlich.</param>
        /// <param name="readPermissionProfiles">comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1..</param>
        /// <param name="readPermissionLogins">comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1..</param>
        /// <param name="writePermissionProfiles">comma separated list of profiles for full access, evaluated only if permissionType equals 1..</param>
        /// <param name="writePermissionLogins">comma separated list of user login emails, evaluated only if permissionType equals 1..</param>
        public TimeEntryForm(long employeeId = default(long), long startTs = default(long), long endTs = default(long), bool fullDay = false, long contactId = default(long), long projectId = default(long), long taskId = default(long), long orderId = default(long), string productIdOrNumber = default(string), bool billable = false, bool confirmed = false, bool stateDone = false, string internalNote = default(string), string note = default(string), long permissionType = default(long), string readPermissionProfiles = default(string), string readPermissionLogins = default(string), string writePermissionProfiles = default(string), string writePermissionLogins = default(string))
        {
            // to ensure "employeeId" is required (not null)
            if (employeeId == null)
            {
                throw new InvalidDataException("employeeId is a required property for TimeEntryForm and cannot be null");
            }
            else
            {
                this.EmployeeId = employeeId;
            }
            
            this.StartTs = startTs;
            this.EndTs = endTs;
            // use default value if no "fullDay" provided
            if (fullDay == null)
            {
                this.FullDay = false;
            }
            else
            {
                this.FullDay = fullDay;
            }
            this.ContactId = contactId;
            this.ProjectId = projectId;
            this.TaskId = taskId;
            this.OrderId = orderId;
            this.ProductIdOrNumber = productIdOrNumber;
            // use default value if no "billable" provided
            if (billable == null)
            {
                this.Billable = false;
            }
            else
            {
                this.Billable = billable;
            }
            // use default value if no "confirmed" provided
            if (confirmed == null)
            {
                this.Confirmed = false;
            }
            else
            {
                this.Confirmed = confirmed;
            }
            // use default value if no "stateDone" provided
            if (stateDone == null)
            {
                this.StateDone = false;
            }
            else
            {
                this.StateDone = stateDone;
            }
            this.InternalNote = internalNote;
            this.Note = note;
            this.PermissionType = permissionType;
            this.ReadPermissionProfiles = readPermissionProfiles;
            this.ReadPermissionLogins = readPermissionLogins;
            this.WritePermissionProfiles = writePermissionProfiles;
            this.WritePermissionLogins = writePermissionLogins;
        }
        
        /// <summary>
        /// Id of the user contact (Aus Benutzerkontakt)
        /// </summary>
        /// <value>Id of the user contact (Aus Benutzerkontakt)</value>
        [DataMember(Name="employeeId", EmitDefaultValue=true)]
        public long EmployeeId { get; set; }

        /// <summary>
        /// Start timestamp. If not given it is set to the current time.
        /// </summary>
        /// <value>Start timestamp. If not given it is set to the current time.</value>
        [DataMember(Name="startTs", EmitDefaultValue=false)]
        public long StartTs { get; set; }

        /// <summary>
        /// End timestamp. If not given it is set to the current time.
        /// </summary>
        /// <value>End timestamp. If not given it is set to the current time.</value>
        [DataMember(Name="endTs", EmitDefaultValue=false)]
        public long EndTs { get; set; }

        /// <summary>
        /// fullDay. When set the data given in startTs and endTs is ignored. Both timestamps are set to the full day start and end time configured in the Scopevisio desktop application.
        /// </summary>
        /// <value>fullDay. When set the data given in startTs and endTs is ignored. Both timestamps are set to the full day start and end time configured in the Scopevisio desktop application.</value>
        [DataMember(Name="fullDay", EmitDefaultValue=false)]
        public bool FullDay { get; set; }

        /// <summary>
        /// contactId. If no contact is set explicitly by the user, the contact from project, task or order (in this priority order) is set. E.g. the user sets no contact and no project, but task and order. In this case the task contact is set to the time entry. If there is no contact in task, the order contact is set to the time entry.
        /// </summary>
        /// <value>contactId. If no contact is set explicitly by the user, the contact from project, task or order (in this priority order) is set. E.g. the user sets no contact and no project, but task and order. In this case the task contact is set to the time entry. If there is no contact in task, the order contact is set to the time entry.</value>
        [DataMember(Name="contactId", EmitDefaultValue=false)]
        public long ContactId { get; set; }

        /// <summary>
        /// projectId. If no project is set by the user explicitly the project from task or order(in this priority order) is set. E.g. the user sets no contact and no project, but task and order(in the order there is a project set). In this case the task project contact is set to the time entry. If there is no project in task, the order project is set to the time entry.
        /// </summary>
        /// <value>projectId. If no project is set by the user explicitly the project from task or order(in this priority order) is set. E.g. the user sets no contact and no project, but task and order(in the order there is a project set). In this case the task project contact is set to the time entry. If there is no project in task, the order project is set to the time entry.</value>
        [DataMember(Name="projectId", EmitDefaultValue=false)]
        public long ProjectId { get; set; }

        /// <summary>
        /// taskId
        /// </summary>
        /// <value>taskId</value>
        [DataMember(Name="taskId", EmitDefaultValue=false)]
        public long TaskId { get; set; }

        /// <summary>
        /// orderId
        /// </summary>
        /// <value>orderId</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public long OrderId { get; set; }

        /// <summary>
        /// productId or product number
        /// </summary>
        /// <value>productId or product number</value>
        [DataMember(Name="productIdOrNumber", EmitDefaultValue=false)]
        public string ProductIdOrNumber { get; set; }

        /// <summary>
        /// billable
        /// </summary>
        /// <value>billable</value>
        [DataMember(Name="billable", EmitDefaultValue=false)]
        public bool Billable { get; set; }

        /// <summary>
        /// confirmed
        /// </summary>
        /// <value>confirmed</value>
        [DataMember(Name="confirmed", EmitDefaultValue=false)]
        public bool Confirmed { get; set; }

        /// <summary>
        /// done (Durchgeführt)
        /// </summary>
        /// <value>done (Durchgeführt)</value>
        [DataMember(Name="stateDone", EmitDefaultValue=false)]
        public bool StateDone { get; set; }

        /// <summary>
        /// internal Note
        /// </summary>
        /// <value>internal Note</value>
        [DataMember(Name="internalNote", EmitDefaultValue=false)]
        public string InternalNote { get; set; }

        /// <summary>
        /// note
        /// </summary>
        /// <value>note</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// 0 &#x3D; Öffentlich, 1 &#x3D; Benutzerdefiniert, 2 &#x3D; Persönlich
        /// </summary>
        /// <value>0 &#x3D; Öffentlich, 1 &#x3D; Benutzerdefiniert, 2 &#x3D; Persönlich</value>
        [DataMember(Name="permissionType", EmitDefaultValue=false)]
        public long PermissionType { get; set; }

        /// <summary>
        /// comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="readPermissionProfiles", EmitDefaultValue=false)]
        public string ReadPermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="readPermissionLogins", EmitDefaultValue=false)]
        public string ReadPermissionLogins { get; set; }

        /// <summary>
        /// comma separated list of profiles for full access, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of profiles for full access, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="writePermissionProfiles", EmitDefaultValue=false)]
        public string WritePermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of user login emails, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="writePermissionLogins", EmitDefaultValue=false)]
        public string WritePermissionLogins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeEntryForm {\n");
            sb.Append("  EmployeeId: ").Append(EmployeeId).Append("\n");
            sb.Append("  StartTs: ").Append(StartTs).Append("\n");
            sb.Append("  EndTs: ").Append(EndTs).Append("\n");
            sb.Append("  FullDay: ").Append(FullDay).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ProductIdOrNumber: ").Append(ProductIdOrNumber).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  Confirmed: ").Append(Confirmed).Append("\n");
            sb.Append("  StateDone: ").Append(StateDone).Append("\n");
            sb.Append("  InternalNote: ").Append(InternalNote).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  PermissionType: ").Append(PermissionType).Append("\n");
            sb.Append("  ReadPermissionProfiles: ").Append(ReadPermissionProfiles).Append("\n");
            sb.Append("  ReadPermissionLogins: ").Append(ReadPermissionLogins).Append("\n");
            sb.Append("  WritePermissionProfiles: ").Append(WritePermissionProfiles).Append("\n");
            sb.Append("  WritePermissionLogins: ").Append(WritePermissionLogins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeEntryForm);
        }

        /// <summary>
        /// Returns true if TimeEntryForm instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeEntryForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeEntryForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmployeeId == input.EmployeeId ||
                    (this.EmployeeId != null &&
                    this.EmployeeId.Equals(input.EmployeeId))
                ) && 
                (
                    this.StartTs == input.StartTs ||
                    (this.StartTs != null &&
                    this.StartTs.Equals(input.StartTs))
                ) && 
                (
                    this.EndTs == input.EndTs ||
                    (this.EndTs != null &&
                    this.EndTs.Equals(input.EndTs))
                ) && 
                (
                    this.FullDay == input.FullDay ||
                    (this.FullDay != null &&
                    this.FullDay.Equals(input.FullDay))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.ProductIdOrNumber == input.ProductIdOrNumber ||
                    (this.ProductIdOrNumber != null &&
                    this.ProductIdOrNumber.Equals(input.ProductIdOrNumber))
                ) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.Confirmed == input.Confirmed ||
                    (this.Confirmed != null &&
                    this.Confirmed.Equals(input.Confirmed))
                ) && 
                (
                    this.StateDone == input.StateDone ||
                    (this.StateDone != null &&
                    this.StateDone.Equals(input.StateDone))
                ) && 
                (
                    this.InternalNote == input.InternalNote ||
                    (this.InternalNote != null &&
                    this.InternalNote.Equals(input.InternalNote))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.PermissionType == input.PermissionType ||
                    (this.PermissionType != null &&
                    this.PermissionType.Equals(input.PermissionType))
                ) && 
                (
                    this.ReadPermissionProfiles == input.ReadPermissionProfiles ||
                    (this.ReadPermissionProfiles != null &&
                    this.ReadPermissionProfiles.Equals(input.ReadPermissionProfiles))
                ) && 
                (
                    this.ReadPermissionLogins == input.ReadPermissionLogins ||
                    (this.ReadPermissionLogins != null &&
                    this.ReadPermissionLogins.Equals(input.ReadPermissionLogins))
                ) && 
                (
                    this.WritePermissionProfiles == input.WritePermissionProfiles ||
                    (this.WritePermissionProfiles != null &&
                    this.WritePermissionProfiles.Equals(input.WritePermissionProfiles))
                ) && 
                (
                    this.WritePermissionLogins == input.WritePermissionLogins ||
                    (this.WritePermissionLogins != null &&
                    this.WritePermissionLogins.Equals(input.WritePermissionLogins))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmployeeId != null)
                    hashCode = hashCode * 59 + this.EmployeeId.GetHashCode();
                if (this.StartTs != null)
                    hashCode = hashCode * 59 + this.StartTs.GetHashCode();
                if (this.EndTs != null)
                    hashCode = hashCode * 59 + this.EndTs.GetHashCode();
                if (this.FullDay != null)
                    hashCode = hashCode * 59 + this.FullDay.GetHashCode();
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.ProductIdOrNumber != null)
                    hashCode = hashCode * 59 + this.ProductIdOrNumber.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.Confirmed != null)
                    hashCode = hashCode * 59 + this.Confirmed.GetHashCode();
                if (this.StateDone != null)
                    hashCode = hashCode * 59 + this.StateDone.GetHashCode();
                if (this.InternalNote != null)
                    hashCode = hashCode * 59 + this.InternalNote.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.PermissionType != null)
                    hashCode = hashCode * 59 + this.PermissionType.GetHashCode();
                if (this.ReadPermissionProfiles != null)
                    hashCode = hashCode * 59 + this.ReadPermissionProfiles.GetHashCode();
                if (this.ReadPermissionLogins != null)
                    hashCode = hashCode * 59 + this.ReadPermissionLogins.GetHashCode();
                if (this.WritePermissionProfiles != null)
                    hashCode = hashCode * 59 + this.WritePermissionProfiles.GetHashCode();
                if (this.WritePermissionLogins != null)
                    hashCode = hashCode * 59 + this.WritePermissionLogins.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
