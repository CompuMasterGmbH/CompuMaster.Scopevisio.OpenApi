/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CompuMaster.Scopevisio.OpenApi.Client.OpenAPIDateConverter;

namespace CompuMaster.Scopevisio.OpenApi.Model
{
    /// <summary>
    /// TeamworkFileForm
    /// </summary>
    [DataContract]
    public partial class TeamworkFileForm :  IEquatable<TeamworkFileForm>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamworkFileForm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TeamworkFileForm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamworkFileForm" /> class.
        /// </summary>
        /// <param name="filename">filename. If no filename is given, it is assumed a pdf file is uploaded..</param>
        /// <param name="data">file data in Base64 (required).</param>
        /// <param name="collection">collection.  The name of the teamwork collection (Sammlung) the file should be added to..</param>
        /// <param name="createCollectionIfNotExist">Create the collection, to which the file should be uploaded to, if it doesn&#39;t exist. If set to false, the file is uploaded without being added to a collection. (default to false).</param>
        public TeamworkFileForm(string filename = default(string), string data = default(string), string collection = default(string), bool createCollectionIfNotExist = false)
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for TeamworkFileForm and cannot be null");
            }
            else
            {
                this.Data = data;
            }
            
            this.Filename = filename;
            this.Collection = collection;
            // use default value if no "createCollectionIfNotExist" provided
            if (createCollectionIfNotExist == null)
            {
                this.CreateCollectionIfNotExist = false;
            }
            else
            {
                this.CreateCollectionIfNotExist = createCollectionIfNotExist;
            }
        }
        
        /// <summary>
        /// filename. If no filename is given, it is assumed a pdf file is uploaded.
        /// </summary>
        /// <value>filename. If no filename is given, it is assumed a pdf file is uploaded.</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// file data in Base64
        /// </summary>
        /// <value>file data in Base64</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// collection.  The name of the teamwork collection (Sammlung) the file should be added to.
        /// </summary>
        /// <value>collection.  The name of the teamwork collection (Sammlung) the file should be added to.</value>
        [DataMember(Name="collection", EmitDefaultValue=false)]
        public string Collection { get; set; }

        /// <summary>
        /// Create the collection, to which the file should be uploaded to, if it doesn&#39;t exist. If set to false, the file is uploaded without being added to a collection.
        /// </summary>
        /// <value>Create the collection, to which the file should be uploaded to, if it doesn&#39;t exist. If set to false, the file is uploaded without being added to a collection.</value>
        [DataMember(Name="createCollectionIfNotExist", EmitDefaultValue=false)]
        public bool CreateCollectionIfNotExist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeamworkFileForm {\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Collection: ").Append(Collection).Append("\n");
            sb.Append("  CreateCollectionIfNotExist: ").Append(CreateCollectionIfNotExist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TeamworkFileForm);
        }

        /// <summary>
        /// Returns true if TeamworkFileForm instances are equal
        /// </summary>
        /// <param name="input">Instance of TeamworkFileForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeamworkFileForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Collection == input.Collection ||
                    (this.Collection != null &&
                    this.Collection.Equals(input.Collection))
                ) && 
                (
                    this.CreateCollectionIfNotExist == input.CreateCollectionIfNotExist ||
                    (this.CreateCollectionIfNotExist != null &&
                    this.CreateCollectionIfNotExist.Equals(input.CreateCollectionIfNotExist))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Collection != null)
                    hashCode = hashCode * 59 + this.Collection.GetHashCode();
                if (this.CreateCollectionIfNotExist != null)
                    hashCode = hashCode * 59 + this.CreateCollectionIfNotExist.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
