/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CompuMaster.Scopevisio.OpenApi.Client.OpenAPIDateConverter;

namespace CompuMaster.Scopevisio.OpenApi.Model
{
    /// <summary>
    /// RecordItem
    /// </summary>
    //[DataContract]
    public abstract class RecordItem : Newtonsoft.Json.Linq.JObject 
    {
        /// <summary>
        /// RecordItem
        /// </summary>
        public RecordItem() : base()
        {
        }

        /// <summary>
        /// RecordItem
        /// </summary>
        /// <param name="other"></param>
        public RecordItem(Newtonsoft.Json.Linq.JObject other) : base(other)
        {
        }

        internal abstract List<string> ToOverviewTableCaptions();

        internal abstract List<string> ToOverviewTableRow();
    }

    /// <summary>
    /// Contact
    /// </summary>
    //[DataContract]
    public partial class Contact : RecordItem
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact" /> class.
        /// </summary>
        public Contact() : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Contact" /> class.
        /// </summary>
        /// <param name="other"></param>
        public Contact(Newtonsoft.Json.Linq.JObject other) : base(other)
        {
        }

        //public Contact(object content) : base(content)
        //{
        //}
        
        //public Contact(params object[] content) : base(content)
        //{
        //}

        ///// <summary>
        ///// Gets or Sets contact fields
        ///// </summary>
        //[DataMember(Name="", EmitDefaultValue=false)]
        //public Dictionary<string, object> Items { get; set; }

        /// <summary>
        /// The contact ID
        /// </summary>
        public long Id
        {
            get
            {
                return this.Value<long>("id");
            }
            set
            {
                this["id"] = value;
            }
        }

        /// <summary>
        /// Contact's name or LastName
        /// </summary>
        public string LastName
        {
            get
            {
                return this.Value<string>("lastname");
            }
            set
            {
                this["lastname"] = value;
            }
        }

        /// <summary>
        /// Contact's FirstName
        /// </summary>
        public string FirstName
        {
            get
            {
                return this.Value<string>("firstname");
            }
            set
            {
                this["firstname"] = value;
            }
        }

        /// <summary>
        /// Contact's CompanyName
        /// </summary>
        public string CompanyName
        {
            get
            {
                return this.Value<string>("companyname");
            }
            set
            {
                this["companyname"] = value;
            }
        }

        /// <summary>
        /// Contact's OwnerUid
        /// </summary>
        public string OwnerUid
        {
            get
            {
                return this.Value<string>("ownerUid");
            }
            set
            {
                this["ownerUid"] = value;
            }
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Contact {\n");
            sb.Append(base.ToString().Indent()).Append("\n");
            sb.Append("}");
            return sb.ToString();
        }

        internal override List<string> ToOverviewTableRow()
        {
            List<string> result = new List<string>();
            result.Add(this.Id.ToString());
            result.Add(this.FirstName);
            result.Add(this.LastName);
            result.Add(this.CompanyName);
            result.Add(this.OwnerUid);
            return result;
        }

        internal override List<string> ToOverviewTableCaptions()
        {
            List<string> result = new List<string>();
            result.Add("ID");
            result.Add("FirstName");
            result.Add("LastName");
            result.Add("CompanyName");
            result.Add("OwnerUid");
            return result;
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
}
