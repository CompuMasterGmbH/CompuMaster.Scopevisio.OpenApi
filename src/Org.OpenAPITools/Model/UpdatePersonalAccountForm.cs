/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UpdatePersonalAccountForm
    /// </summary>
    [DataContract]
    public partial class UpdatePersonalAccountForm :  IEquatable<UpdatePersonalAccountForm>, IValidatableObject
    {
        /// <summary>
        /// vatCode(Steuerkennzeichen) for the personal account. Please see vat matrix (Steuermatrix) in the Scopevisio client if you wish other than the standard allowable values.
        /// </summary>
        /// <value>vatCode(Steuerkennzeichen) for the personal account. Please see vat matrix (Steuermatrix) in the Scopevisio client if you wish other than the standard allowable values.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VatCodeEnum
        {
            /// <summary>
            /// Enum INL for value: INL
            /// </summary>
            [EnumMember(Value = "INL")]
            INL = 1,

            /// <summary>
            /// Enum Drittland for value: Drittland
            /// </summary>
            [EnumMember(Value = "Drittland")]
            Drittland = 2,

            /// <summary>
            /// Enum EUmID for value: EUmID
            /// </summary>
            [EnumMember(Value = "EUmID")]
            EUmID = 3,

            /// <summary>
            /// Enum EUoID for value: EUoID
            /// </summary>
            [EnumMember(Value = "EUoID")]
            EUoID = 4

        }

        /// <summary>
        /// vatCode(Steuerkennzeichen) for the personal account. Please see vat matrix (Steuermatrix) in the Scopevisio client if you wish other than the standard allowable values.
        /// </summary>
        /// <value>vatCode(Steuerkennzeichen) for the personal account. Please see vat matrix (Steuermatrix) in the Scopevisio client if you wish other than the standard allowable values.</value>
        [DataMember(Name="vatCode", EmitDefaultValue=false)]
        public VatCodeEnum? VatCode { get; set; }
        /// <summary>
        /// paymentType(Zahlungsart) for the pesonal account.
        /// </summary>
        /// <value>paymentType(Zahlungsart) for the pesonal account.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentTypeEnum
        {
            /// <summary>
            /// Enum Vorkasse for value: Vorkasse
            /// </summary>
            [EnumMember(Value = "Vorkasse")]
            Vorkasse = 1,

            /// <summary>
            /// Enum Berweisung for value: Überweisung
            /// </summary>
            [EnumMember(Value = "Überweisung")]
            Berweisung = 2,

            /// <summary>
            /// Enum PayPal for value: PayPal
            /// </summary>
            [EnumMember(Value = "PayPal")]
            PayPal = 3,

            /// <summary>
            /// Enum Nachnahme for value: Nachnahme
            /// </summary>
            [EnumMember(Value = "Nachnahme")]
            Nachnahme = 4,

            /// <summary>
            /// Enum Einzugsermchtigung for value: Einzugsermächtigung
            /// </summary>
            [EnumMember(Value = "Einzugsermächtigung")]
            Einzugsermchtigung = 5,

            /// <summary>
            /// Enum Rechnung for value: Rechnung
            /// </summary>
            [EnumMember(Value = "Rechnung")]
            Rechnung = 6,

            /// <summary>
            /// Enum ECKarte for value: EC-Karte
            /// </summary>
            [EnumMember(Value = "EC-Karte")]
            ECKarte = 7,

            /// <summary>
            /// Enum Abbuchungsgenehmigung for value: Abbuchungsgenehmigung
            /// </summary>
            [EnumMember(Value = "Abbuchungsgenehmigung")]
            Abbuchungsgenehmigung = 8,

            /// <summary>
            /// Enum Bar for value: Bar
            /// </summary>
            [EnumMember(Value = "Bar")]
            Bar = 9,

            /// <summary>
            /// Enum Kreditkarte for value: Kreditkarte
            /// </summary>
            [EnumMember(Value = "Kreditkarte")]
            Kreditkarte = 10

        }

        /// <summary>
        /// paymentType(Zahlungsart) for the pesonal account.
        /// </summary>
        /// <value>paymentType(Zahlungsart) for the pesonal account.</value>
        [DataMember(Name="paymentType", EmitDefaultValue=false)]
        public PaymentTypeEnum? PaymentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePersonalAccountForm" /> class.
        /// </summary>
        /// <param name="numberRangeNumber">numberRangeNumber (Kreditoren-/Debitoren-Nummernkreis), the number of the number range for the personal account. If personalAccountNumber is not provided, the first available number for the provided numberRangeNumber is generated for the personal account.   If numberRangeNumber not provided,  the first found number range will be used. We recommend setting \&quot;numberRangeNumber\&quot; if more than one number ranges for this account type(debitor or kreditor) exist otherwise errors may occur if the number range is full.  The default number ranges in the Scopevisio desktop applications are \&quot;2\&quot; for debitors and \&quot;3\&quot; for creditors.</param>
        /// <param name="group">group (Kundengruppe/Kreditorengruppe), if the given group does not exist, it is created and assigned to the personal account..</param>
        /// <param name="vatCode">vatCode(Steuerkennzeichen) for the personal account. Please see vat matrix (Steuermatrix) in the Scopevisio client if you wish other than the standard allowable values..</param>
        /// <param name="paymentType">paymentType(Zahlungsart) for the pesonal account..</param>
        /// <param name="vatNumber">vatNumber(Steuernummer).</param>
        /// <param name="vatId">vatId (Umsatzsteuer-ID).</param>
        /// <param name="currency">currency(Währung), the ISO 4217 alphabetic currency code.</param>
        /// <param name="language">language(Sprache), please check the Scopeviso client application for allowable values.</param>
        /// <param name="paymentTermId">paymentTermId (Zahlungsbedingung id), the id of the wished payment term for the personal account. If an existing paymentTerm should be assigned to the personal account, then use \&quot;paymentTermId\&quot; . If a new paymentTerm should be created, use the parameter \&quot;paymentTermForm\&quot;. If both \&quot;paymentTermId\&quot; and \&quot;paymentTermForm\&quot; are provided, a payment term with the given \&quot;paymentTermId\&quot; is searched. If not found,the \&quot;paymentTermForm\&quot; is used. If a payment term with the given name is found, then it is assigned to the personal account, a new payment term is created otherwise..</param>
        /// <param name="paymentTermForm">paymentTermForm.</param>
        public UpdatePersonalAccountForm(long numberRangeNumber = default(long), string group = default(string), VatCodeEnum? vatCode = default(VatCodeEnum?), PaymentTypeEnum? paymentType = default(PaymentTypeEnum?), string vatNumber = default(string), string vatId = default(string), string currency = default(string), string language = default(string), long paymentTermId = default(long), PaymentTermForm paymentTermForm = default(PaymentTermForm))
        {
            this.NumberRangeNumber = numberRangeNumber;
            this.Group = group;
            this.VatCode = vatCode;
            this.PaymentType = paymentType;
            this.VatNumber = vatNumber;
            this.VatId = vatId;
            this.Currency = currency;
            this.Language = language;
            this.PaymentTermId = paymentTermId;
            this.PaymentTermForm = paymentTermForm;
        }
        
        /// <summary>
        /// numberRangeNumber (Kreditoren-/Debitoren-Nummernkreis), the number of the number range for the personal account. If personalAccountNumber is not provided, the first available number for the provided numberRangeNumber is generated for the personal account.   If numberRangeNumber not provided,  the first found number range will be used. We recommend setting \&quot;numberRangeNumber\&quot; if more than one number ranges for this account type(debitor or kreditor) exist otherwise errors may occur if the number range is full.  The default number ranges in the Scopevisio desktop applications are \&quot;2\&quot; for debitors and \&quot;3\&quot; for creditors
        /// </summary>
        /// <value>numberRangeNumber (Kreditoren-/Debitoren-Nummernkreis), the number of the number range for the personal account. If personalAccountNumber is not provided, the first available number for the provided numberRangeNumber is generated for the personal account.   If numberRangeNumber not provided,  the first found number range will be used. We recommend setting \&quot;numberRangeNumber\&quot; if more than one number ranges for this account type(debitor or kreditor) exist otherwise errors may occur if the number range is full.  The default number ranges in the Scopevisio desktop applications are \&quot;2\&quot; for debitors and \&quot;3\&quot; for creditors</value>
        [DataMember(Name="numberRangeNumber", EmitDefaultValue=false)]
        public long NumberRangeNumber { get; set; }

        /// <summary>
        /// group (Kundengruppe/Kreditorengruppe), if the given group does not exist, it is created and assigned to the personal account.
        /// </summary>
        /// <value>group (Kundengruppe/Kreditorengruppe), if the given group does not exist, it is created and assigned to the personal account.</value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public string Group { get; set; }



        /// <summary>
        /// vatNumber(Steuernummer)
        /// </summary>
        /// <value>vatNumber(Steuernummer)</value>
        [DataMember(Name="vatNumber", EmitDefaultValue=false)]
        public string VatNumber { get; set; }

        /// <summary>
        /// vatId (Umsatzsteuer-ID)
        /// </summary>
        /// <value>vatId (Umsatzsteuer-ID)</value>
        [DataMember(Name="vatId", EmitDefaultValue=false)]
        public string VatId { get; set; }

        /// <summary>
        /// currency(Währung), the ISO 4217 alphabetic currency code
        /// </summary>
        /// <value>currency(Währung), the ISO 4217 alphabetic currency code</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// language(Sprache), please check the Scopeviso client application for allowable values
        /// </summary>
        /// <value>language(Sprache), please check the Scopeviso client application for allowable values</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// paymentTermId (Zahlungsbedingung id), the id of the wished payment term for the personal account. If an existing paymentTerm should be assigned to the personal account, then use \&quot;paymentTermId\&quot; . If a new paymentTerm should be created, use the parameter \&quot;paymentTermForm\&quot;. If both \&quot;paymentTermId\&quot; and \&quot;paymentTermForm\&quot; are provided, a payment term with the given \&quot;paymentTermId\&quot; is searched. If not found,the \&quot;paymentTermForm\&quot; is used. If a payment term with the given name is found, then it is assigned to the personal account, a new payment term is created otherwise.
        /// </summary>
        /// <value>paymentTermId (Zahlungsbedingung id), the id of the wished payment term for the personal account. If an existing paymentTerm should be assigned to the personal account, then use \&quot;paymentTermId\&quot; . If a new paymentTerm should be created, use the parameter \&quot;paymentTermForm\&quot;. If both \&quot;paymentTermId\&quot; and \&quot;paymentTermForm\&quot; are provided, a payment term with the given \&quot;paymentTermId\&quot; is searched. If not found,the \&quot;paymentTermForm\&quot; is used. If a payment term with the given name is found, then it is assigned to the personal account, a new payment term is created otherwise.</value>
        [DataMember(Name="paymentTermId", EmitDefaultValue=false)]
        public long PaymentTermId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTermForm
        /// </summary>
        [DataMember(Name="paymentTermForm", EmitDefaultValue=false)]
        public PaymentTermForm PaymentTermForm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdatePersonalAccountForm {\n");
            sb.Append("  NumberRangeNumber: ").Append(NumberRangeNumber).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  VatCode: ").Append(VatCode).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("  VatId: ").Append(VatId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  PaymentTermId: ").Append(PaymentTermId).Append("\n");
            sb.Append("  PaymentTermForm: ").Append(PaymentTermForm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdatePersonalAccountForm);
        }

        /// <summary>
        /// Returns true if UpdatePersonalAccountForm instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdatePersonalAccountForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdatePersonalAccountForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NumberRangeNumber == input.NumberRangeNumber ||
                    (this.NumberRangeNumber != null &&
                    this.NumberRangeNumber.Equals(input.NumberRangeNumber))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.VatCode == input.VatCode ||
                    (this.VatCode != null &&
                    this.VatCode.Equals(input.VatCode))
                ) && 
                (
                    this.PaymentType == input.PaymentType ||
                    (this.PaymentType != null &&
                    this.PaymentType.Equals(input.PaymentType))
                ) && 
                (
                    this.VatNumber == input.VatNumber ||
                    (this.VatNumber != null &&
                    this.VatNumber.Equals(input.VatNumber))
                ) && 
                (
                    this.VatId == input.VatId ||
                    (this.VatId != null &&
                    this.VatId.Equals(input.VatId))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.PaymentTermId == input.PaymentTermId ||
                    (this.PaymentTermId != null &&
                    this.PaymentTermId.Equals(input.PaymentTermId))
                ) && 
                (
                    this.PaymentTermForm == input.PaymentTermForm ||
                    (this.PaymentTermForm != null &&
                    this.PaymentTermForm.Equals(input.PaymentTermForm))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NumberRangeNumber != null)
                    hashCode = hashCode * 59 + this.NumberRangeNumber.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.VatCode != null)
                    hashCode = hashCode * 59 + this.VatCode.GetHashCode();
                if (this.PaymentType != null)
                    hashCode = hashCode * 59 + this.PaymentType.GetHashCode();
                if (this.VatNumber != null)
                    hashCode = hashCode * 59 + this.VatNumber.GetHashCode();
                if (this.VatId != null)
                    hashCode = hashCode * 59 + this.VatId.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.PaymentTermId != null)
                    hashCode = hashCode * 59 + this.PaymentTermId.GetHashCode();
                if (this.PaymentTermForm != null)
                    hashCode = hashCode * 59 + this.PaymentTermForm.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
