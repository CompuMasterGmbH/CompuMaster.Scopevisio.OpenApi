/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CompuMaster.Scopevisio.OpenApi.Client;

namespace CompuMaster.Scopevisio.OpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeamworkApi 
    {
        private CompuMaster.Scopevisio.OpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamworkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamworkApi(String basePath)
        {
            this.Configuration = new CompuMaster.Scopevisio.OpenApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CompuMaster.Scopevisio.OpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamworkApi"/> class
        /// </summary>
        /// <returns></returns>
        public TeamworkApi()
        {
            this.Configuration = CompuMaster.Scopevisio.OpenApi.Client.Configuration.Default;

            ExceptionFactory = CompuMaster.Scopevisio.OpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamworkApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeamworkApi(CompuMaster.Scopevisio.OpenApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CompuMaster.Scopevisio.OpenApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CompuMaster.Scopevisio.OpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        internal String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        internal void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CompuMaster.Scopevisio.OpenApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CompuMaster.Scopevisio.OpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        internal IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        internal void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <returns>Object</returns>
        public Object DeleteHandler1 (string arg1)
        {
             ApiResponse<Object> localVarResponse = DeleteHandler1WithHttpInfo(arg1);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteHandler1WithHttpInfo (string arg1)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->DeleteHandler1");

            var localVarPath = "/teamworkbridge/{arg1}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHandler1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteHandler1Async (string arg1)
        {
             ApiResponse<Object> localVarResponse = await DeleteHandler1AsyncWithHttpInfo(arg1);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteHandler1AsyncWithHttpInfo (string arg1)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->DeleteHandler1");

            var localVarPath = "/teamworkbridge/{arg1}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHandler1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <returns>Object</returns>
        public Object DeleteHandler2 (string arg1, string arg2)
        {
             ApiResponse<Object> localVarResponse = DeleteHandler2WithHttpInfo(arg1, arg2);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteHandler2WithHttpInfo (string arg1, string arg2)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->DeleteHandler2");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->DeleteHandler2");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHandler2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteHandler2Async (string arg1, string arg2)
        {
             ApiResponse<Object> localVarResponse = await DeleteHandler2AsyncWithHttpInfo(arg1, arg2);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteHandler2AsyncWithHttpInfo (string arg1, string arg2)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->DeleteHandler2");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->DeleteHandler2");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHandler2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <returns>Object</returns>
        public Object DeleteHandler3 (string arg1, string arg2, string arg3)
        {
             ApiResponse<Object> localVarResponse = DeleteHandler3WithHttpInfo(arg1, arg2, arg3);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteHandler3WithHttpInfo (string arg1, string arg2, string arg3)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->DeleteHandler3");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->DeleteHandler3");
            // verify the required parameter 'arg3' is set
            if (arg3 == null)
                throw new ApiException(400, "Missing required parameter 'arg3' when calling TeamworkApi->DeleteHandler3");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}/{arg3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter
            if (arg3 != null) localVarPathParams.Add("arg3", this.Configuration.ApiClient.ParameterToString(arg3)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHandler3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteHandler3Async (string arg1, string arg2, string arg3)
        {
             ApiResponse<Object> localVarResponse = await DeleteHandler3AsyncWithHttpInfo(arg1, arg2, arg3);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteHandler3AsyncWithHttpInfo (string arg1, string arg2, string arg3)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->DeleteHandler3");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->DeleteHandler3");
            // verify the required parameter 'arg3' is set
            if (arg3 == null)
                throw new ApiException(400, "Missing required parameter 'arg3' when calling TeamworkApi->DeleteHandler3");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}/{arg3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter
            if (arg3 != null) localVarPathParams.Add("arg3", this.Configuration.ApiClient.ParameterToString(arg3)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHandler3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <param name="arg4"></param>
        /// <returns>Object</returns>
        public Object DeleteHandler4 (string arg1, string arg2, string arg3, string arg4)
        {
             ApiResponse<Object> localVarResponse = DeleteHandler4WithHttpInfo(arg1, arg2, arg3, arg4);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <param name="arg4"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteHandler4WithHttpInfo (string arg1, string arg2, string arg3, string arg4)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->DeleteHandler4");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->DeleteHandler4");
            // verify the required parameter 'arg3' is set
            if (arg3 == null)
                throw new ApiException(400, "Missing required parameter 'arg3' when calling TeamworkApi->DeleteHandler4");
            // verify the required parameter 'arg4' is set
            if (arg4 == null)
                throw new ApiException(400, "Missing required parameter 'arg4' when calling TeamworkApi->DeleteHandler4");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}/{arg3}/{arg4}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter
            if (arg3 != null) localVarPathParams.Add("arg3", this.Configuration.ApiClient.ParameterToString(arg3)); // path parameter
            if (arg4 != null) localVarPathParams.Add("arg4", this.Configuration.ApiClient.ParameterToString(arg4)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHandler4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <param name="arg4"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteHandler4Async (string arg1, string arg2, string arg3, string arg4)
        {
             ApiResponse<Object> localVarResponse = await DeleteHandler4AsyncWithHttpInfo(arg1, arg2, arg3, arg4);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <param name="arg4"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteHandler4AsyncWithHttpInfo (string arg1, string arg2, string arg3, string arg4)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->DeleteHandler4");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->DeleteHandler4");
            // verify the required parameter 'arg3' is set
            if (arg3 == null)
                throw new ApiException(400, "Missing required parameter 'arg3' when calling TeamworkApi->DeleteHandler4");
            // verify the required parameter 'arg4' is set
            if (arg4 == null)
                throw new ApiException(400, "Missing required parameter 'arg4' when calling TeamworkApi->DeleteHandler4");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}/{arg3}/{arg4}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter
            if (arg3 != null) localVarPathParams.Add("arg3", this.Configuration.ApiClient.ParameterToString(arg3)); // path parameter
            if (arg4 != null) localVarPathParams.Add("arg4", this.Configuration.ApiClient.ParameterToString(arg4)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHandler4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <returns>Object</returns>
        public Object GetHandler1 (string arg1)
        {
             ApiResponse<Object> localVarResponse = GetHandler1WithHttpInfo(arg1);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetHandler1WithHttpInfo (string arg1)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->GetHandler1");

            var localVarPath = "/teamworkbridge/{arg1}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHandler1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetHandler1Async (string arg1)
        {
             ApiResponse<Object> localVarResponse = await GetHandler1AsyncWithHttpInfo(arg1);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetHandler1AsyncWithHttpInfo (string arg1)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->GetHandler1");

            var localVarPath = "/teamworkbridge/{arg1}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHandler1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <returns>Object</returns>
        public Object GetHandler2 (string arg1, string arg2)
        {
             ApiResponse<Object> localVarResponse = GetHandler2WithHttpInfo(arg1, arg2);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetHandler2WithHttpInfo (string arg1, string arg2)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->GetHandler2");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->GetHandler2");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHandler2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetHandler2Async (string arg1, string arg2)
        {
             ApiResponse<Object> localVarResponse = await GetHandler2AsyncWithHttpInfo(arg1, arg2);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetHandler2AsyncWithHttpInfo (string arg1, string arg2)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->GetHandler2");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->GetHandler2");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHandler2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <returns>Object</returns>
        public Object GetHandler3 (string arg1, string arg2, string arg3)
        {
             ApiResponse<Object> localVarResponse = GetHandler3WithHttpInfo(arg1, arg2, arg3);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GetHandler3WithHttpInfo (string arg1, string arg2, string arg3)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->GetHandler3");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->GetHandler3");
            // verify the required parameter 'arg3' is set
            if (arg3 == null)
                throw new ApiException(400, "Missing required parameter 'arg3' when calling TeamworkApi->GetHandler3");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}/{arg3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter
            if (arg3 != null) localVarPathParams.Add("arg3", this.Configuration.ApiClient.ParameterToString(arg3)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHandler3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetHandler3Async (string arg1, string arg2, string arg3)
        {
             ApiResponse<Object> localVarResponse = await GetHandler3AsyncWithHttpInfo(arg1, arg2, arg3);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetHandler3AsyncWithHttpInfo (string arg1, string arg2, string arg3)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->GetHandler3");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->GetHandler3");
            // verify the required parameter 'arg3' is set
            if (arg3 == null)
                throw new ApiException(400, "Missing required parameter 'arg3' when calling TeamworkApi->GetHandler3");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}/{arg3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter
            if (arg3 != null) localVarPathParams.Add("arg3", this.Configuration.ApiClient.ParameterToString(arg3)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHandler3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <returns>Object</returns>
        public Object PostHandler1 (string arg1)
        {
             ApiResponse<Object> localVarResponse = PostHandler1WithHttpInfo(arg1);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> PostHandler1WithHttpInfo (string arg1)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->PostHandler1");

            var localVarPath = "/teamworkbridge/{arg1}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostHandler1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PostHandler1Async (string arg1)
        {
             ApiResponse<Object> localVarResponse = await PostHandler1AsyncWithHttpInfo(arg1);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostHandler1AsyncWithHttpInfo (string arg1)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->PostHandler1");

            var localVarPath = "/teamworkbridge/{arg1}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostHandler1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <returns>Object</returns>
        public Object PostHandler2 (string arg1, string arg2)
        {
             ApiResponse<Object> localVarResponse = PostHandler2WithHttpInfo(arg1, arg2);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> PostHandler2WithHttpInfo (string arg1, string arg2)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->PostHandler2");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->PostHandler2");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostHandler2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PostHandler2Async (string arg1, string arg2)
        {
             ApiResponse<Object> localVarResponse = await PostHandler2AsyncWithHttpInfo(arg1, arg2);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostHandler2AsyncWithHttpInfo (string arg1, string arg2)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->PostHandler2");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->PostHandler2");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostHandler2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <returns>Object</returns>
        public Object PostHandler3 (string arg1, string arg2, string arg3)
        {
             ApiResponse<Object> localVarResponse = PostHandler3WithHttpInfo(arg1, arg2, arg3);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> PostHandler3WithHttpInfo (string arg1, string arg2, string arg3)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->PostHandler3");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->PostHandler3");
            // verify the required parameter 'arg3' is set
            if (arg3 == null)
                throw new ApiException(400, "Missing required parameter 'arg3' when calling TeamworkApi->PostHandler3");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}/{arg3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter
            if (arg3 != null) localVarPathParams.Add("arg3", this.Configuration.ApiClient.ParameterToString(arg3)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostHandler3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PostHandler3Async (string arg1, string arg2, string arg3)
        {
             ApiResponse<Object> localVarResponse = await PostHandler3AsyncWithHttpInfo(arg1, arg2, arg3);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostHandler3AsyncWithHttpInfo (string arg1, string arg2, string arg3)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->PostHandler3");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->PostHandler3");
            // verify the required parameter 'arg3' is set
            if (arg3 == null)
                throw new ApiException(400, "Missing required parameter 'arg3' when calling TeamworkApi->PostHandler3");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}/{arg3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter
            if (arg3 != null) localVarPathParams.Add("arg3", this.Configuration.ApiClient.ParameterToString(arg3)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostHandler3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <returns>Object</returns>
        public Object PutHandler1 (string arg1)
        {
             ApiResponse<Object> localVarResponse = PutHandler1WithHttpInfo(arg1);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> PutHandler1WithHttpInfo (string arg1)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->PutHandler1");

            var localVarPath = "/teamworkbridge/{arg1}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutHandler1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PutHandler1Async (string arg1)
        {
             ApiResponse<Object> localVarResponse = await PutHandler1AsyncWithHttpInfo(arg1);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutHandler1AsyncWithHttpInfo (string arg1)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->PutHandler1");

            var localVarPath = "/teamworkbridge/{arg1}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutHandler1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <returns>Object</returns>
        public Object PutHandler2 (string arg1, string arg2)
        {
             ApiResponse<Object> localVarResponse = PutHandler2WithHttpInfo(arg1, arg2);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> PutHandler2WithHttpInfo (string arg1, string arg2)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->PutHandler2");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->PutHandler2");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutHandler2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PutHandler2Async (string arg1, string arg2)
        {
             ApiResponse<Object> localVarResponse = await PutHandler2AsyncWithHttpInfo(arg1, arg2);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutHandler2AsyncWithHttpInfo (string arg1, string arg2)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->PutHandler2");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->PutHandler2");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutHandler2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <returns>Object</returns>
        public Object PutHandler3 (string arg1, string arg2, string arg3)
        {
             ApiResponse<Object> localVarResponse = PutHandler3WithHttpInfo(arg1, arg2, arg3);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> PutHandler3WithHttpInfo (string arg1, string arg2, string arg3)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->PutHandler3");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->PutHandler3");
            // verify the required parameter 'arg3' is set
            if (arg3 == null)
                throw new ApiException(400, "Missing required parameter 'arg3' when calling TeamworkApi->PutHandler3");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}/{arg3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter
            if (arg3 != null) localVarPathParams.Add("arg3", this.Configuration.ApiClient.ParameterToString(arg3)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutHandler3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PutHandler3Async (string arg1, string arg2, string arg3)
        {
             ApiResponse<Object> localVarResponse = await PutHandler3AsyncWithHttpInfo(arg1, arg2, arg3);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutHandler3AsyncWithHttpInfo (string arg1, string arg2, string arg3)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->PutHandler3");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->PutHandler3");
            // verify the required parameter 'arg3' is set
            if (arg3 == null)
                throw new ApiException(400, "Missing required parameter 'arg3' when calling TeamworkApi->PutHandler3");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}/{arg3}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter
            if (arg3 != null) localVarPathParams.Add("arg3", this.Configuration.ApiClient.ParameterToString(arg3)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutHandler3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <param name="arg4"></param>
        /// <returns>Object</returns>
        public Object PutHandler4 (string arg1, string arg2, string arg3, string arg4)
        {
             ApiResponse<Object> localVarResponse = PutHandler4WithHttpInfo(arg1, arg2, arg3, arg4);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <param name="arg4"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> PutHandler4WithHttpInfo (string arg1, string arg2, string arg3, string arg4)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->PutHandler4");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->PutHandler4");
            // verify the required parameter 'arg3' is set
            if (arg3 == null)
                throw new ApiException(400, "Missing required parameter 'arg3' when calling TeamworkApi->PutHandler4");
            // verify the required parameter 'arg4' is set
            if (arg4 == null)
                throw new ApiException(400, "Missing required parameter 'arg4' when calling TeamworkApi->PutHandler4");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}/{arg3}/{arg4}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter
            if (arg3 != null) localVarPathParams.Add("arg3", this.Configuration.ApiClient.ParameterToString(arg3)); // path parameter
            if (arg4 != null) localVarPathParams.Add("arg4", this.Configuration.ApiClient.ParameterToString(arg4)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutHandler4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <param name="arg4"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PutHandler4Async (string arg1, string arg2, string arg3, string arg4)
        {
             ApiResponse<Object> localVarResponse = await PutHandler4AsyncWithHttpInfo(arg1, arg2, arg3, arg4);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  See our &lt;a href&#x3D;&#39;../browser/index.html#!/documentation#teamwork&#39;&gt;documentation&lt;/a&gt; for usage.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="arg1"></param>
        /// <param name="arg2"></param>
        /// <param name="arg3"></param>
        /// <param name="arg4"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutHandler4AsyncWithHttpInfo (string arg1, string arg2, string arg3, string arg4)
        {
            // verify the required parameter 'arg1' is set
            if (arg1 == null)
                throw new ApiException(400, "Missing required parameter 'arg1' when calling TeamworkApi->PutHandler4");
            // verify the required parameter 'arg2' is set
            if (arg2 == null)
                throw new ApiException(400, "Missing required parameter 'arg2' when calling TeamworkApi->PutHandler4");
            // verify the required parameter 'arg3' is set
            if (arg3 == null)
                throw new ApiException(400, "Missing required parameter 'arg3' when calling TeamworkApi->PutHandler4");
            // verify the required parameter 'arg4' is set
            if (arg4 == null)
                throw new ApiException(400, "Missing required parameter 'arg4' when calling TeamworkApi->PutHandler4");

            var localVarPath = "/teamworkbridge/{arg1}/{arg2}/{arg3}/{arg4}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (arg1 != null) localVarPathParams.Add("arg1", this.Configuration.ApiClient.ParameterToString(arg1)); // path parameter
            if (arg2 != null) localVarPathParams.Add("arg2", this.Configuration.ApiClient.ParameterToString(arg2)); // path parameter
            if (arg3 != null) localVarPathParams.Add("arg3", this.Configuration.ApiClient.ParameterToString(arg3)); // path parameter
            if (arg4 != null) localVarPathParams.Add("arg4", this.Configuration.ApiClient.ParameterToString(arg4)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutHandler4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                localVarResponse.Content,
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
