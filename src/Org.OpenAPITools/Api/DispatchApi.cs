/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDispatchApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// get dispatch with number (interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the Scopevisio dispatch with the given number (interne Nummer).  Required profile(s) : &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns></returns>
        void GetDispatch (string number, string fields = default(string));

        /// <summary>
        /// get dispatch with number (interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the Scopevisio dispatch with the given number (interne Nummer).  Required profile(s) : &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetDispatchWithHttpInfo (string number, string fields = default(string));
        /// <summary>
        /// the parent of the dispatch with the given document number
        /// </summary>
        /// <remarks>
        /// Returns the Scopevisio outgoing invoice document which is parent of the dispatch with the given document number.  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">document number of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns></returns>
        void GetDispatchParent (string number, string fields = default(string));

        /// <summary>
        /// the parent of the dispatch with the given document number
        /// </summary>
        /// <remarks>
        /// Returns the Scopevisio outgoing invoice document which is parent of the dispatch with the given document number.  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">document number of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetDispatchParentWithHttpInfo (string number, string fields = default(string));
        /// <summary>
        /// get the positions for the dispatch with the given number (interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the positions of the dispatch with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns></returns>
        void GetDispatchPositions (string number, string fields = default(string));

        /// <summary>
        /// get the positions for the dispatch with the given number (interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the positions of the dispatch with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetDispatchPositionsWithHttpInfo (string number, string fields = default(string));
        /// <summary>
        /// Dispatches
        /// </summary>
        /// <remarks>
        /// Returns all Scopevisio dispatches.  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns></returns>
        void GetDispatches (string body = default(string));

        /// <summary>
        /// Dispatches
        /// </summary>
        /// <remarks>
        /// Returns all Scopevisio dispatches.  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetDispatchesWithHttpInfo (string body = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// get dispatch with number (interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the Scopevisio dispatch with the given number (interne Nummer).  Required profile(s) : &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetDispatchAsync (string number, string fields = default(string));

        /// <summary>
        /// get dispatch with number (interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the Scopevisio dispatch with the given number (interne Nummer).  Required profile(s) : &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetDispatchAsyncWithHttpInfo (string number, string fields = default(string));
        /// <summary>
        /// the parent of the dispatch with the given document number
        /// </summary>
        /// <remarks>
        /// Returns the Scopevisio outgoing invoice document which is parent of the dispatch with the given document number.  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">document number of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetDispatchParentAsync (string number, string fields = default(string));

        /// <summary>
        /// the parent of the dispatch with the given document number
        /// </summary>
        /// <remarks>
        /// Returns the Scopevisio outgoing invoice document which is parent of the dispatch with the given document number.  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">document number of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetDispatchParentAsyncWithHttpInfo (string number, string fields = default(string));
        /// <summary>
        /// get the positions for the dispatch with the given number (interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the positions of the dispatch with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetDispatchPositionsAsync (string number, string fields = default(string));

        /// <summary>
        /// get the positions for the dispatch with the given number (interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the positions of the dispatch with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetDispatchPositionsAsyncWithHttpInfo (string number, string fields = default(string));
        /// <summary>
        /// Dispatches
        /// </summary>
        /// <remarks>
        /// Returns all Scopevisio dispatches.  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetDispatchesAsync (string body = default(string));

        /// <summary>
        /// Dispatches
        /// </summary>
        /// <remarks>
        /// Returns all Scopevisio dispatches.  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetDispatchesAsyncWithHttpInfo (string body = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DispatchApi : IDispatchApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DispatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DispatchApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DispatchApi"/> class
        /// </summary>
        /// <returns></returns>
        public DispatchApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DispatchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DispatchApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// get dispatch with number (interne Nummer) Returns the Scopevisio dispatch with the given number (interne Nummer).  Required profile(s) : &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns></returns>
        public void GetDispatch (string number, string fields = default(string))
        {
             GetDispatchWithHttpInfo(number, fields);
        }

        /// <summary>
        /// get dispatch with number (interne Nummer) Returns the Scopevisio dispatch with the given number (interne Nummer).  Required profile(s) : &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetDispatchWithHttpInfo (string number, string fields = default(string))
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling DispatchApi->GetDispatch");

            var localVarPath = "/dispatch/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// get dispatch with number (interne Nummer) Returns the Scopevisio dispatch with the given number (interne Nummer).  Required profile(s) : &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetDispatchAsync (string number, string fields = default(string))
        {
             await GetDispatchAsyncWithHttpInfo(number, fields);

        }

        /// <summary>
        /// get dispatch with number (interne Nummer) Returns the Scopevisio dispatch with the given number (interne Nummer).  Required profile(s) : &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetDispatchAsyncWithHttpInfo (string number, string fields = default(string))
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling DispatchApi->GetDispatch");

            var localVarPath = "/dispatch/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// the parent of the dispatch with the given document number Returns the Scopevisio outgoing invoice document which is parent of the dispatch with the given document number.  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">document number of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns></returns>
        public void GetDispatchParent (string number, string fields = default(string))
        {
             GetDispatchParentWithHttpInfo(number, fields);
        }

        /// <summary>
        /// the parent of the dispatch with the given document number Returns the Scopevisio outgoing invoice document which is parent of the dispatch with the given document number.  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">document number of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetDispatchParentWithHttpInfo (string number, string fields = default(string))
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling DispatchApi->GetDispatchParent");

            var localVarPath = "/dispatch/{number}/parent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatchParent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// the parent of the dispatch with the given document number Returns the Scopevisio outgoing invoice document which is parent of the dispatch with the given document number.  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">document number of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetDispatchParentAsync (string number, string fields = default(string))
        {
             await GetDispatchParentAsyncWithHttpInfo(number, fields);

        }

        /// <summary>
        /// the parent of the dispatch with the given document number Returns the Scopevisio outgoing invoice document which is parent of the dispatch with the given document number.  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">document number of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetDispatchParentAsyncWithHttpInfo (string number, string fields = default(string))
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling DispatchApi->GetDispatchParent");

            var localVarPath = "/dispatch/{number}/parent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatchParent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// get the positions for the dispatch with the given number (interne Nummer) Returns the positions of the dispatch with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns></returns>
        public void GetDispatchPositions (string number, string fields = default(string))
        {
             GetDispatchPositionsWithHttpInfo(number, fields);
        }

        /// <summary>
        /// get the positions for the dispatch with the given number (interne Nummer) Returns the positions of the dispatch with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetDispatchPositionsWithHttpInfo (string number, string fields = default(string))
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling DispatchApi->GetDispatchPositions");

            var localVarPath = "/dispatch/{number}/positions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatchPositions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// get the positions for the dispatch with the given number (interne Nummer) Returns the positions of the dispatch with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetDispatchPositionsAsync (string number, string fields = default(string))
        {
             await GetDispatchPositionsAsyncWithHttpInfo(number, fields);

        }

        /// <summary>
        /// get the positions for the dispatch with the given number (interne Nummer) Returns the positions of the dispatch with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio dispatch</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetDispatchPositionsAsyncWithHttpInfo (string number, string fields = default(string))
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling DispatchApi->GetDispatchPositions");

            var localVarPath = "/dispatch/{number}/positions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatchPositions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Dispatches Returns all Scopevisio dispatches.  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns></returns>
        public void GetDispatches (string body = default(string))
        {
             GetDispatchesWithHttpInfo(body);
        }

        /// <summary>
        /// Dispatches Returns all Scopevisio dispatches.  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetDispatchesWithHttpInfo (string body = default(string))
        {

            var localVarPath = "/dispatches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Dispatches Returns all Scopevisio dispatches.  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetDispatchesAsync (string body = default(string))
        {
             await GetDispatchesAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Dispatches Returns all Scopevisio dispatches.  Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetDispatchesAsyncWithHttpInfo (string body = default(string))
        {

            var localVarPath = "/dispatches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
