/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CompuMaster.Scopevisio.OpenApi.Client.OpenAPIDateConverter;

namespace CompuMaster.Scopevisio.OpenApi.Model
{
    /// <summary>
    /// TeamworkRole
    /// </summary>
    [DataContract]
    public partial class TeamworkRole :  IEquatable<TeamworkRole>, IValidatableObject
    {
        /// <summary>
        /// Defines _TeamworkRole
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TeamworkRoleEnum
        {
            /// <summary>
            /// Enum Admin for value: admin
            /// </summary>
            [EnumMember(Value = "admin")]
            Admin = 1,

            /// <summary>
            /// Enum Internal for value: internal
            /// </summary>
            [EnumMember(Value = "internal")]
            Internal = 2,

            /// <summary>
            /// Enum External for value: external
            /// </summary>
            [EnumMember(Value = "external")]
            External = 3,

            /// <summary>
            /// Enum Guest for value: guest
            /// </summary>
            [EnumMember(Value = "guest")]
            Guest = 4

        }

        /// <summary>
        /// Gets or Sets _TeamworkRole
        /// </summary>
        [DataMember(Name="teamworkRole", EmitDefaultValue=false)]
        public TeamworkRoleEnum _TeamworkRole { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamworkRole" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TeamworkRole() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamworkRole" /> class.
        /// </summary>
        /// <param name="teamworkRole">teamworkRole (required).</param>
        /// <param name="organisation">organisation (required).</param>
        public TeamworkRole(TeamworkRoleEnum teamworkRole = default(TeamworkRoleEnum), string organisation = default(string))
        {
            // to ensure "teamworkRole" is required (not null)
            if (teamworkRole == null)
            {
                throw new InvalidDataException("teamworkRole is a required property for TeamworkRole and cannot be null");
            }
            else
            {
                this._TeamworkRole = teamworkRole;
            }
            
            // to ensure "organisation" is required (not null)
            if (organisation == null)
            {
                throw new InvalidDataException("organisation is a required property for TeamworkRole and cannot be null");
            }
            else
            {
                this.Organisation = organisation;
            }
            
        }
        

        /// <summary>
        /// Gets or Sets Organisation
        /// </summary>
        [DataMember(Name="organisation", EmitDefaultValue=false)]
        public string Organisation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeamworkRole {\n");
            sb.Append("  _TeamworkRole: ").Append(_TeamworkRole).Append("\n");
            sb.Append("  Organisation: ").Append(Organisation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TeamworkRole);
        }

        /// <summary>
        /// Returns true if TeamworkRole instances are equal
        /// </summary>
        /// <param name="input">Instance of TeamworkRole to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeamworkRole input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._TeamworkRole == input._TeamworkRole ||
                    (this._TeamworkRole != null &&
                    this._TeamworkRole.Equals(input._TeamworkRole))
                ) && 
                (
                    this.Organisation == input.Organisation ||
                    (this.Organisation != null &&
                    this.Organisation.Equals(input.Organisation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._TeamworkRole != null)
                    hashCode = hashCode * 59 + this._TeamworkRole.GetHashCode();
                if (this.Organisation != null)
                    hashCode = hashCode * 59 + this.Organisation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
