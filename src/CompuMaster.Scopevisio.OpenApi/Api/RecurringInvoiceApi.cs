/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CompuMaster.Scopevisio.OpenApi.Client;
using CompuMaster.Scopevisio.OpenApi.Model;

namespace CompuMaster.Scopevisio.OpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecurringInvoiceApi 
    {
        private CompuMaster.Scopevisio.OpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringInvoiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecurringInvoiceApi(String basePath)
        {
            this.Configuration = new CompuMaster.Scopevisio.OpenApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CompuMaster.Scopevisio.OpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringInvoiceApi"/> class
        /// </summary>
        /// <returns></returns>
        public RecurringInvoiceApi()
        {
            this.Configuration = CompuMaster.Scopevisio.OpenApi.Client.Configuration.Default;

            ExceptionFactory = CompuMaster.Scopevisio.OpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringInvoiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecurringInvoiceApi(CompuMaster.Scopevisio.OpenApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CompuMaster.Scopevisio.OpenApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CompuMaster.Scopevisio.OpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        internal void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CompuMaster.Scopevisio.OpenApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CompuMaster.Scopevisio.OpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        internal IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        internal void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Convert recurring invoice to dispatch Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an dispatch.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns></returns>
        public void ConvertRecurringInvoiceToDispatch (string number)
        {
             ConvertRecurringInvoiceToDispatchWithHttpInfo(number);
        }

        /// <summary>
        /// Convert recurring invoice to dispatch Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an dispatch.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConvertRecurringInvoiceToDispatchWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling RecurringInvoiceApi->ConvertRecurringInvoiceToDispatch");

            var localVarPath = "/recurringinvoice/{number}/convertToDispatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertRecurringInvoiceToDispatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert recurring invoice to dispatch Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an dispatch.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConvertRecurringInvoiceToDispatchAsync (string number)
        {
             await ConvertRecurringInvoiceToDispatchAsyncWithHttpInfo(number);

        }

        /// <summary>
        /// Convert recurring invoice to dispatch Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an dispatch.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConvertRecurringInvoiceToDispatchAsyncWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling RecurringInvoiceApi->ConvertRecurringInvoiceToDispatch");

            var localVarPath = "/recurringinvoice/{number}/convertToDispatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertRecurringInvoiceToDispatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert recurring invoice to offer Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an offer.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns></returns>
        public void ConvertRecurringInvoiceToOffer (string number)
        {
             ConvertRecurringInvoiceToOfferWithHttpInfo(number);
        }

        /// <summary>
        /// Convert recurring invoice to offer Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an offer.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConvertRecurringInvoiceToOfferWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling RecurringInvoiceApi->ConvertRecurringInvoiceToOffer");

            var localVarPath = "/recurringinvoice/{number}/convertToOffer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertRecurringInvoiceToOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert recurring invoice to offer Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an offer.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConvertRecurringInvoiceToOfferAsync (string number)
        {
             await ConvertRecurringInvoiceToOfferAsyncWithHttpInfo(number);

        }

        /// <summary>
        /// Convert recurring invoice to offer Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an offer.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConvertRecurringInvoiceToOfferAsyncWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling RecurringInvoiceApi->ConvertRecurringInvoiceToOffer");

            var localVarPath = "/recurringinvoice/{number}/convertToOffer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertRecurringInvoiceToOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert recurring invoice to opportunity Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an opportunity.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns></returns>
        public void ConvertRecurringInvoiceToOpportunity (string number)
        {
             ConvertRecurringInvoiceToOpportunityWithHttpInfo(number);
        }

        /// <summary>
        /// Convert recurring invoice to opportunity Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an opportunity.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConvertRecurringInvoiceToOpportunityWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling RecurringInvoiceApi->ConvertRecurringInvoiceToOpportunity");

            var localVarPath = "/recurringinvoice/{number}/convertToOpportunity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertRecurringInvoiceToOpportunity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert recurring invoice to opportunity Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an opportunity.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConvertRecurringInvoiceToOpportunityAsync (string number)
        {
             await ConvertRecurringInvoiceToOpportunityAsyncWithHttpInfo(number);

        }

        /// <summary>
        /// Convert recurring invoice to opportunity Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an opportunity.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConvertRecurringInvoiceToOpportunityAsyncWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling RecurringInvoiceApi->ConvertRecurringInvoiceToOpportunity");

            var localVarPath = "/recurringinvoice/{number}/convertToOpportunity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertRecurringInvoiceToOpportunity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert recurring invoice to order Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an order.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns></returns>
        public void ConvertRecurringInvoiceToOrder (string number)
        {
             ConvertRecurringInvoiceToOrderWithHttpInfo(number);
        }

        /// <summary>
        /// Convert recurring invoice to order Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an order.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConvertRecurringInvoiceToOrderWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling RecurringInvoiceApi->ConvertRecurringInvoiceToOrder");

            var localVarPath = "/recurringinvoice/{number}/convertToOrder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertRecurringInvoiceToOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert recurring invoice to order Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an order.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConvertRecurringInvoiceToOrderAsync (string number)
        {
             await ConvertRecurringInvoiceToOrderAsyncWithHttpInfo(number);

        }

        /// <summary>
        /// Convert recurring invoice to order Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an order.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConvertRecurringInvoiceToOrderAsyncWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling RecurringInvoiceApi->ConvertRecurringInvoiceToOrder");

            var localVarPath = "/recurringinvoice/{number}/convertToOrder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertRecurringInvoiceToOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert recurring invoice to recurring invoice Convert the Scopevisio recurring invoice with the given number (interne Nummer) to a recurring invoice.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns></returns>
        public void ConvertRecurringInvoiceToOutgoingInvoice (string number)
        {
             ConvertRecurringInvoiceToOutgoingInvoiceWithHttpInfo(number);
        }

        /// <summary>
        /// Convert recurring invoice to recurring invoice Convert the Scopevisio recurring invoice with the given number (interne Nummer) to a recurring invoice.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConvertRecurringInvoiceToOutgoingInvoiceWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling RecurringInvoiceApi->ConvertRecurringInvoiceToOutgoingInvoice");

            var localVarPath = "/recurringinvoice/{number}/convertToOutgoingInvoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertRecurringInvoiceToOutgoingInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert recurring invoice to recurring invoice Convert the Scopevisio recurring invoice with the given number (interne Nummer) to a recurring invoice.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConvertRecurringInvoiceToOutgoingInvoiceAsync (string number)
        {
             await ConvertRecurringInvoiceToOutgoingInvoiceAsyncWithHttpInfo(number);

        }

        /// <summary>
        /// Convert recurring invoice to recurring invoice Convert the Scopevisio recurring invoice with the given number (interne Nummer) to a recurring invoice.  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConvertRecurringInvoiceToOutgoingInvoiceAsyncWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling RecurringInvoiceApi->ConvertRecurringInvoiceToOutgoingInvoice");

            var localVarPath = "/recurringinvoice/{number}/convertToOutgoingInvoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertRecurringInvoiceToOutgoingInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// recurring invoice for number (interne Nummer) Returns the Scopevisio recurring invoice with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio outgoing invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns></returns>
        public void GetRecurringInvoice (string number, string fields = default(string))
        {
             GetRecurringInvoiceWithHttpInfo(number, fields);
        }

        /// <summary>
        /// recurring invoice for number (interne Nummer) Returns the Scopevisio recurring invoice with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio outgoing invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetRecurringInvoiceWithHttpInfo (string number, string fields = default(string))
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling RecurringInvoiceApi->GetRecurringInvoice");

            var localVarPath = "/recurringinvoice/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// recurring invoice for number (interne Nummer) Returns the Scopevisio recurring invoice with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio outgoing invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetRecurringInvoiceAsync (string number, string fields = default(string))
        {
             await GetRecurringInvoiceAsyncWithHttpInfo(number, fields);

        }

        /// <summary>
        /// recurring invoice for number (interne Nummer) Returns the Scopevisio recurring invoice with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio outgoing invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetRecurringInvoiceAsyncWithHttpInfo (string number, string fields = default(string))
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling RecurringInvoiceApi->GetRecurringInvoice");

            var localVarPath = "/recurringinvoice/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// get recurring invoice positions for the given number (interne Nummer) Returns the positions for the recurring invoice with the given number (interne Nummer).  Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns></returns>
        public void GetRecurringInvoicePositions (string number, string fields = default(string))
        {
             GetRecurringInvoicePositionsWithHttpInfo(number, fields);
        }

        /// <summary>
        /// get recurring invoice positions for the given number (interne Nummer) Returns the positions for the recurring invoice with the given number (interne Nummer).  Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetRecurringInvoicePositionsWithHttpInfo (string number, string fields = default(string))
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling RecurringInvoiceApi->GetRecurringInvoicePositions");

            var localVarPath = "/recurringinvoice/{number}/positions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecurringInvoicePositions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// get recurring invoice positions for the given number (interne Nummer) Returns the positions for the recurring invoice with the given number (interne Nummer).  Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetRecurringInvoicePositionsAsync (string number, string fields = default(string))
        {
             await GetRecurringInvoicePositionsAsyncWithHttpInfo(number, fields);

        }

        /// <summary>
        /// get recurring invoice positions for the given number (interne Nummer) Returns the positions for the recurring invoice with the given number (interne Nummer).  Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetRecurringInvoicePositionsAsyncWithHttpInfo (string number, string fields = default(string))
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling RecurringInvoiceApi->GetRecurringInvoicePositions");

            var localVarPath = "/recurringinvoice/{number}/positions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecurringInvoicePositions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// recurring invoices Returns the Scopevisio recurring invoices. &lt;i&gt; Required profile(s): Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns></returns>
        public void GetRecurringInvoices (string body = default(string))
        {
             GetRecurringInvoicesWithHttpInfo(body);
        }

        /// <summary>
        /// recurring invoices Returns the Scopevisio recurring invoices. &lt;i&gt; Required profile(s): Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetRecurringInvoicesWithHttpInfo (string body = default(string))
        {

            var localVarPath = "/recurringinvoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecurringInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// recurring invoices Returns the Scopevisio recurring invoices. &lt;i&gt; Required profile(s): Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetRecurringInvoicesAsync (string body = default(string))
        {
             await GetRecurringInvoicesAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// recurring invoices Returns the Scopevisio recurring invoices. &lt;i&gt; Required profile(s): Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetRecurringInvoicesAsyncWithHttpInfo (string body = default(string))
        {

            var localVarPath = "/recurringinvoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecurringInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the recurrence data of an invoice. Update the recurrence data of the invoice with the given number(interne Nummer).  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRecurringInvoice (string number, RecurringInvoiceForm body = default(RecurringInvoiceForm))
        {
             UpdateRecurringInvoiceWithHttpInfo(number, body);
        }

        /// <summary>
        /// Update the recurrence data of an invoice. Update the recurrence data of the invoice with the given number(interne Nummer).  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRecurringInvoiceWithHttpInfo (string number, RecurringInvoiceForm body = default(RecurringInvoiceForm))
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling RecurringInvoiceApi->UpdateRecurringInvoice");

            var localVarPath = "/recurringinvoice/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the recurrence data of an invoice. Update the recurrence data of the invoice with the given number(interne Nummer).  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRecurringInvoiceAsync (string number, RecurringInvoiceForm body = default(RecurringInvoiceForm))
        {
             await UpdateRecurringInvoiceAsyncWithHttpInfo(number, body);

        }

        /// <summary>
        /// Update the recurrence data of an invoice. Update the recurrence data of the invoice with the given number(interne Nummer).  Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio recurring invoice</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRecurringInvoiceAsyncWithHttpInfo (string number, RecurringInvoiceForm body = default(RecurringInvoiceForm))
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling RecurringInvoiceApi->UpdateRecurringInvoice");

            var localVarPath = "/recurringinvoice/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
