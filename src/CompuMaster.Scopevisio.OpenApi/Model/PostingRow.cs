/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CompuMaster.Scopevisio.OpenApi.Client.OpenAPIDateConverter;

namespace CompuMaster.Scopevisio.OpenApi.Model
{
    /// <summary>
    /// A posting always requires more than one row.
    /// </summary>
    [DataContract]
    public partial class PostingRow :  IEquatable<PostingRow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostingRow" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostingRow() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostingRow" /> class.
        /// </summary>
        /// <param name="postingDate">posting date (required).</param>
        /// <param name="documentDate">document date.</param>
        /// <param name="documentNumber">document number (required).</param>
        /// <param name="externalDocumentNumber">external document number.</param>
        /// <param name="account">account (personal or impersonal account) (required).</param>
        /// <param name="summaryAccount">summary account (required if a personal account is used).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="cancelDocument">number of documet for cancellation.</param>
        /// <param name="foreignCurrencyAmount">foreign currency amount.</param>
        /// <param name="foreignCurrencyCode">foreign currency code.</param>
        /// <param name="foreignCurrencyRate">foreign currency rate.</param>
        /// <param name="documentText">document text.</param>
        /// <param name="rowText">posting row text.</param>
        /// <param name="vatKey">vat key.</param>
        /// <param name="dimensions">dimensions.</param>
        /// <param name="discountPercent1">discount percent 1, evaluated if \&quot;account\&quot; is personal account.</param>
        /// <param name="discountPeriod1">discount period 1, evaluated if \&quot;account\&quot; is personal account.</param>
        /// <param name="discountPercent2">discount percent 2, evaluated if \&quot;account\&quot; is personal account.</param>
        /// <param name="discountPeriod2">discount period 2, evaluated if \&quot;account\&quot; is personal account.</param>
        /// <param name="nettimeLimit">net time limit, evaluated if \&quot;account\&quot; is personal account.</param>
        /// <param name="disountAccount">disountAccount(Skontokonto), evaluated if \&quot;account\&quot; is personal account.</param>
        /// <param name="paymentType">paymentType(Zahlungsart), evaluated if \&quot;account\&quot; is personal account.</param>
        /// <param name="internalDocumentNumber">internal document number.</param>
        public PostingRow(long postingDate = default(long), long documentDate = default(long), string documentNumber = default(string), string externalDocumentNumber = default(string), string account = default(string), string summaryAccount = default(string), decimal amount = default(decimal), string cancelDocument = default(string), decimal foreignCurrencyAmount = default(decimal), string foreignCurrencyCode = default(string), decimal foreignCurrencyRate = default(decimal), string documentText = default(string), string rowText = default(string), string vatKey = default(string), List<DimensionForm> dimensions = default(List<DimensionForm>), decimal discountPercent1 = default(decimal), long discountPeriod1 = default(long), decimal discountPercent2 = default(decimal), long discountPeriod2 = default(long), long nettimeLimit = default(long), string disountAccount = default(string), string paymentType = default(string), string internalDocumentNumber = default(string))
        {
            // to ensure "postingDate" is required (not null)
            if (postingDate == null)
            {
                throw new InvalidDataException("postingDate is a required property for PostingRow and cannot be null");
            }
            else
            {
                this.PostingDate = postingDate;
            }
            
            // to ensure "documentNumber" is required (not null)
            if (documentNumber == null)
            {
                throw new InvalidDataException("documentNumber is a required property for PostingRow and cannot be null");
            }
            else
            {
                this.DocumentNumber = documentNumber;
            }
            
            // to ensure "account" is required (not null)
            if (account == null)
            {
                throw new InvalidDataException("account is a required property for PostingRow and cannot be null");
            }
            else
            {
                this.Account = account;
            }
            
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for PostingRow and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            
            this.DocumentDate = documentDate;
            this.ExternalDocumentNumber = externalDocumentNumber;
            this.SummaryAccount = summaryAccount;
            this.CancelDocument = cancelDocument;
            this.ForeignCurrencyAmount = foreignCurrencyAmount;
            this.ForeignCurrencyCode = foreignCurrencyCode;
            this.ForeignCurrencyRate = foreignCurrencyRate;
            this.DocumentText = documentText;
            this.RowText = rowText;
            this.VatKey = vatKey;
            this.Dimensions = dimensions;
            this.DiscountPercent1 = discountPercent1;
            this.DiscountPeriod1 = discountPeriod1;
            this.DiscountPercent2 = discountPercent2;
            this.DiscountPeriod2 = discountPeriod2;
            this.NettimeLimit = nettimeLimit;
            this.DisountAccount = disountAccount;
            this.PaymentType = paymentType;
            this.InternalDocumentNumber = internalDocumentNumber;
        }
        
        /// <summary>
        /// posting date
        /// </summary>
        /// <value>posting date</value>
        [DataMember(Name="postingDate", EmitDefaultValue=true)]
        public long PostingDate { get; set; }

        /// <summary>
        /// document date
        /// </summary>
        /// <value>document date</value>
        [DataMember(Name="documentDate", EmitDefaultValue=false)]
        public long DocumentDate { get; set; }

        /// <summary>
        /// document number
        /// </summary>
        /// <value>document number</value>
        [DataMember(Name="documentNumber", EmitDefaultValue=true)]
        public string DocumentNumber { get; set; }

        /// <summary>
        /// external document number
        /// </summary>
        /// <value>external document number</value>
        [DataMember(Name="externalDocumentNumber", EmitDefaultValue=false)]
        public string ExternalDocumentNumber { get; set; }

        /// <summary>
        /// account (personal or impersonal account)
        /// </summary>
        /// <value>account (personal or impersonal account)</value>
        [DataMember(Name="account", EmitDefaultValue=true)]
        public string Account { get; set; }

        /// <summary>
        /// summary account (required if a personal account is used)
        /// </summary>
        /// <value>summary account (required if a personal account is used)</value>
        [DataMember(Name="summaryAccount", EmitDefaultValue=false)]
        public string SummaryAccount { get; set; }

        /// <summary>
        /// amount
        /// </summary>
        /// <value>amount</value>
        [DataMember(Name="amount", EmitDefaultValue=true)]
        public decimal Amount { get; set; }

        /// <summary>
        /// number of documet for cancellation
        /// </summary>
        /// <value>number of documet for cancellation</value>
        [DataMember(Name="cancelDocument", EmitDefaultValue=false)]
        public string CancelDocument { get; set; }

        /// <summary>
        /// foreign currency amount
        /// </summary>
        /// <value>foreign currency amount</value>
        [DataMember(Name="foreignCurrencyAmount", EmitDefaultValue=false)]
        public decimal ForeignCurrencyAmount { get; set; }

        /// <summary>
        /// foreign currency code
        /// </summary>
        /// <value>foreign currency code</value>
        [DataMember(Name="foreignCurrencyCode", EmitDefaultValue=false)]
        public string ForeignCurrencyCode { get; set; }

        /// <summary>
        /// foreign currency rate
        /// </summary>
        /// <value>foreign currency rate</value>
        [DataMember(Name="foreignCurrencyRate", EmitDefaultValue=false)]
        public decimal ForeignCurrencyRate { get; set; }

        /// <summary>
        /// document text
        /// </summary>
        /// <value>document text</value>
        [DataMember(Name="documentText", EmitDefaultValue=false)]
        public string DocumentText { get; set; }

        /// <summary>
        /// posting row text
        /// </summary>
        /// <value>posting row text</value>
        [DataMember(Name="rowText", EmitDefaultValue=false)]
        public string RowText { get; set; }

        /// <summary>
        /// vat key
        /// </summary>
        /// <value>vat key</value>
        [DataMember(Name="vatKey", EmitDefaultValue=false)]
        public string VatKey { get; set; }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name="dimensions", EmitDefaultValue=false)]
        public List<DimensionForm> Dimensions { get; set; }

        /// <summary>
        /// discount percent 1, evaluated if \&quot;account\&quot; is personal account
        /// </summary>
        /// <value>discount percent 1, evaluated if \&quot;account\&quot; is personal account</value>
        [DataMember(Name="discountPercent1", EmitDefaultValue=false)]
        public decimal DiscountPercent1 { get; set; }

        /// <summary>
        /// discount period 1, evaluated if \&quot;account\&quot; is personal account
        /// </summary>
        /// <value>discount period 1, evaluated if \&quot;account\&quot; is personal account</value>
        [DataMember(Name="discountPeriod1", EmitDefaultValue=false)]
        public long DiscountPeriod1 { get; set; }

        /// <summary>
        /// discount percent 2, evaluated if \&quot;account\&quot; is personal account
        /// </summary>
        /// <value>discount percent 2, evaluated if \&quot;account\&quot; is personal account</value>
        [DataMember(Name="discountPercent2", EmitDefaultValue=false)]
        public decimal DiscountPercent2 { get; set; }

        /// <summary>
        /// discount period 2, evaluated if \&quot;account\&quot; is personal account
        /// </summary>
        /// <value>discount period 2, evaluated if \&quot;account\&quot; is personal account</value>
        [DataMember(Name="discountPeriod2", EmitDefaultValue=false)]
        public long DiscountPeriod2 { get; set; }

        /// <summary>
        /// net time limit, evaluated if \&quot;account\&quot; is personal account
        /// </summary>
        /// <value>net time limit, evaluated if \&quot;account\&quot; is personal account</value>
        [DataMember(Name="nettimeLimit", EmitDefaultValue=false)]
        public long NettimeLimit { get; set; }

        /// <summary>
        /// disountAccount(Skontokonto), evaluated if \&quot;account\&quot; is personal account
        /// </summary>
        /// <value>disountAccount(Skontokonto), evaluated if \&quot;account\&quot; is personal account</value>
        [DataMember(Name="disountAccount", EmitDefaultValue=false)]
        public string DisountAccount { get; set; }

        /// <summary>
        /// paymentType(Zahlungsart), evaluated if \&quot;account\&quot; is personal account
        /// </summary>
        /// <value>paymentType(Zahlungsart), evaluated if \&quot;account\&quot; is personal account</value>
        [DataMember(Name="paymentType", EmitDefaultValue=false)]
        public string PaymentType { get; set; }

        /// <summary>
        /// internal document number
        /// </summary>
        /// <value>internal document number</value>
        [DataMember(Name="internalDocumentNumber", EmitDefaultValue=false)]
        public string InternalDocumentNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostingRow {\n");
            sb.Append("  PostingDate: ").Append(PostingDate).Append("\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  DocumentNumber: ").Append(DocumentNumber).Append("\n");
            sb.Append("  ExternalDocumentNumber: ").Append(ExternalDocumentNumber).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  SummaryAccount: ").Append(SummaryAccount).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CancelDocument: ").Append(CancelDocument).Append("\n");
            sb.Append("  ForeignCurrencyAmount: ").Append(ForeignCurrencyAmount).Append("\n");
            sb.Append("  ForeignCurrencyCode: ").Append(ForeignCurrencyCode).Append("\n");
            sb.Append("  ForeignCurrencyRate: ").Append(ForeignCurrencyRate).Append("\n");
            sb.Append("  DocumentText: ").Append(DocumentText).Append("\n");
            sb.Append("  RowText: ").Append(RowText).Append("\n");
            sb.Append("  VatKey: ").Append(VatKey).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  DiscountPercent1: ").Append(DiscountPercent1).Append("\n");
            sb.Append("  DiscountPeriod1: ").Append(DiscountPeriod1).Append("\n");
            sb.Append("  DiscountPercent2: ").Append(DiscountPercent2).Append("\n");
            sb.Append("  DiscountPeriod2: ").Append(DiscountPeriod2).Append("\n");
            sb.Append("  NettimeLimit: ").Append(NettimeLimit).Append("\n");
            sb.Append("  DisountAccount: ").Append(DisountAccount).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  InternalDocumentNumber: ").Append(InternalDocumentNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostingRow);
        }

        /// <summary>
        /// Returns true if PostingRow instances are equal
        /// </summary>
        /// <param name="input">Instance of PostingRow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostingRow input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PostingDate == input.PostingDate ||
                    (this.PostingDate != null &&
                    this.PostingDate.Equals(input.PostingDate))
                ) && 
                (
                    this.DocumentDate == input.DocumentDate ||
                    (this.DocumentDate != null &&
                    this.DocumentDate.Equals(input.DocumentDate))
                ) && 
                (
                    this.DocumentNumber == input.DocumentNumber ||
                    (this.DocumentNumber != null &&
                    this.DocumentNumber.Equals(input.DocumentNumber))
                ) && 
                (
                    this.ExternalDocumentNumber == input.ExternalDocumentNumber ||
                    (this.ExternalDocumentNumber != null &&
                    this.ExternalDocumentNumber.Equals(input.ExternalDocumentNumber))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.SummaryAccount == input.SummaryAccount ||
                    (this.SummaryAccount != null &&
                    this.SummaryAccount.Equals(input.SummaryAccount))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.CancelDocument == input.CancelDocument ||
                    (this.CancelDocument != null &&
                    this.CancelDocument.Equals(input.CancelDocument))
                ) && 
                (
                    this.ForeignCurrencyAmount == input.ForeignCurrencyAmount ||
                    (this.ForeignCurrencyAmount != null &&
                    this.ForeignCurrencyAmount.Equals(input.ForeignCurrencyAmount))
                ) && 
                (
                    this.ForeignCurrencyCode == input.ForeignCurrencyCode ||
                    (this.ForeignCurrencyCode != null &&
                    this.ForeignCurrencyCode.Equals(input.ForeignCurrencyCode))
                ) && 
                (
                    this.ForeignCurrencyRate == input.ForeignCurrencyRate ||
                    (this.ForeignCurrencyRate != null &&
                    this.ForeignCurrencyRate.Equals(input.ForeignCurrencyRate))
                ) && 
                (
                    this.DocumentText == input.DocumentText ||
                    (this.DocumentText != null &&
                    this.DocumentText.Equals(input.DocumentText))
                ) && 
                (
                    this.RowText == input.RowText ||
                    (this.RowText != null &&
                    this.RowText.Equals(input.RowText))
                ) && 
                (
                    this.VatKey == input.VatKey ||
                    (this.VatKey != null &&
                    this.VatKey.Equals(input.VatKey))
                ) && 
                (
                    this.Dimensions == input.Dimensions ||
                    this.Dimensions != null &&
                    input.Dimensions != null &&
                    this.Dimensions.SequenceEqual(input.Dimensions)
                ) && 
                (
                    this.DiscountPercent1 == input.DiscountPercent1 ||
                    (this.DiscountPercent1 != null &&
                    this.DiscountPercent1.Equals(input.DiscountPercent1))
                ) && 
                (
                    this.DiscountPeriod1 == input.DiscountPeriod1 ||
                    (this.DiscountPeriod1 != null &&
                    this.DiscountPeriod1.Equals(input.DiscountPeriod1))
                ) && 
                (
                    this.DiscountPercent2 == input.DiscountPercent2 ||
                    (this.DiscountPercent2 != null &&
                    this.DiscountPercent2.Equals(input.DiscountPercent2))
                ) && 
                (
                    this.DiscountPeriod2 == input.DiscountPeriod2 ||
                    (this.DiscountPeriod2 != null &&
                    this.DiscountPeriod2.Equals(input.DiscountPeriod2))
                ) && 
                (
                    this.NettimeLimit == input.NettimeLimit ||
                    (this.NettimeLimit != null &&
                    this.NettimeLimit.Equals(input.NettimeLimit))
                ) && 
                (
                    this.DisountAccount == input.DisountAccount ||
                    (this.DisountAccount != null &&
                    this.DisountAccount.Equals(input.DisountAccount))
                ) && 
                (
                    this.PaymentType == input.PaymentType ||
                    (this.PaymentType != null &&
                    this.PaymentType.Equals(input.PaymentType))
                ) && 
                (
                    this.InternalDocumentNumber == input.InternalDocumentNumber ||
                    (this.InternalDocumentNumber != null &&
                    this.InternalDocumentNumber.Equals(input.InternalDocumentNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PostingDate != null)
                    hashCode = hashCode * 59 + this.PostingDate.GetHashCode();
                if (this.DocumentDate != null)
                    hashCode = hashCode * 59 + this.DocumentDate.GetHashCode();
                if (this.DocumentNumber != null)
                    hashCode = hashCode * 59 + this.DocumentNumber.GetHashCode();
                if (this.ExternalDocumentNumber != null)
                    hashCode = hashCode * 59 + this.ExternalDocumentNumber.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.SummaryAccount != null)
                    hashCode = hashCode * 59 + this.SummaryAccount.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.CancelDocument != null)
                    hashCode = hashCode * 59 + this.CancelDocument.GetHashCode();
                if (this.ForeignCurrencyAmount != null)
                    hashCode = hashCode * 59 + this.ForeignCurrencyAmount.GetHashCode();
                if (this.ForeignCurrencyCode != null)
                    hashCode = hashCode * 59 + this.ForeignCurrencyCode.GetHashCode();
                if (this.ForeignCurrencyRate != null)
                    hashCode = hashCode * 59 + this.ForeignCurrencyRate.GetHashCode();
                if (this.DocumentText != null)
                    hashCode = hashCode * 59 + this.DocumentText.GetHashCode();
                if (this.RowText != null)
                    hashCode = hashCode * 59 + this.RowText.GetHashCode();
                if (this.VatKey != null)
                    hashCode = hashCode * 59 + this.VatKey.GetHashCode();
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.DiscountPercent1 != null)
                    hashCode = hashCode * 59 + this.DiscountPercent1.GetHashCode();
                if (this.DiscountPeriod1 != null)
                    hashCode = hashCode * 59 + this.DiscountPeriod1.GetHashCode();
                if (this.DiscountPercent2 != null)
                    hashCode = hashCode * 59 + this.DiscountPercent2.GetHashCode();
                if (this.DiscountPeriod2 != null)
                    hashCode = hashCode * 59 + this.DiscountPeriod2.GetHashCode();
                if (this.NettimeLimit != null)
                    hashCode = hashCode * 59 + this.NettimeLimit.GetHashCode();
                if (this.DisountAccount != null)
                    hashCode = hashCode * 59 + this.DisountAccount.GetHashCode();
                if (this.PaymentType != null)
                    hashCode = hashCode * 59 + this.PaymentType.GetHashCode();
                if (this.InternalDocumentNumber != null)
                    hashCode = hashCode * 59 + this.InternalDocumentNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
