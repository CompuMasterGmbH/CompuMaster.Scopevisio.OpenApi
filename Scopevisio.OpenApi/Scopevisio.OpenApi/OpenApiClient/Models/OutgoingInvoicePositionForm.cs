// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace CompuMaster.Scopevisio.OpenApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class OutgoingInvoicePositionForm
    {
        /// <summary>
        /// Initializes a new instance of the OutgoingInvoicePositionForm
        /// class.
        /// </summary>
        public OutgoingInvoicePositionForm() { }

        /// <summary>
        /// Initializes a new instance of the OutgoingInvoicePositionForm
        /// class.
        /// </summary>
        public OutgoingInvoicePositionForm(string typeDisplay = default(string), string number = default(string), string name = default(string), string description = default(string), double? quantity = default(double?), string unit = default(string), double? singleAmount = default(double?), string account = default(string), string vatKey = default(string), double? discount = default(double?), string freeText1 = default(string), string freeText2 = default(string), double? singleCostAmount = default(double?), long? valutaDate = default(long?), bool? asIfSold = default(bool?))
        {
            TypeDisplay = typeDisplay;
            Number = number;
            Name = name;
            Description = description;
            Quantity = quantity;
            Unit = unit;
            SingleAmount = singleAmount;
            Account = account;
            VatKey = vatKey;
            Discount = discount;
            FreeText1 = freeText1;
            FreeText2 = freeText2;
            SingleCostAmount = singleCostAmount;
            ValutaDate = valutaDate;
            AsIfSold = asIfSold;
        }

        /// <summary>
        /// typeDisplay (Typ). Sets also type (Typ-Id). If invalid value
        /// provided or not provided at all, the typeDisplay is set to
        /// "Produkt". Possible values include: 'Produkt', 'Zwischensumme',
        /// 'Überschrift', 'Freitext'
        /// </summary>
        [JsonProperty(PropertyName = "typeDisplay")]
        public string TypeDisplay { get; set; }

        /// <summary>
        /// number (Produktnummer)
        /// </summary>
        [JsonProperty(PropertyName = "number")]
        public string Number { get; set; }

        /// <summary>
        /// name (Bezeichnung). Mandatory for positionsForm of types
        /// "Überschrift" and "Freitext"
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// description (Beschreibung)
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// quantity (Menge)
        /// </summary>
        [JsonProperty(PropertyName = "quantity")]
        public double? Quantity { get; set; }

        /// <summary>
        /// unit (Einheit)
        /// </summary>
        [JsonProperty(PropertyName = "unit")]
        public string Unit { get; set; }

        /// <summary>
        /// singleAmount (Eizelpreis). If the invoice is nett (Netto) this
        /// will be the net amount, if the invoice is gross, this will be the
        /// gross amount for the position. After calculation the following
        /// fields are set: singleAmount(Einzelpreis (Netto)),
        /// singleAmountGross(Einzelpreis (Brutto)),
        /// amount(Gesamtpreis(Netto)), amountGross(Gesamtpreis (Brutto))
        /// </summary>
        [JsonProperty(PropertyName = "singleAmount")]
        public double? SingleAmount { get; set; }

        /// <summary>
        /// account (Konto)
        /// </summary>
        [JsonProperty(PropertyName = "account")]
        public string Account { get; set; }

        /// <summary>
        /// vatKey(Steuerschlüssel)
        /// </summary>
        [JsonProperty(PropertyName = "vatKey")]
        public string VatKey { get; set; }

        /// <summary>
        /// discount (Rabatt (%))
        /// </summary>
        [JsonProperty(PropertyName = "discount")]
        public double? Discount { get; set; }

        /// <summary>
        /// freeText1 (Freitext 1)
        /// </summary>
        [JsonProperty(PropertyName = "freeText1")]
        public string FreeText1 { get; set; }

        /// <summary>
        /// freeText2 (Freitext 2)
        /// </summary>
        [JsonProperty(PropertyName = "freeText2")]
        public string FreeText2 { get; set; }

        /// <summary>
        /// singeCostAmount (Einkaufs-Einzelpreis(netto))
        /// </summary>
        [JsonProperty(PropertyName = "singleCostAmount")]
        public double? SingleCostAmount { get; set; }

        /// <summary>
        /// valutaDate (Umsatzzeitpunkt)
        /// </summary>
        [JsonProperty(PropertyName = "valutaDate")]
        public long? ValutaDate { get; set; }

        /// <summary>
        /// asIfSold (As-if-sold) Only used in opportunity and offer
        /// </summary>
        [JsonProperty(PropertyName = "asIfSold")]
        public bool? AsIfSold { get; set; }

    }
}
