/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CompuMaster.Scopevisio.OpenApi.Client.OpenAPIDateConverter;

namespace CompuMaster.Scopevisio.OpenApi.Model
{
    /// <summary>
    /// OutgoingInvoicePositionForm
    /// </summary>
    [DataContract]
    public partial class OutgoingInvoicePositionForm :  IEquatable<OutgoingInvoicePositionForm>, IValidatableObject
    {
        /// <summary>
        /// typeDisplay (Typ). Sets also type (Typ-Id). If invalid value provided or not provided at all, the typeDisplay is set to \&quot;Produkt\&quot;.
        /// </summary>
        /// <value>typeDisplay (Typ). Sets also type (Typ-Id). If invalid value provided or not provided at all, the typeDisplay is set to \&quot;Produkt\&quot;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeDisplayEnum
        {
            /// <summary>
            /// Enum Produkt for value: Produkt
            /// </summary>
            [EnumMember(Value = "Produkt")]
            Produkt = 1,

            /// <summary>
            /// Enum Zwischensumme for value: Zwischensumme
            /// </summary>
            [EnumMember(Value = "Zwischensumme")]
            Zwischensumme = 2,

            /// <summary>
            /// Enum Berschrift for value: Überschrift
            /// </summary>
            [EnumMember(Value = "Überschrift")]
            Berschrift = 3,

            /// <summary>
            /// Enum Freitext for value: Freitext
            /// </summary>
            [EnumMember(Value = "Freitext")]
            Freitext = 4

        }

        /// <summary>
        /// typeDisplay (Typ). Sets also type (Typ-Id). If invalid value provided or not provided at all, the typeDisplay is set to \&quot;Produkt\&quot;.
        /// </summary>
        /// <value>typeDisplay (Typ). Sets also type (Typ-Id). If invalid value provided or not provided at all, the typeDisplay is set to \&quot;Produkt\&quot;.</value>
        [DataMember(Name="typeDisplay", EmitDefaultValue=false)]
        public TypeDisplayEnum? TypeDisplay { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutgoingInvoicePositionForm" /> class.
        /// </summary>
        /// <param name="typeDisplay">typeDisplay (Typ). Sets also type (Typ-Id). If invalid value provided or not provided at all, the typeDisplay is set to \&quot;Produkt\&quot;..</param>
        /// <param name="number">number (Produktnummer).</param>
        /// <param name="name">name (Bezeichnung). Mandatory for positionsForm of types \&quot;Überschrift\&quot; and \&quot;Freitext\&quot;.</param>
        /// <param name="description">description (Beschreibung).</param>
        /// <param name="quantity">quantity (Menge).</param>
        /// <param name="unit">unit (Einheit).</param>
        /// <param name="singleAmount"> singleAmount (Eizelpreis). If the invoice is nett (Netto) this will be the net amount, if the invoice is gross, this will be the gross amount for the position. After calculation the following fields are set: singleAmount(Einzelpreis (Netto)), singleAmountGross(Einzelpreis (Brutto)), amount(Gesamtpreis(Netto)), amountGross(Gesamtpreis (Brutto)).</param>
        /// <param name="account">account (Konto).</param>
        /// <param name="vatKey">vatKey(Steuerschlüssel).</param>
        /// <param name="discount">discount (Rabatt (%)).</param>
        /// <param name="freeText1">freeText1 (Freitext 1).</param>
        /// <param name="freeText2">freeText2 (Freitext 2).</param>
        /// <param name="singleCostAmount">singeCostAmount (Einkaufs-Einzelpreis(netto)).</param>
        /// <param name="valutaDate">valutaDate (Umsatzzeitpunkt).</param>
        /// <param name="asIfSold">asIfSold (As-if-sold) Only used in opportunity and offer (default to false).</param>
        public OutgoingInvoicePositionForm(TypeDisplayEnum? typeDisplay = default(TypeDisplayEnum?), string number = default(string), string name = default(string), string description = default(string), decimal quantity = default(decimal), string unit = default(string), decimal singleAmount = default(decimal), string account = default(string), string vatKey = default(string), decimal discount = default(decimal), string freeText1 = default(string), string freeText2 = default(string), decimal singleCostAmount = default(decimal), long valutaDate = default(long), bool asIfSold = false)
        {
            this.TypeDisplay = typeDisplay;
            this.Number = number;
            this.Name = name;
            this.Description = description;
            this.Quantity = quantity;
            this.Unit = unit;
            this.SingleAmount = singleAmount;
            this.Account = account;
            this.VatKey = vatKey;
            this.Discount = discount;
            this.FreeText1 = freeText1;
            this.FreeText2 = freeText2;
            this.SingleCostAmount = singleCostAmount;
            this.ValutaDate = valutaDate;
            // use default value if no "asIfSold" provided
            if (asIfSold == null)
            {
                this.AsIfSold = false;
            }
            else
            {
                this.AsIfSold = asIfSold;
            }
        }
        

        /// <summary>
        /// number (Produktnummer)
        /// </summary>
        /// <value>number (Produktnummer)</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// name (Bezeichnung). Mandatory for positionsForm of types \&quot;Überschrift\&quot; and \&quot;Freitext\&quot;
        /// </summary>
        /// <value>name (Bezeichnung). Mandatory for positionsForm of types \&quot;Überschrift\&quot; and \&quot;Freitext\&quot;</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// description (Beschreibung)
        /// </summary>
        /// <value>description (Beschreibung)</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// quantity (Menge)
        /// </summary>
        /// <value>quantity (Menge)</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// unit (Einheit)
        /// </summary>
        /// <value>unit (Einheit)</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        ///  singleAmount (Eizelpreis). If the invoice is nett (Netto) this will be the net amount, if the invoice is gross, this will be the gross amount for the position. After calculation the following fields are set: singleAmount(Einzelpreis (Netto)), singleAmountGross(Einzelpreis (Brutto)), amount(Gesamtpreis(Netto)), amountGross(Gesamtpreis (Brutto))
        /// </summary>
        /// <value> singleAmount (Eizelpreis). If the invoice is nett (Netto) this will be the net amount, if the invoice is gross, this will be the gross amount for the position. After calculation the following fields are set: singleAmount(Einzelpreis (Netto)), singleAmountGross(Einzelpreis (Brutto)), amount(Gesamtpreis(Netto)), amountGross(Gesamtpreis (Brutto))</value>
        [DataMember(Name="singleAmount", EmitDefaultValue=false)]
        public decimal SingleAmount { get; set; }

        /// <summary>
        /// account (Konto)
        /// </summary>
        /// <value>account (Konto)</value>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public string Account { get; set; }

        /// <summary>
        /// vatKey(Steuerschlüssel)
        /// </summary>
        /// <value>vatKey(Steuerschlüssel)</value>
        [DataMember(Name="vatKey", EmitDefaultValue=false)]
        public string VatKey { get; set; }

        /// <summary>
        /// discount (Rabatt (%))
        /// </summary>
        /// <value>discount (Rabatt (%))</value>
        [DataMember(Name="discount", EmitDefaultValue=false)]
        public decimal Discount { get; set; }

        /// <summary>
        /// freeText1 (Freitext 1)
        /// </summary>
        /// <value>freeText1 (Freitext 1)</value>
        [DataMember(Name="freeText1", EmitDefaultValue=false)]
        public string FreeText1 { get; set; }

        /// <summary>
        /// freeText2 (Freitext 2)
        /// </summary>
        /// <value>freeText2 (Freitext 2)</value>
        [DataMember(Name="freeText2", EmitDefaultValue=false)]
        public string FreeText2 { get; set; }

        /// <summary>
        /// singeCostAmount (Einkaufs-Einzelpreis(netto))
        /// </summary>
        /// <value>singeCostAmount (Einkaufs-Einzelpreis(netto))</value>
        [DataMember(Name="singleCostAmount", EmitDefaultValue=false)]
        public decimal SingleCostAmount { get; set; }

        /// <summary>
        /// valutaDate (Umsatzzeitpunkt)
        /// </summary>
        /// <value>valutaDate (Umsatzzeitpunkt)</value>
        [DataMember(Name="valutaDate", EmitDefaultValue=false)]
        public long ValutaDate { get; set; }

        /// <summary>
        /// asIfSold (As-if-sold) Only used in opportunity and offer
        /// </summary>
        /// <value>asIfSold (As-if-sold) Only used in opportunity and offer</value>
        [DataMember(Name="asIfSold", EmitDefaultValue=false)]
        public bool AsIfSold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OutgoingInvoicePositionForm {\n");
            sb.Append("  TypeDisplay: ").Append(TypeDisplay).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  SingleAmount: ").Append(SingleAmount).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  VatKey: ").Append(VatKey).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  FreeText1: ").Append(FreeText1).Append("\n");
            sb.Append("  FreeText2: ").Append(FreeText2).Append("\n");
            sb.Append("  SingleCostAmount: ").Append(SingleCostAmount).Append("\n");
            sb.Append("  ValutaDate: ").Append(ValutaDate).Append("\n");
            sb.Append("  AsIfSold: ").Append(AsIfSold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutgoingInvoicePositionForm);
        }

        /// <summary>
        /// Returns true if OutgoingInvoicePositionForm instances are equal
        /// </summary>
        /// <param name="input">Instance of OutgoingInvoicePositionForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutgoingInvoicePositionForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TypeDisplay == input.TypeDisplay ||
                    (this.TypeDisplay != null &&
                    this.TypeDisplay.Equals(input.TypeDisplay))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.SingleAmount == input.SingleAmount ||
                    (this.SingleAmount != null &&
                    this.SingleAmount.Equals(input.SingleAmount))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.VatKey == input.VatKey ||
                    (this.VatKey != null &&
                    this.VatKey.Equals(input.VatKey))
                ) && 
                (
                    this.Discount == input.Discount ||
                    (this.Discount != null &&
                    this.Discount.Equals(input.Discount))
                ) && 
                (
                    this.FreeText1 == input.FreeText1 ||
                    (this.FreeText1 != null &&
                    this.FreeText1.Equals(input.FreeText1))
                ) && 
                (
                    this.FreeText2 == input.FreeText2 ||
                    (this.FreeText2 != null &&
                    this.FreeText2.Equals(input.FreeText2))
                ) && 
                (
                    this.SingleCostAmount == input.SingleCostAmount ||
                    (this.SingleCostAmount != null &&
                    this.SingleCostAmount.Equals(input.SingleCostAmount))
                ) && 
                (
                    this.ValutaDate == input.ValutaDate ||
                    (this.ValutaDate != null &&
                    this.ValutaDate.Equals(input.ValutaDate))
                ) && 
                (
                    this.AsIfSold == input.AsIfSold ||
                    (this.AsIfSold != null &&
                    this.AsIfSold.Equals(input.AsIfSold))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TypeDisplay != null)
                    hashCode = hashCode * 59 + this.TypeDisplay.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.SingleAmount != null)
                    hashCode = hashCode * 59 + this.SingleAmount.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.VatKey != null)
                    hashCode = hashCode * 59 + this.VatKey.GetHashCode();
                if (this.Discount != null)
                    hashCode = hashCode * 59 + this.Discount.GetHashCode();
                if (this.FreeText1 != null)
                    hashCode = hashCode * 59 + this.FreeText1.GetHashCode();
                if (this.FreeText2 != null)
                    hashCode = hashCode * 59 + this.FreeText2.GetHashCode();
                if (this.SingleCostAmount != null)
                    hashCode = hashCode * 59 + this.SingleCostAmount.GetHashCode();
                if (this.ValutaDate != null)
                    hashCode = hashCode * 59 + this.ValutaDate.GetHashCode();
                if (this.AsIfSold != null)
                    hashCode = hashCode * 59 + this.AsIfSold.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
