/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CompuMaster.Scopevisio.OpenApi.Client;
using CompuMaster.Scopevisio.OpenApi.Api;

namespace CompuMaster.Scopevisio.OpenApi.Test
{
    /// <summary>
    ///  Class for testing TeamworkApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TeamworkApiTests
    {
        private TeamworkApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TeamworkApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TeamworkApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' TeamworkApi
            //Assert.IsInstanceOf(typeof(TeamworkApi), instance);
        }

        
        /// <summary>
        /// Test DeleteHandler1
        /// </summary>
        [Test]
        public void DeleteHandler1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string arg1 = null;
            //var response = instance.DeleteHandler1(arg1);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteHandler2
        /// </summary>
        [Test]
        public void DeleteHandler2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string arg1 = null;
            //string arg2 = null;
            //var response = instance.DeleteHandler2(arg1, arg2);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteHandler3
        /// </summary>
        [Test]
        public void DeleteHandler3Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string arg1 = null;
            //string arg2 = null;
            //string arg3 = null;
            //var response = instance.DeleteHandler3(arg1, arg2, arg3);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteHandler4
        /// </summary>
        [Test]
        public void DeleteHandler4Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string arg1 = null;
            //string arg2 = null;
            //string arg3 = null;
            //string arg4 = null;
            //var response = instance.DeleteHandler4(arg1, arg2, arg3, arg4);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetHandler1
        /// </summary>
        [Test]
        public void GetHandler1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string arg1 = null;
            //var response = instance.GetHandler1(arg1);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetHandler2
        /// </summary>
        [Test]
        public void GetHandler2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string arg1 = null;
            //string arg2 = null;
            //var response = instance.GetHandler2(arg1, arg2);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetHandler3
        /// </summary>
        [Test]
        public void GetHandler3Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string arg1 = null;
            //string arg2 = null;
            //string arg3 = null;
            //var response = instance.GetHandler3(arg1, arg2, arg3);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test PostHandler1
        /// </summary>
        [Test]
        public void PostHandler1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string arg1 = null;
            //var response = instance.PostHandler1(arg1);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test PostHandler2
        /// </summary>
        [Test]
        public void PostHandler2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string arg1 = null;
            //string arg2 = null;
            //var response = instance.PostHandler2(arg1, arg2);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test PostHandler3
        /// </summary>
        [Test]
        public void PostHandler3Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string arg1 = null;
            //string arg2 = null;
            //string arg3 = null;
            //var response = instance.PostHandler3(arg1, arg2, arg3);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test PutHandler1
        /// </summary>
        [Test]
        public void PutHandler1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string arg1 = null;
            //var response = instance.PutHandler1(arg1);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test PutHandler2
        /// </summary>
        [Test]
        public void PutHandler2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string arg1 = null;
            //string arg2 = null;
            //var response = instance.PutHandler2(arg1, arg2);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test PutHandler3
        /// </summary>
        [Test]
        public void PutHandler3Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string arg1 = null;
            //string arg2 = null;
            //string arg3 = null;
            //var response = instance.PutHandler3(arg1, arg2, arg3);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test PutHandler4
        /// </summary>
        [Test]
        public void PutHandler4Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string arg1 = null;
            //string arg2 = null;
            //string arg3 = null;
            //string arg4 = null;
            //var response = instance.PutHandler4(arg1, arg2, arg3, arg4);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
    }

}
