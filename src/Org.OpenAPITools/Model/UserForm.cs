/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserForm
    /// </summary>
    [DataContract]
    public partial class UserForm :  IEquatable<UserForm>, IValidatableObject
    {
        /// <summary>
        /// Gender
        /// </summary>
        /// <value>Gender</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenderEnum
        {
            /// <summary>
            /// Enum MALE for value: MALE
            /// </summary>
            [EnumMember(Value = "MALE")]
            MALE = 1,

            /// <summary>
            /// Enum FEMALE for value: FEMALE
            /// </summary>
            [EnumMember(Value = "FEMALE")]
            FEMALE = 2

        }

        /// <summary>
        /// Gender
        /// </summary>
        /// <value>Gender</value>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public GenderEnum? Gender { get; set; }
        /// <summary>
        /// User status
        /// </summary>
        /// <value>User status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum INVITED for value: INVITED
            /// </summary>
            [EnumMember(Value = "INVITED")]
            INVITED = 2,

            /// <summary>
            /// Enum CHANGED for value: CHANGED
            /// </summary>
            [EnumMember(Value = "CHANGED")]
            CHANGED = 3,

            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 4,

            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 5,

            /// <summary>
            /// Enum LOCKED for value: LOCKED
            /// </summary>
            [EnumMember(Value = "LOCKED")]
            LOCKED = 6

        }

        /// <summary>
        /// User status
        /// </summary>
        /// <value>User status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserForm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserForm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserForm" /> class.
        /// </summary>
        /// <param name="uid">User ID.</param>
        /// <param name="firstName">First name (required).</param>
        /// <param name="lastName">Last name (required).</param>
        /// <param name="gender">Gender.</param>
        /// <param name="email">Email address used as username (required).</param>
        /// <param name="shortName">User signature.</param>
        /// <param name="administrator">Indicates whether this user is an administrator (default to false).</param>
        /// <param name="password">User password. Must be at least 6 characters long.</param>
        /// <param name="changePassword">Indicates whether the user has to change the password (default to false).</param>
        /// <param name="profiles">User profiles to assign.</param>
        /// <param name="licenses">Product licenses to assign.</param>
        /// <param name="buyMissingLicenses">Wether to buy licenses, if not available (default to false).</param>
        /// <param name="teamworkRoles">Users role rights for teamwork..</param>
        public UserForm(string uid = default(string), string firstName = default(string), string lastName = default(string), GenderEnum? gender = default(GenderEnum?), string email = default(string), string shortName = default(string), bool administrator = false, string password = default(string), bool changePassword = false, List<Profile> profiles = default(List<Profile>), List<License> licenses = default(List<License>), bool buyMissingLicenses = false, List<TeamworkRole> teamworkRoles = default(List<TeamworkRole>))
        {
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new InvalidDataException("firstName is a required property for UserForm and cannot be null");
            }
            else
            {
                this.FirstName = firstName;
            }
            
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new InvalidDataException("lastName is a required property for UserForm and cannot be null");
            }
            else
            {
                this.LastName = lastName;
            }
            
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for UserForm and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            
            this.Uid = uid;
            this.Gender = gender;
            this.ShortName = shortName;
            // use default value if no "administrator" provided
            if (administrator == null)
            {
                this.Administrator = false;
            }
            else
            {
                this.Administrator = administrator;
            }
            this.Password = password;
            // use default value if no "changePassword" provided
            if (changePassword == null)
            {
                this.ChangePassword = false;
            }
            else
            {
                this.ChangePassword = changePassword;
            }
            this.Profiles = profiles;
            this.Licenses = licenses;
            // use default value if no "buyMissingLicenses" provided
            if (buyMissingLicenses == null)
            {
                this.BuyMissingLicenses = false;
            }
            else
            {
                this.BuyMissingLicenses = buyMissingLicenses;
            }
            this.TeamworkRoles = teamworkRoles;
        }
        
        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }

        /// <summary>
        /// First name
        /// </summary>
        /// <value>First name</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name
        /// </summary>
        /// <value>Last name</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }


        /// <summary>
        /// Email address used as username
        /// </summary>
        /// <value>Email address used as username</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// User signature
        /// </summary>
        /// <value>User signature</value>
        [DataMember(Name="shortName", EmitDefaultValue=false)]
        public string ShortName { get; set; }

        /// <summary>
        /// Indicates whether this user is an administrator
        /// </summary>
        /// <value>Indicates whether this user is an administrator</value>
        [DataMember(Name="administrator", EmitDefaultValue=false)]
        public bool Administrator { get; set; }

        /// <summary>
        /// User password. Must be at least 6 characters long
        /// </summary>
        /// <value>User password. Must be at least 6 characters long</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Indicates whether the user has to change the password
        /// </summary>
        /// <value>Indicates whether the user has to change the password</value>
        [DataMember(Name="changePassword", EmitDefaultValue=false)]
        public bool ChangePassword { get; set; }

        /// <summary>
        /// User profiles to assign
        /// </summary>
        /// <value>User profiles to assign</value>
        [DataMember(Name="profiles", EmitDefaultValue=false)]
        public List<Profile> Profiles { get; set; }

        /// <summary>
        /// Product licenses to assign
        /// </summary>
        /// <value>Product licenses to assign</value>
        [DataMember(Name="licenses", EmitDefaultValue=false)]
        public List<License> Licenses { get; set; }

        /// <summary>
        /// Wether to buy licenses, if not available
        /// </summary>
        /// <value>Wether to buy licenses, if not available</value>
        [DataMember(Name="buyMissingLicenses", EmitDefaultValue=false)]
        public bool BuyMissingLicenses { get; set; }


        /// <summary>
        /// User&#39;s special rights
        /// </summary>
        /// <value>User&#39;s special rights</value>
        [DataMember(Name="specialRights", EmitDefaultValue=false)]
        public List<string> SpecialRights { get; private set; }

        /// <summary>
        /// Creation timestamp
        /// </summary>
        /// <value>Creation timestamp</value>
        [DataMember(Name="creationTs", EmitDefaultValue=false)]
        public long CreationTs { get; private set; }

        /// <summary>
        /// Users role rights for teamwork.
        /// </summary>
        /// <value>Users role rights for teamwork.</value>
        [DataMember(Name="teamworkRoles", EmitDefaultValue=false)]
        public List<TeamworkRole> TeamworkRoles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserForm {\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Administrator: ").Append(Administrator).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ChangePassword: ").Append(ChangePassword).Append("\n");
            sb.Append("  Profiles: ").Append(Profiles).Append("\n");
            sb.Append("  Licenses: ").Append(Licenses).Append("\n");
            sb.Append("  BuyMissingLicenses: ").Append(BuyMissingLicenses).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SpecialRights: ").Append(SpecialRights).Append("\n");
            sb.Append("  CreationTs: ").Append(CreationTs).Append("\n");
            sb.Append("  TeamworkRoles: ").Append(TeamworkRoles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserForm);
        }

        /// <summary>
        /// Returns true if UserForm instances are equal
        /// </summary>
        /// <param name="input">Instance of UserForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.Administrator == input.Administrator ||
                    (this.Administrator != null &&
                    this.Administrator.Equals(input.Administrator))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.ChangePassword == input.ChangePassword ||
                    (this.ChangePassword != null &&
                    this.ChangePassword.Equals(input.ChangePassword))
                ) && 
                (
                    this.Profiles == input.Profiles ||
                    this.Profiles != null &&
                    input.Profiles != null &&
                    this.Profiles.SequenceEqual(input.Profiles)
                ) && 
                (
                    this.Licenses == input.Licenses ||
                    this.Licenses != null &&
                    input.Licenses != null &&
                    this.Licenses.SequenceEqual(input.Licenses)
                ) && 
                (
                    this.BuyMissingLicenses == input.BuyMissingLicenses ||
                    (this.BuyMissingLicenses != null &&
                    this.BuyMissingLicenses.Equals(input.BuyMissingLicenses))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SpecialRights == input.SpecialRights ||
                    this.SpecialRights != null &&
                    input.SpecialRights != null &&
                    this.SpecialRights.SequenceEqual(input.SpecialRights)
                ) && 
                (
                    this.CreationTs == input.CreationTs ||
                    (this.CreationTs != null &&
                    this.CreationTs.Equals(input.CreationTs))
                ) && 
                (
                    this.TeamworkRoles == input.TeamworkRoles ||
                    this.TeamworkRoles != null &&
                    input.TeamworkRoles != null &&
                    this.TeamworkRoles.SequenceEqual(input.TeamworkRoles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.ShortName != null)
                    hashCode = hashCode * 59 + this.ShortName.GetHashCode();
                if (this.Administrator != null)
                    hashCode = hashCode * 59 + this.Administrator.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.ChangePassword != null)
                    hashCode = hashCode * 59 + this.ChangePassword.GetHashCode();
                if (this.Profiles != null)
                    hashCode = hashCode * 59 + this.Profiles.GetHashCode();
                if (this.Licenses != null)
                    hashCode = hashCode * 59 + this.Licenses.GetHashCode();
                if (this.BuyMissingLicenses != null)
                    hashCode = hashCode * 59 + this.BuyMissingLicenses.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SpecialRights != null)
                    hashCode = hashCode * 59 + this.SpecialRights.GetHashCode();
                if (this.CreationTs != null)
                    hashCode = hashCode * 59 + this.CreationTs.GetHashCode();
                if (this.TeamworkRoles != null)
                    hashCode = hashCode * 59 + this.TeamworkRoles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
