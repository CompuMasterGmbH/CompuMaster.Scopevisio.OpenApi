/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CompuMaster.Scopevisio.OpenApi.Client.OpenAPIDateConverter;

namespace CompuMaster.Scopevisio.OpenApi.Model
{
    /// <summary>
    /// To set an employer to a personal contact an employerId (id of a Scopevisio oganisation contact) or legacyNumber (ID Vorsystem) of a Scopevisio organisation contact must be provided. If both are provided the id is used to find the contact. If no contact with the given employerId is found the legacyNumber is used. 
    /// </summary>
    [DataContract]
    public partial class Employer :  IEquatable<Employer>, IValidatableObject
    {
        /// <summary>
        /// Employer type
        /// </summary>
        /// <value>Employer type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CompanyTypeEnum
        {
            /// <summary>
            /// Enum Hauptarbeitgeber for value: Hauptarbeitgeber
            /// </summary>
            [EnumMember(Value = "Hauptarbeitgeber")]
            Hauptarbeitgeber = 1,

            /// <summary>
            /// Enum Arbeitgeber for value: Arbeitgeber
            /// </summary>
            [EnumMember(Value = "Arbeitgeber")]
            Arbeitgeber = 2,

            /// <summary>
            /// Enum Auftraggeber for value: Auftraggeber
            /// </summary>
            [EnumMember(Value = "Auftraggeber")]
            Auftraggeber = 3,

            /// <summary>
            /// Enum EhemaligerAG for value: Ehemaliger AG
            /// </summary>
            [EnumMember(Value = "Ehemaliger AG")]
            EhemaligerAG = 4

        }

        /// <summary>
        /// Employer type
        /// </summary>
        /// <value>Employer type</value>
        [DataMember(Name="companyType", EmitDefaultValue=false)]
        public CompanyTypeEnum? CompanyType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Employer" /> class.
        /// </summary>
        /// <param name="employerId">id of a Scopevisio oganisation contact. Either employerId or legacyNumber must be provided..</param>
        /// <param name="legacyNumber">legacyNumber (ID Vorsystem) of a Scopevisio oganisation contact. Either employerId or legacyNumber must be provided..</param>
        /// <param name="companyType">Employer type.</param>
        /// <param name="companyDocumentVisibility">Employee documents are visible in the employer contact if set to true (default to false).</param>
        /// <param name="companyCommentVisibility">Employee comments are visible in the employer contact if set to true (default to false).</param>
        /// <param name="companyTaskVisibility">Employee tasks are visible in the employer contact if set to true (default to false).</param>
        /// <param name="companyInfoVisibility">Employee properties (Allgemeine Informationen) are visible in the employer contact if set to true (default to false).</param>
        /// <param name="validFrom">Employee from.</param>
        /// <param name="validTo">Employee to.</param>
        public Employer(long employerId = default(long), string legacyNumber = default(string), CompanyTypeEnum? companyType = default(CompanyTypeEnum?), bool companyDocumentVisibility = false, bool companyCommentVisibility = false, bool companyTaskVisibility = false, bool companyInfoVisibility = false, long validFrom = default(long), long validTo = default(long))
        {
            this.EmployerId = employerId;
            this.LegacyNumber = legacyNumber;
            this.CompanyType = companyType;
            // use default value if no "companyDocumentVisibility" provided
            if (companyDocumentVisibility == null)
            {
                this.CompanyDocumentVisibility = false;
            }
            else
            {
                this.CompanyDocumentVisibility = companyDocumentVisibility;
            }
            // use default value if no "companyCommentVisibility" provided
            if (companyCommentVisibility == null)
            {
                this.CompanyCommentVisibility = false;
            }
            else
            {
                this.CompanyCommentVisibility = companyCommentVisibility;
            }
            // use default value if no "companyTaskVisibility" provided
            if (companyTaskVisibility == null)
            {
                this.CompanyTaskVisibility = false;
            }
            else
            {
                this.CompanyTaskVisibility = companyTaskVisibility;
            }
            // use default value if no "companyInfoVisibility" provided
            if (companyInfoVisibility == null)
            {
                this.CompanyInfoVisibility = false;
            }
            else
            {
                this.CompanyInfoVisibility = companyInfoVisibility;
            }
            this.ValidFrom = validFrom;
            this.ValidTo = validTo;
        }
        
        /// <summary>
        /// id of a Scopevisio oganisation contact. Either employerId or legacyNumber must be provided.
        /// </summary>
        /// <value>id of a Scopevisio oganisation contact. Either employerId or legacyNumber must be provided.</value>
        [DataMember(Name="employerId", EmitDefaultValue=false)]
        public long EmployerId { get; set; }

        /// <summary>
        /// legacyNumber (ID Vorsystem) of a Scopevisio oganisation contact. Either employerId or legacyNumber must be provided.
        /// </summary>
        /// <value>legacyNumber (ID Vorsystem) of a Scopevisio oganisation contact. Either employerId or legacyNumber must be provided.</value>
        [DataMember(Name="legacyNumber", EmitDefaultValue=false)]
        public string LegacyNumber { get; set; }


        /// <summary>
        /// Employee documents are visible in the employer contact if set to true
        /// </summary>
        /// <value>Employee documents are visible in the employer contact if set to true</value>
        [DataMember(Name="companyDocumentVisibility", EmitDefaultValue=false)]
        public bool CompanyDocumentVisibility { get; set; }

        /// <summary>
        /// Employee comments are visible in the employer contact if set to true
        /// </summary>
        /// <value>Employee comments are visible in the employer contact if set to true</value>
        [DataMember(Name="companyCommentVisibility", EmitDefaultValue=false)]
        public bool CompanyCommentVisibility { get; set; }

        /// <summary>
        /// Employee tasks are visible in the employer contact if set to true
        /// </summary>
        /// <value>Employee tasks are visible in the employer contact if set to true</value>
        [DataMember(Name="companyTaskVisibility", EmitDefaultValue=false)]
        public bool CompanyTaskVisibility { get; set; }

        /// <summary>
        /// Employee properties (Allgemeine Informationen) are visible in the employer contact if set to true
        /// </summary>
        /// <value>Employee properties (Allgemeine Informationen) are visible in the employer contact if set to true</value>
        [DataMember(Name="companyInfoVisibility", EmitDefaultValue=false)]
        public bool CompanyInfoVisibility { get; set; }

        /// <summary>
        /// Employee from
        /// </summary>
        /// <value>Employee from</value>
        [DataMember(Name="validFrom", EmitDefaultValue=false)]
        public long ValidFrom { get; set; }

        /// <summary>
        /// Employee to
        /// </summary>
        /// <value>Employee to</value>
        [DataMember(Name="validTo", EmitDefaultValue=false)]
        public long ValidTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Employer {\n");
            sb.Append("  EmployerId: ").Append(EmployerId).Append("\n");
            sb.Append("  LegacyNumber: ").Append(LegacyNumber).Append("\n");
            sb.Append("  CompanyType: ").Append(CompanyType).Append("\n");
            sb.Append("  CompanyDocumentVisibility: ").Append(CompanyDocumentVisibility).Append("\n");
            sb.Append("  CompanyCommentVisibility: ").Append(CompanyCommentVisibility).Append("\n");
            sb.Append("  CompanyTaskVisibility: ").Append(CompanyTaskVisibility).Append("\n");
            sb.Append("  CompanyInfoVisibility: ").Append(CompanyInfoVisibility).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ValidTo: ").Append(ValidTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Employer);
        }

        /// <summary>
        /// Returns true if Employer instances are equal
        /// </summary>
        /// <param name="input">Instance of Employer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Employer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmployerId == input.EmployerId ||
                    (this.EmployerId != null &&
                    this.EmployerId.Equals(input.EmployerId))
                ) && 
                (
                    this.LegacyNumber == input.LegacyNumber ||
                    (this.LegacyNumber != null &&
                    this.LegacyNumber.Equals(input.LegacyNumber))
                ) && 
                (
                    this.CompanyType == input.CompanyType ||
                    (this.CompanyType != null &&
                    this.CompanyType.Equals(input.CompanyType))
                ) && 
                (
                    this.CompanyDocumentVisibility == input.CompanyDocumentVisibility ||
                    (this.CompanyDocumentVisibility != null &&
                    this.CompanyDocumentVisibility.Equals(input.CompanyDocumentVisibility))
                ) && 
                (
                    this.CompanyCommentVisibility == input.CompanyCommentVisibility ||
                    (this.CompanyCommentVisibility != null &&
                    this.CompanyCommentVisibility.Equals(input.CompanyCommentVisibility))
                ) && 
                (
                    this.CompanyTaskVisibility == input.CompanyTaskVisibility ||
                    (this.CompanyTaskVisibility != null &&
                    this.CompanyTaskVisibility.Equals(input.CompanyTaskVisibility))
                ) && 
                (
                    this.CompanyInfoVisibility == input.CompanyInfoVisibility ||
                    (this.CompanyInfoVisibility != null &&
                    this.CompanyInfoVisibility.Equals(input.CompanyInfoVisibility))
                ) && 
                (
                    this.ValidFrom == input.ValidFrom ||
                    (this.ValidFrom != null &&
                    this.ValidFrom.Equals(input.ValidFrom))
                ) && 
                (
                    this.ValidTo == input.ValidTo ||
                    (this.ValidTo != null &&
                    this.ValidTo.Equals(input.ValidTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmployerId != null)
                    hashCode = hashCode * 59 + this.EmployerId.GetHashCode();
                if (this.LegacyNumber != null)
                    hashCode = hashCode * 59 + this.LegacyNumber.GetHashCode();
                if (this.CompanyType != null)
                    hashCode = hashCode * 59 + this.CompanyType.GetHashCode();
                if (this.CompanyDocumentVisibility != null)
                    hashCode = hashCode * 59 + this.CompanyDocumentVisibility.GetHashCode();
                if (this.CompanyCommentVisibility != null)
                    hashCode = hashCode * 59 + this.CompanyCommentVisibility.GetHashCode();
                if (this.CompanyTaskVisibility != null)
                    hashCode = hashCode * 59 + this.CompanyTaskVisibility.GetHashCode();
                if (this.CompanyInfoVisibility != null)
                    hashCode = hashCode * 59 + this.CompanyInfoVisibility.GetHashCode();
                if (this.ValidFrom != null)
                    hashCode = hashCode * 59 + this.ValidFrom.GetHashCode();
                if (this.ValidTo != null)
                    hashCode = hashCode * 59 + this.ValidTo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
