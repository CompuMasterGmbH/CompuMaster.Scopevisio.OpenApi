/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing ContactApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ContactApiTests
    {
        private ContactApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ContactApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ContactApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ContactApi
            //Assert.IsInstanceOf(typeof(ContactApi), instance);
        }

        
        /// <summary>
        /// Test AddContactFile
        /// </summary>
        [Test]
        public void AddContactFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contactIdOrLegacyNumber = null;
            //TeamworkFileForm body = null;
            //instance.AddContactFile(contactIdOrLegacyNumber, body);
            
        }
        
        /// <summary>
        /// Test AssignMailContact
        /// </summary>
        [Test]
        public void AssignMailContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contactIdOrLegacyNumber = null;
            //AssignMailForm body = null;
            //instance.AssignMailContact(contactIdOrLegacyNumber, body);
            
        }
        
        /// <summary>
        /// Test CreateContact
        /// </summary>
        [Test]
        public void CreateContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //KontaktForm body = null;
            //instance.CreateContact(body);
            
        }
        
        /// <summary>
        /// Test CreateContactComment
        /// </summary>
        [Test]
        public void CreateContactCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long contactId = null;
            //BlogEntryForm body = null;
            //instance.CreateContactComment(contactId, body);
            
        }
        
        /// <summary>
        /// Test CreateProperty
        /// </summary>
        [Test]
        public void CreatePropertyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contactIdOrLegacyNumber = null;
            //ContactPropertyForm body = null;
            //instance.CreateProperty(contactIdOrLegacyNumber, body);
            
        }
        
        /// <summary>
        /// Test DeleteContactById
        /// </summary>
        [Test]
        public void DeleteContactByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contactIdOrLegacyNumber = null;
            //instance.DeleteContactById(contactIdOrLegacyNumber);
            
        }
        
        /// <summary>
        /// Test GetBlogEntriesByContactId
        /// </summary>
        [Test]
        public void GetBlogEntriesByContactIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contactIdOrLegacyNumber = null;
            //string fields = null;
            //instance.GetBlogEntriesByContactId(contactIdOrLegacyNumber, fields);
            
        }
        
        /// <summary>
        /// Test GetContactById
        /// </summary>
        [Test]
        public void GetContactByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //string fields = null;
            //instance.GetContactById(id, fields);
            
        }
        
        /// <summary>
        /// Test GetContactByKeyIdentifierId
        /// </summary>
        [Test]
        public void GetContactByKeyIdentifierIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string keyIdentifier = null;
            //string id = null;
            //string fields = null;
            //instance.GetContactByKeyIdentifierId(keyIdentifier, id, fields);
            
        }
        
        /// <summary>
        /// Test GetContactEmployees
        /// </summary>
        [Test]
        public void GetContactEmployeesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //string fields = null;
            //instance.GetContactEmployees(id, fields);
            
        }
        
        /// <summary>
        /// Test GetContactEmployers
        /// </summary>
        [Test]
        public void GetContactEmployersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //string fields = null;
            //instance.GetContactEmployers(id, fields);
            
        }
        
        /// <summary>
        /// Test GetContactProperties
        /// </summary>
        [Test]
        public void GetContactPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //string fields = null;
            //instance.GetContactProperties(id, fields);
            
        }
        
        /// <summary>
        /// Test GetContacts
        /// </summary>
        [Test]
        public void GetContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string body = null;
            //instance.GetContacts(body);
            
        }
        
        /// <summary>
        /// Test GetImage
        /// </summary>
        [Test]
        public void GetImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //instance.GetImage(id);
            
        }
        
        /// <summary>
        /// Test GetProperty
        /// </summary>
        [Test]
        public void GetPropertyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long propertyId = null;
            //string fields = null;
            //instance.GetProperty(propertyId, fields);
            
        }
        
        /// <summary>
        /// Test UpdateContactById
        /// </summary>
        [Test]
        public void UpdateContactByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //KontaktForm body = null;
            //instance.UpdateContactById(id, body);
            
        }
        
        /// <summary>
        /// Test UpdateProperty
        /// </summary>
        [Test]
        public void UpdatePropertyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long propertyId = null;
            //ContactPropertyForm body = null;
            //instance.UpdateProperty(propertyId, body);
            
        }
        
    }

}
