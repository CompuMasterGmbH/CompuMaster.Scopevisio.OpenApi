/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NumberRangeType
    /// </summary>
    [DataContract]
    public partial class NumberRangeType :  IEquatable<NumberRangeType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NumberRangeType" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="number">number.</param>
        /// <param name="name">name.</param>
        /// <param name="format">format.</param>
        /// <param name="alphanumeric">alphanumeric (default to false).</param>
        /// <param name="automatic">automatic (default to false).</param>
        /// <param name="interval">interval.</param>
        /// <param name="startNumber">startNumber.</param>
        /// <param name="endNumber">endNumber.</param>
        /// <param name="currentVal">currentVal.</param>
        public NumberRangeType(long id = default(long), long number = default(long), string name = default(string), string format = default(string), bool alphanumeric = false, bool automatic = false, long interval = default(long), long startNumber = default(long), long endNumber = default(long), long currentVal = default(long))
        {
            this.Id = id;
            this.Number = number;
            this.Name = name;
            this.Format = format;
            // use default value if no "alphanumeric" provided
            if (alphanumeric == null)
            {
                this.Alphanumeric = false;
            }
            else
            {
                this.Alphanumeric = alphanumeric;
            }
            // use default value if no "automatic" provided
            if (automatic == null)
            {
                this.Automatic = false;
            }
            else
            {
                this.Automatic = automatic;
            }
            this.Interval = interval;
            this.StartNumber = startNumber;
            this.EndNumber = endNumber;
            this.CurrentVal = currentVal;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public long Number { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }

        /// <summary>
        /// Gets or Sets Alphanumeric
        /// </summary>
        [DataMember(Name="alphanumeric", EmitDefaultValue=false)]
        public bool Alphanumeric { get; set; }

        /// <summary>
        /// Gets or Sets Automatic
        /// </summary>
        [DataMember(Name="automatic", EmitDefaultValue=false)]
        public bool Automatic { get; set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [DataMember(Name="interval", EmitDefaultValue=false)]
        public long Interval { get; set; }

        /// <summary>
        /// Gets or Sets StartNumber
        /// </summary>
        [DataMember(Name="startNumber", EmitDefaultValue=false)]
        public long StartNumber { get; set; }

        /// <summary>
        /// Gets or Sets EndNumber
        /// </summary>
        [DataMember(Name="endNumber", EmitDefaultValue=false)]
        public long EndNumber { get; set; }

        /// <summary>
        /// Gets or Sets CurrentVal
        /// </summary>
        [DataMember(Name="currentVal", EmitDefaultValue=false)]
        public long CurrentVal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NumberRangeType {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Alphanumeric: ").Append(Alphanumeric).Append("\n");
            sb.Append("  Automatic: ").Append(Automatic).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  StartNumber: ").Append(StartNumber).Append("\n");
            sb.Append("  EndNumber: ").Append(EndNumber).Append("\n");
            sb.Append("  CurrentVal: ").Append(CurrentVal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NumberRangeType);
        }

        /// <summary>
        /// Returns true if NumberRangeType instances are equal
        /// </summary>
        /// <param name="input">Instance of NumberRangeType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NumberRangeType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Alphanumeric == input.Alphanumeric ||
                    (this.Alphanumeric != null &&
                    this.Alphanumeric.Equals(input.Alphanumeric))
                ) && 
                (
                    this.Automatic == input.Automatic ||
                    (this.Automatic != null &&
                    this.Automatic.Equals(input.Automatic))
                ) && 
                (
                    this.Interval == input.Interval ||
                    (this.Interval != null &&
                    this.Interval.Equals(input.Interval))
                ) && 
                (
                    this.StartNumber == input.StartNumber ||
                    (this.StartNumber != null &&
                    this.StartNumber.Equals(input.StartNumber))
                ) && 
                (
                    this.EndNumber == input.EndNumber ||
                    (this.EndNumber != null &&
                    this.EndNumber.Equals(input.EndNumber))
                ) && 
                (
                    this.CurrentVal == input.CurrentVal ||
                    (this.CurrentVal != null &&
                    this.CurrentVal.Equals(input.CurrentVal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Alphanumeric != null)
                    hashCode = hashCode * 59 + this.Alphanumeric.GetHashCode();
                if (this.Automatic != null)
                    hashCode = hashCode * 59 + this.Automatic.GetHashCode();
                if (this.Interval != null)
                    hashCode = hashCode * 59 + this.Interval.GetHashCode();
                if (this.StartNumber != null)
                    hashCode = hashCode * 59 + this.StartNumber.GetHashCode();
                if (this.EndNumber != null)
                    hashCode = hashCode * 59 + this.EndNumber.GetHashCode();
                if (this.CurrentVal != null)
                    hashCode = hashCode * 59 + this.CurrentVal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
