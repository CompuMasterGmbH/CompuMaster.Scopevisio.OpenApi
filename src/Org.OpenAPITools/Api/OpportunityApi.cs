/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOpportunityApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Convert opportunity to dispatch
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to an dispatch.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns></returns>
        void ConvertOpportunityToDispatch (string number);

        /// <summary>
        /// Convert opportunity to dispatch
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to an dispatch.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConvertOpportunityToDispatchWithHttpInfo (string number);
        /// <summary>
        /// Convert opportunity to offer
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to an offer.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns></returns>
        void ConvertOpportunityToOffer (string number);

        /// <summary>
        /// Convert opportunity to offer
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to an offer.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConvertOpportunityToOfferWithHttpInfo (string number);
        /// <summary>
        /// Convert opportunity to order
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to an order.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns></returns>
        void ConvertOpportunityToOrder (string number);

        /// <summary>
        /// Convert opportunity to order
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to an order.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConvertOpportunityToOrderWithHttpInfo (string number);
        /// <summary>
        /// Convert opportunity to outgoing invoice
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to an outgoing invoice.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns></returns>
        void ConvertOpportunityToOutgoingInvoice (string number);

        /// <summary>
        /// Convert opportunity to outgoing invoice
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to an outgoing invoice.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConvertOpportunityToOutgoingInvoiceWithHttpInfo (string number);
        /// <summary>
        /// Convert opportunity to recurring invoice
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to a recurring invoice.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ConvertOpportunityToRecurringInvoice (string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm));

        /// <summary>
        /// Convert opportunity to recurring invoice
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to a recurring invoice.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConvertOpportunityToRecurringInvoiceWithHttpInfo (string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm));
        /// <summary>
        /// Opportunities
        /// </summary>
        /// <remarks>
        /// Returns all Scopevisio opportunites.  Required profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns></returns>
        void GetOpportunities (string body = default(string));

        /// <summary>
        /// Opportunities
        /// </summary>
        /// <remarks>
        /// Returns all Scopevisio opportunites.  Required profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOpportunitiesWithHttpInfo (string body = default(string));
        /// <summary>
        /// get opportunity with number (interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the Scopevisio sales potential with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio outgoing invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns></returns>
        void GetOpportunity (string number, string fields = default(string));

        /// <summary>
        /// get opportunity with number (interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the Scopevisio sales potential with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio outgoing invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOpportunityWithHttpInfo (string number, string fields = default(string));
        /// <summary>
        /// get opportunity positions for the given number (interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the positions for the opportunity with the given number (interne Nummer).  Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio potential</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns></returns>
        void GetOpportunityPositions (string number, string fields = default(string));

        /// <summary>
        /// get opportunity positions for the given number (interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the positions for the opportunity with the given number (interne Nummer).  Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio potential</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOpportunityPositionsWithHttpInfo (string number, string fields = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Convert opportunity to dispatch
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to an dispatch.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConvertOpportunityToDispatchAsync (string number);

        /// <summary>
        /// Convert opportunity to dispatch
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to an dispatch.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConvertOpportunityToDispatchAsyncWithHttpInfo (string number);
        /// <summary>
        /// Convert opportunity to offer
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to an offer.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConvertOpportunityToOfferAsync (string number);

        /// <summary>
        /// Convert opportunity to offer
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to an offer.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConvertOpportunityToOfferAsyncWithHttpInfo (string number);
        /// <summary>
        /// Convert opportunity to order
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to an order.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConvertOpportunityToOrderAsync (string number);

        /// <summary>
        /// Convert opportunity to order
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to an order.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConvertOpportunityToOrderAsyncWithHttpInfo (string number);
        /// <summary>
        /// Convert opportunity to outgoing invoice
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to an outgoing invoice.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConvertOpportunityToOutgoingInvoiceAsync (string number);

        /// <summary>
        /// Convert opportunity to outgoing invoice
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to an outgoing invoice.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConvertOpportunityToOutgoingInvoiceAsyncWithHttpInfo (string number);
        /// <summary>
        /// Convert opportunity to recurring invoice
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to a recurring invoice.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConvertOpportunityToRecurringInvoiceAsync (string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm));

        /// <summary>
        /// Convert opportunity to recurring invoice
        /// </summary>
        /// <remarks>
        /// Convert the Scopevisio opportunity with the given number (interne Nummer) to a recurring invoice.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConvertOpportunityToRecurringInvoiceAsyncWithHttpInfo (string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm));
        /// <summary>
        /// Opportunities
        /// </summary>
        /// <remarks>
        /// Returns all Scopevisio opportunites.  Required profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetOpportunitiesAsync (string body = default(string));

        /// <summary>
        /// Opportunities
        /// </summary>
        /// <remarks>
        /// Returns all Scopevisio opportunites.  Required profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetOpportunitiesAsyncWithHttpInfo (string body = default(string));
        /// <summary>
        /// get opportunity with number (interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the Scopevisio sales potential with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio outgoing invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetOpportunityAsync (string number, string fields = default(string));

        /// <summary>
        /// get opportunity with number (interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the Scopevisio sales potential with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio outgoing invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetOpportunityAsyncWithHttpInfo (string number, string fields = default(string));
        /// <summary>
        /// get opportunity positions for the given number (interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the positions for the opportunity with the given number (interne Nummer).  Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio potential</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetOpportunityPositionsAsync (string number, string fields = default(string));

        /// <summary>
        /// get opportunity positions for the given number (interne Nummer)
        /// </summary>
        /// <remarks>
        /// Returns the positions for the opportunity with the given number (interne Nummer).  Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio potential</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetOpportunityPositionsAsyncWithHttpInfo (string number, string fields = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OpportunityApi : IOpportunityApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OpportunityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OpportunityApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OpportunityApi"/> class
        /// </summary>
        /// <returns></returns>
        public OpportunityApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OpportunityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OpportunityApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Convert opportunity to dispatch Convert the Scopevisio opportunity with the given number (interne Nummer) to an dispatch.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns></returns>
        public void ConvertOpportunityToDispatch (string number)
        {
             ConvertOpportunityToDispatchWithHttpInfo(number);
        }

        /// <summary>
        /// Convert opportunity to dispatch Convert the Scopevisio opportunity with the given number (interne Nummer) to an dispatch.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConvertOpportunityToDispatchWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling OpportunityApi->ConvertOpportunityToDispatch");

            var localVarPath = "/opportunity/{number}/convertToDispatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertOpportunityToDispatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert opportunity to dispatch Convert the Scopevisio opportunity with the given number (interne Nummer) to an dispatch.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConvertOpportunityToDispatchAsync (string number)
        {
             await ConvertOpportunityToDispatchAsyncWithHttpInfo(number);

        }

        /// <summary>
        /// Convert opportunity to dispatch Convert the Scopevisio opportunity with the given number (interne Nummer) to an dispatch.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConvertOpportunityToDispatchAsyncWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling OpportunityApi->ConvertOpportunityToDispatch");

            var localVarPath = "/opportunity/{number}/convertToDispatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertOpportunityToDispatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert opportunity to offer Convert the Scopevisio opportunity with the given number (interne Nummer) to an offer.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns></returns>
        public void ConvertOpportunityToOffer (string number)
        {
             ConvertOpportunityToOfferWithHttpInfo(number);
        }

        /// <summary>
        /// Convert opportunity to offer Convert the Scopevisio opportunity with the given number (interne Nummer) to an offer.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConvertOpportunityToOfferWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling OpportunityApi->ConvertOpportunityToOffer");

            var localVarPath = "/opportunity/{number}/convertToOffer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertOpportunityToOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert opportunity to offer Convert the Scopevisio opportunity with the given number (interne Nummer) to an offer.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConvertOpportunityToOfferAsync (string number)
        {
             await ConvertOpportunityToOfferAsyncWithHttpInfo(number);

        }

        /// <summary>
        /// Convert opportunity to offer Convert the Scopevisio opportunity with the given number (interne Nummer) to an offer.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConvertOpportunityToOfferAsyncWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling OpportunityApi->ConvertOpportunityToOffer");

            var localVarPath = "/opportunity/{number}/convertToOffer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertOpportunityToOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert opportunity to order Convert the Scopevisio opportunity with the given number (interne Nummer) to an order.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns></returns>
        public void ConvertOpportunityToOrder (string number)
        {
             ConvertOpportunityToOrderWithHttpInfo(number);
        }

        /// <summary>
        /// Convert opportunity to order Convert the Scopevisio opportunity with the given number (interne Nummer) to an order.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConvertOpportunityToOrderWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling OpportunityApi->ConvertOpportunityToOrder");

            var localVarPath = "/opportunity/{number}/convertToOrder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertOpportunityToOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert opportunity to order Convert the Scopevisio opportunity with the given number (interne Nummer) to an order.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConvertOpportunityToOrderAsync (string number)
        {
             await ConvertOpportunityToOrderAsyncWithHttpInfo(number);

        }

        /// <summary>
        /// Convert opportunity to order Convert the Scopevisio opportunity with the given number (interne Nummer) to an order.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConvertOpportunityToOrderAsyncWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling OpportunityApi->ConvertOpportunityToOrder");

            var localVarPath = "/opportunity/{number}/convertToOrder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertOpportunityToOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert opportunity to outgoing invoice Convert the Scopevisio opportunity with the given number (interne Nummer) to an outgoing invoice.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns></returns>
        public void ConvertOpportunityToOutgoingInvoice (string number)
        {
             ConvertOpportunityToOutgoingInvoiceWithHttpInfo(number);
        }

        /// <summary>
        /// Convert opportunity to outgoing invoice Convert the Scopevisio opportunity with the given number (interne Nummer) to an outgoing invoice.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConvertOpportunityToOutgoingInvoiceWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling OpportunityApi->ConvertOpportunityToOutgoingInvoice");

            var localVarPath = "/opportunity/{number}/convertToOutgoingInvoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertOpportunityToOutgoingInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert opportunity to outgoing invoice Convert the Scopevisio opportunity with the given number (interne Nummer) to an outgoing invoice.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConvertOpportunityToOutgoingInvoiceAsync (string number)
        {
             await ConvertOpportunityToOutgoingInvoiceAsyncWithHttpInfo(number);

        }

        /// <summary>
        /// Convert opportunity to outgoing invoice Convert the Scopevisio opportunity with the given number (interne Nummer) to an outgoing invoice.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConvertOpportunityToOutgoingInvoiceAsyncWithHttpInfo (string number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling OpportunityApi->ConvertOpportunityToOutgoingInvoice");

            var localVarPath = "/opportunity/{number}/convertToOutgoingInvoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertOpportunityToOutgoingInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert opportunity to recurring invoice Convert the Scopevisio opportunity with the given number (interne Nummer) to a recurring invoice.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ConvertOpportunityToRecurringInvoice (string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm))
        {
             ConvertOpportunityToRecurringInvoiceWithHttpInfo(number, body);
        }

        /// <summary>
        /// Convert opportunity to recurring invoice Convert the Scopevisio opportunity with the given number (interne Nummer) to a recurring invoice.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConvertOpportunityToRecurringInvoiceWithHttpInfo (string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm))
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling OpportunityApi->ConvertOpportunityToRecurringInvoice");

            var localVarPath = "/opportunity/{number}/convertToRecurringInvoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertOpportunityToRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert opportunity to recurring invoice Convert the Scopevisio opportunity with the given number (interne Nummer) to a recurring invoice.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConvertOpportunityToRecurringInvoiceAsync (string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm))
        {
             await ConvertOpportunityToRecurringInvoiceAsyncWithHttpInfo(number, body);

        }

        /// <summary>
        /// Convert opportunity to recurring invoice Convert the Scopevisio opportunity with the given number (interne Nummer) to a recurring invoice.  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Bearbeiten)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio opportunity</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConvertOpportunityToRecurringInvoiceAsyncWithHttpInfo (string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm))
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling OpportunityApi->ConvertOpportunityToRecurringInvoice");

            var localVarPath = "/opportunity/{number}/convertToRecurringInvoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertOpportunityToRecurringInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Opportunities Returns all Scopevisio opportunites.  Required profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns></returns>
        public void GetOpportunities (string body = default(string))
        {
             GetOpportunitiesWithHttpInfo(body);
        }

        /// <summary>
        /// Opportunities Returns all Scopevisio opportunites.  Required profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetOpportunitiesWithHttpInfo (string body = default(string))
        {

            var localVarPath = "/opportunities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpportunities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Opportunities Returns all Scopevisio opportunites.  Required profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetOpportunitiesAsync (string body = default(string))
        {
             await GetOpportunitiesAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Opportunities Returns all Scopevisio opportunites.  Required profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">search filter in JSON format. See also &lt;a href&#x3D;&#39;../browser/index.html#!/searchscope&#39;&gt;our search documentation&lt;/a&gt;. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetOpportunitiesAsyncWithHttpInfo (string body = default(string))
        {

            var localVarPath = "/opportunities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpportunities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// get opportunity with number (interne Nummer) Returns the Scopevisio sales potential with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio outgoing invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns></returns>
        public void GetOpportunity (string number, string fields = default(string))
        {
             GetOpportunityWithHttpInfo(number, fields);
        }

        /// <summary>
        /// get opportunity with number (interne Nummer) Returns the Scopevisio sales potential with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio outgoing invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetOpportunityWithHttpInfo (string number, string fields = default(string))
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling OpportunityApi->GetOpportunity");

            var localVarPath = "/opportunity/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpportunity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// get opportunity with number (interne Nummer) Returns the Scopevisio sales potential with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio outgoing invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetOpportunityAsync (string number, string fields = default(string))
        {
             await GetOpportunityAsyncWithHttpInfo(number, fields);

        }

        /// <summary>
        /// get opportunity with number (interne Nummer) Returns the Scopevisio sales potential with the given number (interne Nummer).  Required profile(s): &lt;i&gt;Rechnungen, Potenziale (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio outgoing invoice</param>
        /// <param name="fields">comma separated list of fields to show in response  id, documentNumber (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetOpportunityAsyncWithHttpInfo (string number, string fields = default(string))
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling OpportunityApi->GetOpportunity");

            var localVarPath = "/opportunity/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpportunity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// get opportunity positions for the given number (interne Nummer) Returns the positions for the opportunity with the given number (interne Nummer).  Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio potential</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns></returns>
        public void GetOpportunityPositions (string number, string fields = default(string))
        {
             GetOpportunityPositionsWithHttpInfo(number, fields);
        }

        /// <summary>
        /// get opportunity positions for the given number (interne Nummer) Returns the positions for the opportunity with the given number (interne Nummer).  Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio potential</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetOpportunityPositionsWithHttpInfo (string number, string fields = default(string))
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling OpportunityApi->GetOpportunityPositions");

            var localVarPath = "/opportunity/{number}/positions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpportunityPositions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// get opportunity positions for the given number (interne Nummer) Returns the positions for the opportunity with the given number (interne Nummer).  Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio potential</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetOpportunityPositionsAsync (string number, string fields = default(string))
        {
             await GetOpportunityPositionsAsyncWithHttpInfo(number, fields);

        }

        /// <summary>
        /// get opportunity positions for the given number (interne Nummer) Returns the positions for the opportunity with the given number (interne Nummer).  Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)&lt;/i&gt;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">number (interne Nummer) of a Scopevisio potential</param>
        /// <param name="fields">comma separated list of fields to show in response  id,name (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetOpportunityPositionsAsyncWithHttpInfo (string number, string fields = default(string))
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling OpportunityApi->GetOpportunityPositions");

            var localVarPath = "/opportunity/{number}/positions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (number != null) localVarPathParams.Add("number", this.Configuration.ApiClient.ParameterToString(number)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpportunityPositions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
