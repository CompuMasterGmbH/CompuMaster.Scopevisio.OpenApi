/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CompuMaster.Scopevisio.OpenApi.Client.OpenAPIDateConverter;

namespace CompuMaster.Scopevisio.OpenApi.Model
{
    /// <summary>
    /// OutgoingInvoiceImportForm
    /// </summary>
    [DataContract]
    public partial class OutgoingInvoiceImportForm :  IEquatable<OutgoingInvoiceImportForm>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutgoingInvoiceImportForm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OutgoingInvoiceImportForm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutgoingInvoiceImportForm" /> class.
        /// </summary>
        /// <param name="generateDocumentNumbers">generateDocumentNumbers (default to false).</param>
        /// <param name="doPost">doPost (default to false).</param>
        /// <param name="skipDuplicates">skipDuplicates (default to false).</param>
        /// <param name="createPdf">createPdf (default to false).</param>
        /// <param name="template">template.</param>
        /// <param name="copyProductToPosition">copyProductToPosition (default to false).</param>
        /// <param name="copyProductToPositionOverwriteMode">copyProductToPositionOverwriteMode (default to false).</param>
        /// <param name="copyImpersonalAccountFieldsToPosition">copyImpersonalAccountFieldsToPosition (default to false).</param>
        /// <param name="data">XML import document (required).</param>
        public OutgoingInvoiceImportForm(bool generateDocumentNumbers = false, bool doPost = false, bool skipDuplicates = false, bool createPdf = false, string template = default(string), bool copyProductToPosition = false, bool copyProductToPositionOverwriteMode = false, bool copyImpersonalAccountFieldsToPosition = false, string data = default(string))
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for OutgoingInvoiceImportForm and cannot be null");
            }
            else
            {
                this.Data = data;
            }
            
            // use default value if no "generateDocumentNumbers" provided
            if (generateDocumentNumbers == null)
            {
                this.GenerateDocumentNumbers = false;
            }
            else
            {
                this.GenerateDocumentNumbers = generateDocumentNumbers;
            }
            // use default value if no "doPost" provided
            if (doPost == null)
            {
                this.DoPost = false;
            }
            else
            {
                this.DoPost = doPost;
            }
            // use default value if no "skipDuplicates" provided
            if (skipDuplicates == null)
            {
                this.SkipDuplicates = false;
            }
            else
            {
                this.SkipDuplicates = skipDuplicates;
            }
            // use default value if no "createPdf" provided
            if (createPdf == null)
            {
                this.CreatePdf = false;
            }
            else
            {
                this.CreatePdf = createPdf;
            }
            this.Template = template;
            // use default value if no "copyProductToPosition" provided
            if (copyProductToPosition == null)
            {
                this.CopyProductToPosition = false;
            }
            else
            {
                this.CopyProductToPosition = copyProductToPosition;
            }
            // use default value if no "copyProductToPositionOverwriteMode" provided
            if (copyProductToPositionOverwriteMode == null)
            {
                this.CopyProductToPositionOverwriteMode = false;
            }
            else
            {
                this.CopyProductToPositionOverwriteMode = copyProductToPositionOverwriteMode;
            }
            // use default value if no "copyImpersonalAccountFieldsToPosition" provided
            if (copyImpersonalAccountFieldsToPosition == null)
            {
                this.CopyImpersonalAccountFieldsToPosition = false;
            }
            else
            {
                this.CopyImpersonalAccountFieldsToPosition = copyImpersonalAccountFieldsToPosition;
            }
        }
        
        /// <summary>
        /// Gets or Sets GenerateDocumentNumbers
        /// </summary>
        [DataMember(Name="generateDocumentNumbers", EmitDefaultValue=false)]
        public bool GenerateDocumentNumbers { get; set; }

        /// <summary>
        /// Gets or Sets DoPost
        /// </summary>
        [DataMember(Name="doPost", EmitDefaultValue=false)]
        public bool DoPost { get; set; }

        /// <summary>
        /// Gets or Sets SkipDuplicates
        /// </summary>
        [DataMember(Name="skipDuplicates", EmitDefaultValue=false)]
        public bool SkipDuplicates { get; set; }

        /// <summary>
        /// Gets or Sets CreatePdf
        /// </summary>
        [DataMember(Name="createPdf", EmitDefaultValue=false)]
        public bool CreatePdf { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public string Template { get; set; }

        /// <summary>
        /// Gets or Sets CopyProductToPosition
        /// </summary>
        [DataMember(Name="copyProductToPosition", EmitDefaultValue=false)]
        public bool CopyProductToPosition { get; set; }

        /// <summary>
        /// Gets or Sets CopyProductToPositionOverwriteMode
        /// </summary>
        [DataMember(Name="copyProductToPositionOverwriteMode", EmitDefaultValue=false)]
        public bool CopyProductToPositionOverwriteMode { get; set; }

        /// <summary>
        /// Gets or Sets CopyImpersonalAccountFieldsToPosition
        /// </summary>
        [DataMember(Name="copyImpersonalAccountFieldsToPosition", EmitDefaultValue=false)]
        public bool CopyImpersonalAccountFieldsToPosition { get; set; }

        /// <summary>
        /// XML import document
        /// </summary>
        /// <value>XML import document</value>
        [DataMember(Name="data", EmitDefaultValue=true)]
        public string Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OutgoingInvoiceImportForm {\n");
            sb.Append("  GenerateDocumentNumbers: ").Append(GenerateDocumentNumbers).Append("\n");
            sb.Append("  DoPost: ").Append(DoPost).Append("\n");
            sb.Append("  SkipDuplicates: ").Append(SkipDuplicates).Append("\n");
            sb.Append("  CreatePdf: ").Append(CreatePdf).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  CopyProductToPosition: ").Append(CopyProductToPosition).Append("\n");
            sb.Append("  CopyProductToPositionOverwriteMode: ").Append(CopyProductToPositionOverwriteMode).Append("\n");
            sb.Append("  CopyImpersonalAccountFieldsToPosition: ").Append(CopyImpersonalAccountFieldsToPosition).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutgoingInvoiceImportForm);
        }

        /// <summary>
        /// Returns true if OutgoingInvoiceImportForm instances are equal
        /// </summary>
        /// <param name="input">Instance of OutgoingInvoiceImportForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutgoingInvoiceImportForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GenerateDocumentNumbers == input.GenerateDocumentNumbers ||
                    (this.GenerateDocumentNumbers != null &&
                    this.GenerateDocumentNumbers.Equals(input.GenerateDocumentNumbers))
                ) && 
                (
                    this.DoPost == input.DoPost ||
                    (this.DoPost != null &&
                    this.DoPost.Equals(input.DoPost))
                ) && 
                (
                    this.SkipDuplicates == input.SkipDuplicates ||
                    (this.SkipDuplicates != null &&
                    this.SkipDuplicates.Equals(input.SkipDuplicates))
                ) && 
                (
                    this.CreatePdf == input.CreatePdf ||
                    (this.CreatePdf != null &&
                    this.CreatePdf.Equals(input.CreatePdf))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.CopyProductToPosition == input.CopyProductToPosition ||
                    (this.CopyProductToPosition != null &&
                    this.CopyProductToPosition.Equals(input.CopyProductToPosition))
                ) && 
                (
                    this.CopyProductToPositionOverwriteMode == input.CopyProductToPositionOverwriteMode ||
                    (this.CopyProductToPositionOverwriteMode != null &&
                    this.CopyProductToPositionOverwriteMode.Equals(input.CopyProductToPositionOverwriteMode))
                ) && 
                (
                    this.CopyImpersonalAccountFieldsToPosition == input.CopyImpersonalAccountFieldsToPosition ||
                    (this.CopyImpersonalAccountFieldsToPosition != null &&
                    this.CopyImpersonalAccountFieldsToPosition.Equals(input.CopyImpersonalAccountFieldsToPosition))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GenerateDocumentNumbers != null)
                    hashCode = hashCode * 59 + this.GenerateDocumentNumbers.GetHashCode();
                if (this.DoPost != null)
                    hashCode = hashCode * 59 + this.DoPost.GetHashCode();
                if (this.SkipDuplicates != null)
                    hashCode = hashCode * 59 + this.SkipDuplicates.GetHashCode();
                if (this.CreatePdf != null)
                    hashCode = hashCode * 59 + this.CreatePdf.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.CopyProductToPosition != null)
                    hashCode = hashCode * 59 + this.CopyProductToPosition.GetHashCode();
                if (this.CopyProductToPositionOverwriteMode != null)
                    hashCode = hashCode * 59 + this.CopyProductToPositionOverwriteMode.GetHashCode();
                if (this.CopyImpersonalAccountFieldsToPosition != null)
                    hashCode = hashCode * 59 + this.CopyImpersonalAccountFieldsToPosition.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
