// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace CompuMaster.Scopevisio.OpenApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class TaskForm
    {
        /// <summary>
        /// Initializes a new instance of the TaskForm class.
        /// </summary>
        public TaskForm() { }

        /// <summary>
        /// Initializes a new instance of the TaskForm class.
        /// </summary>
        public TaskForm(string topic, string priority = default(string), long? contactId = default(long?), string contactLegacyId = default(string), string contactSphere = default(string), string description = default(string), long? startDateTS = default(long?), long? dueDateTS = default(long?), long? responsibleContactId = default(long?), long? reminderDateTS = default(long?), string status = default(string), long? projectId = default(long?), long? outgoingInvoiceId = default(long?), string tags = default(string), bool? employeeDomain = default(bool?), bool? setEstimatedHoursManually = default(bool?), double? estimatedHours = default(double?), IList<CustomField> customFields = default(IList<CustomField>), long? permissionType = default(long?), string readPermissionProfiles = default(string), string readPermissionLogins = default(string), string writePermissionProfiles = default(string), string writePermissionLogins = default(string))
        {
            Topic = topic;
            Priority = priority;
            ContactId = contactId;
            ContactLegacyId = contactLegacyId;
            ContactSphere = contactSphere;
            Description = description;
            StartDateTS = startDateTS;
            DueDateTS = dueDateTS;
            ResponsibleContactId = responsibleContactId;
            ReminderDateTS = reminderDateTS;
            Status = status;
            ProjectId = projectId;
            OutgoingInvoiceId = outgoingInvoiceId;
            Tags = tags;
            EmployeeDomain = employeeDomain;
            SetEstimatedHoursManually = setEstimatedHoursManually;
            EstimatedHours = estimatedHours;
            CustomFields = customFields;
            PermissionType = permissionType;
            ReadPermissionProfiles = readPermissionProfiles;
            ReadPermissionLogins = readPermissionLogins;
            WritePermissionProfiles = writePermissionProfiles;
            WritePermissionLogins = writePermissionLogins;
        }

        /// <summary>
        /// topic
        /// </summary>
        [JsonProperty(PropertyName = "topic")]
        public string Topic { get; set; }

        /// <summary>
        /// priority. Possible values include: 'Niedrig', 'Normal', 'Hoch'
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public string Priority { get; set; }

        /// <summary>
        /// contactId
        /// </summary>
        [JsonProperty(PropertyName = "contactId")]
        public long? ContactId { get; set; }

        /// <summary>
        /// contactLegacyId, if a contact with the given contactId is found,
        /// contactLegacyId is not evaluated
        /// </summary>
        [JsonProperty(PropertyName = "contactLegacyId")]
        public string ContactLegacyId { get; set; }

        /// <summary>
        /// contactSphere. Possible values include: 'Lead', 'Insteressent',
        /// 'Kunde', 'Lieferant', 'Debitor', 'Keditor', 'Mitabeiter',
        /// 'Partner', 'Projekt', 'Durchführung', 'Abrechnung'
        /// </summary>
        [JsonProperty(PropertyName = "contactSphere")]
        public string ContactSphere { get; set; }

        /// <summary>
        /// description
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// startDateTS
        /// </summary>
        [JsonProperty(PropertyName = "startDateTS")]
        public long? StartDateTS { get; set; }

        /// <summary>
        /// dueDateTS
        /// </summary>
        [JsonProperty(PropertyName = "dueDateTS")]
        public long? DueDateTS { get; set; }

        /// <summary>
        /// responsibleContactId
        /// </summary>
        [JsonProperty(PropertyName = "responsibleContactId")]
        public long? ResponsibleContactId { get; set; }

        /// <summary>
        /// reminderDateTS
        /// </summary>
        [JsonProperty(PropertyName = "reminderDateTS")]
        public long? ReminderDateTS { get; set; }

        /// <summary>
        /// status. Possible values include: 'Anstehend', 'Begonnen',
        /// 'Erledigt'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// projectId
        /// </summary>
        [JsonProperty(PropertyName = "projectId")]
        public long? ProjectId { get; set; }

        /// <summary>
        /// outgoingInvoiceId
        /// </summary>
        [JsonProperty(PropertyName = "outgoingInvoiceId")]
        public long? OutgoingInvoiceId { get; set; }

        /// <summary>
        /// tags
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public string Tags { get; set; }

        /// <summary>
        /// creates an employee task
        /// </summary>
        [JsonProperty(PropertyName = "employeeDomain")]
        public bool? EmployeeDomain { get; set; }

        /// <summary>
        /// allows setting estimated hours manually
        /// </summary>
        [JsonProperty(PropertyName = "setEstimatedHoursManually")]
        public bool? SetEstimatedHoursManually { get; set; }

        /// <summary>
        /// this parameter is evaluated only if setEstimatedHoursManually is
        /// set to true
        /// </summary>
        [JsonProperty(PropertyName = "estimatedHours")]
        public double? EstimatedHours { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "customFields")]
        public IList<CustomField> CustomFields { get; set; }

        /// <summary>
        /// 0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich
        /// </summary>
        [JsonProperty(PropertyName = "permissionType")]
        public long? PermissionType { get; set; }

        /// <summary>
        /// comma separated list of profiles for the read permissions,
        /// evaluated only if permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "readPermissionProfiles")]
        public string ReadPermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails for the read
        /// permissions, evaluated only if permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "readPermissionLogins")]
        public string ReadPermissionLogins { get; set; }

        /// <summary>
        /// comma separated list of profiles for full access, evaluated only
        /// if permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "writePermissionProfiles")]
        public string WritePermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails, evaluated only if
        /// permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "writePermissionLogins")]
        public string WritePermissionLogins { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Topic == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Topic");
            }
            if (this.CustomFields != null)
            {
                foreach (var element in this.CustomFields)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
