// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace CompuMaster.Scopevisio.OpenApi
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// &lt;p&gt;This is an interactive API reference for the Scopevisio REST
    /// API.&lt;/p&gt;&lt;p&gt;Below you will see the main sections of the
    /// API. Click each section in order to see the endpoints that are
    /// available in that category and use the 'Try it out' button to make
    /// API calls.&lt;/p&gt;&lt;p&gt;For endpoints that require
    /// authentication you can click the lock symbol in the top right of the
    /// endpoint description, which will take you to a login
    /// form.&lt;/p&gt;&lt;h3&gt;Authentication&lt;/h3&gt;&lt;p&gt;In order
    /// to use the "Try it out" function in Swagger you need your own
    /// Scopevisio account. If you have not set up a Scopevisio user account
    /// already you can do so &lt;a href='https://www.scopevisio.com'
    /// target='_blank'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;Example
    /// Application&lt;/h3&gt;&lt;p&gt;We also have an example application
    /// you can reach &lt;a href='../browser/index.html'&gt; here &lt;/a&gt;.
    /// Usage requires a Scopevisio account.&lt;/p&gt;&lt;h3&gt;Search
    /// Documentation&lt;/h3&gt;&lt;p&gt;Our documentation regarding &lt;a
    /// href='../browser/index.html#!/searchscope'&gt;search specification
    /// and paging  &lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;General
    /// Documentation&lt;/h3&gt;&lt;p&gt;Our general documentation can be
    /// found &lt;a href='../browser/index.html#!/documentation'&gt; here
    /// &lt;/a&gt;.&lt;/p&gt;
    /// </summary>
    public partial interface IOpenApiClient : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


            /// <summary>
        /// Returns accounting info details.
        /// </summary>
        /// Required profiles: &lt;i&gt;Stammdaten (Anzeigen)&lt;/i&gt;.
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetAccountingInfosWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// creates a new cashbook entry
        /// </summary>
        /// Creates a new Scopevisio cashbook entry.
        /// Required profile(s): &lt;i&gt;Kassenbewegung eingeben
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='body'>
        /// content in JSON format, topic is required
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateCashbookEntryWithHttpMessagesAsync(CashbookEntryForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// cashbooks
        /// </summary>
        /// Returns Scopevisio cashbooks settings.
        /// Required profile(s): &lt;i&gt;Kassenbücher Dashboard
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetCashbooksWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// cashbook sheets
        /// </summary>
        /// Returns Scopevisio cashbook sheets.
        /// Required profile(s): &lt;i&gt;Abgeschlossene Kassenblätter,
        /// Kassenbewegung eingeben (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetCashbookSheetsWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get contact property (allgemeine Information) by id
        /// </summary>
        /// Returns the contact property (allgemeine Information) with the
        /// given propertyId of the given contactId.
        /// Required profile(s): &lt;i&gt;Kontakte bearbeiten
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='propertyId'>
        /// id of a Scopevisio property
        /// </param>
        /// <param name='fields'>
        /// Comma separated list of fields to show in response
        /// 
        /// id,type,subType
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetPropertyWithHttpMessagesAsync(long propertyId, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update contact property (allgemeine Information) by id
        /// </summary>
        /// Updates the property (allgemeine Information) of a Scopevisio
        /// contact with the given propertyId.
        /// Required profile(s): &lt;i&gt;Kontakte bearbeiten
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='propertyId'>
        /// </param>
        /// <param name='body'>
        /// content in JSON format
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdatePropertyWithHttpMessagesAsync(long propertyId, ContactPropertyForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a new contact
        /// </summary>
        /// Creates a new Scopevisio Contact.
        /// Required profile(s): &lt;i&gt;Kontakte (Bearbeiten)&lt;/i&gt;.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateContactWithHttpMessagesAsync(KontaktForm body = default(KontaktForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a contact by contactId or legacyNumber
        /// </summary>
        /// Delets a Scopevisio contact.
        /// Required profile(s): &lt;i&gt;Kontakte (Bearbeiten)&lt;/i&gt;.
        /// &lt;strong&gt;If the contact has the sphereEmployee set then you
        /// needthe additional user profile
        /// &lt;em&gt;Personal&lt;/em&gt;&lt;/strong&gt;
        /// <param name='contactIdOrLegacyNumber'>
        /// contactId or legacyNumber of a Scopevisio contact
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteContactByIdWithHttpMessagesAsync(string contactIdOrLegacyNumber, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assign mail to a contact.
        /// </summary>
        /// Assigns the mail with the given mailId to the contact with the
        /// given contactIdOrLegacyNumber.
        /// Required profile(s): &lt;i&gt;Kontakte, Mailbot, Mailagent
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='contactIdOrLegacyNumber'>
        /// </param>
        /// <param name='body'>
        /// content in JSON format
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AssignMailContactWithHttpMessagesAsync(string contactIdOrLegacyNumber, AssignMailForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Comments by contactIdOrLegacyNumber.
        /// </summary>
        /// Returns the Scopevisio comments with the given
        /// contactIdOrLegacyNumber.
        /// Required profile(s): &lt;i&gt;Kontakte, Pinnwand
        /// (Anzeigen)&lt;/i&gt;
        /// <param name='contactIdOrLegacyNumber'>
        /// id (Master ID) or legacyNumber (ID Vorsystem) of a Scopevisio
        /// contact
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id,blogId,body
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetBlogEntriesByContactIdWithHttpMessagesAsync(string contactIdOrLegacyNumber, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a contact property (allgemeine Information)
        /// </summary>
        /// Creates a new property (allgemeine Information) for a Scopevisio
        /// contact.
        /// Required profile(s): &lt;i&gt;Kontakte bearbeiten
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='contactIdOrLegacyNumber'>
        /// </param>
        /// <param name='body'>
        /// content in JSON format
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreatePropertyWithHttpMessagesAsync(string contactIdOrLegacyNumber, ContactPropertyForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a file to a Scopevisio contact
        /// </summary>
        /// Adds a file to a Scopevisio contact entry.
        /// Required profile(s): &lt;i&gt;Kontakte (Bearbeiten)&lt;/i&gt;.
        /// <param name='contactIdOrLegacyNumber'>
        /// contactId or legacyNumber of a Scopevisio contact
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AddContactFileWithHttpMessagesAsync(string contactIdOrLegacyNumber, TeamworkFileForm body = default(TeamworkFileForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new comment.
        /// </summary>
        /// Creates a new comment.
        /// Required profile(s): &lt;i&gt;Kontakte, Pinnwand
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='contactId'>
        /// contactId of a Scopevisio contact
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateContactCommentWithHttpMessagesAsync(long contactId, BlogEntryForm body = default(BlogEntryForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get contact by id
        /// </summary>
        /// Returns the Scopevisio contact with the given id.
        /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
        /// <param name='id'>
        /// id of a Scopevisio contact
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id, lastname
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetContactByIdWithHttpMessagesAsync(long id, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// update contact by id
        /// </summary>
        /// Updates the Scopevisio Contact with the given id.
        /// Required profile(s): &lt;i&gt;Kontakte (Bearbeiten)&lt;/i&gt;.
        /// <param name='id'>
        /// id of a Contact
        /// </param>
        /// <param name='body'>
        /// Content in JSON format. Please refer to KontaktForm for example
        /// values and to our  &lt;a
        /// href='../browser/index.html#!/documentation'&gt;general
        /// documentation&lt;/a&gt; for update information.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateContactByIdWithHttpMessagesAsync(long id, KontaktForm body = default(KontaktForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// employees of an organisation contact
        /// </summary>
        /// Returns the employees of the Scopevisio organisation contact with
        /// the given id.
        /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
        /// <param name='id'>
        /// id of a Scopevisio organisation contact
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id,contactId,lastname
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetContactEmployeesWithHttpMessagesAsync(long id, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// employers of a personal contact
        /// </summary>
        /// Returns the employers of the Scopevisio personal contact with the
        /// given id.
        /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
        /// <param name='id'>
        /// id of a Scopevisio personal contact
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id,contactId,company
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetContactEmployersWithHttpMessagesAsync(long id, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// contact propeties for the given contact
        /// </summary>
        /// Returns the Scopevisio contact custom property fields with the
        /// given id.
        /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
        /// <param name='id'>
        /// id of a Scopevisio contact
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id, description
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetContactPropertiesWithHttpMessagesAsync(long id, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// thumbnail image of contact
        /// </summary>
        /// Returns the thumb of a Scopevisio contact with the given id.
        /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
        /// <param name='id'>
        /// id of a Scopevisio contact
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetImageWithHttpMessagesAsync(long id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get contact by id matching the field stated as key identifier
        /// </summary>
        /// Returns the Scopevisio contact with the given id matching the
        /// field stated as key identifier.
        /// If more than one contact is found for the given legacyNumber, then
        /// a HTTP 404 error will be returned. Please use the endpoint
        /// /contacts if you do not have distinct values for your key
        /// identfiers.
        /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
        /// <param name='keyIdentifier'>
        /// key identifier [ID, LEGACYNUMBER], default key identifier: ID.
        /// Possible values include: 'ID', 'LEGACYNUMBER'
        /// </param>
        /// <param name='id'>
        /// id or legacyNumber of a Scopevisio contact, depending on the key
        /// identifier context
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id, lastname
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetContactByKeyIdentifierIdWithHttpMessagesAsync(string keyIdentifier, string id, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// contacts
        /// </summary>
        /// Returns Scopevisio contacts.
        /// Required profile(s): &lt;i&gt;Kontakte (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetContactsWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create debitor for a given contact, if the contact is not already
        /// a debitor.
        /// </summary>
        /// Required profiles: &lt;i&gt;Datenimport (Bearbeiten), Kontakte
        /// bearbeiten (Bearbeiten)&lt;/i&gt;.
        /// At least one of the parameters in the body description below is
        /// needed.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateDebitorWithHttpMessagesAsync(PersonalAccountForm body = default(PersonalAccountForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// import impersonalaccounts
        /// </summary>
        /// Required profiles: &lt;i&gt;Datenimport (Bearbeiten)&lt;/i&gt;.
        /// The examples and allowable values refer to chart of accounts
        /// SKR03. If you use another chart of accounts you should check your
        /// settings in the Scopevisio desktop application.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateImpersonalAcocuntsWithHttpMessagesAsync(ImpersonalAccountsForm body = default(ImpersonalAccountsForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create vendor for a given contact, if the contact is not already a
        /// vendor
        /// </summary>
        /// Required profile(s): &lt;i&gt;Datenimport (Bearbeiten), Kontakte
        /// bearbeiten (Bearbeiten)&lt;/i&gt;.
        /// At least one of the parameters in the body description below is
        /// needed.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateKreditorWithHttpMessagesAsync(PersonalAccountForm body = default(PersonalAccountForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// credit for number (interne Nummer)
        /// </summary>
        /// Returns the Scopevisio credit with the given number (interne
        /// Nummer).
        /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio credit
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id, documentNumber
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetCreditWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// the parent of a credit with the given document number
        /// </summary>
        /// Returns the Scopevisio outgoing invoice document which is parent
        /// of the credit with the given document number.
        /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// document number of a Scopevisio credit
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id, documentNumber
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetCreditParentWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get outgoing invoice positions for the given number(interne Nummer)
        /// </summary>
        /// Returns the positions for the outgoing invoice with the given
        /// number(interne Nummer).
        /// Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
        /// Rechnungen (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// number(interne Nummer) of a Scopevisio credit
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id,name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetCreditPositionsWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post a credit.
        /// </summary>
        /// Post the credit with the given number(interne Nummer).
        /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio credit.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostCreditWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// credits
        /// </summary>
        /// Returns the Scopevisio credits. &lt;i&gt;
        /// Required profile(s): Rechnungen (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetCreditsWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// export postings in DATEV EXTF format
        /// </summary>
        /// Required profiles: &lt;i&gt;Datenexport (Anzeigen)&lt;/i&gt;.
        /// Export postings in DATEV EXTF format.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ExportDatevWithHttpMessagesAsync(DatevExportSettingsForm body = default(DatevExportSettingsForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// import postings in DATEV-Format
        /// </summary>
        /// Required profiles: &lt;i&gt;Datenimport (Bearbeiten)&lt;/i&gt;.
        /// Import postings in DATEV-Format.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ImportDatevDataWithHttpMessagesAsync(DatevPostings body = default(DatevPostings), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// debitor accounts
        /// </summary>
        /// Returns the Debitor-Accounts
        /// Required profile(s): &lt;i&gt;Stammdaten, Debitorenstamm
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetDebitorAccountsWithHttpMessagesAsync(string body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a debitor by accountNumber (Kontonummer).
        /// </summary>
        /// Updates the debitor with the given accountNumber.
        /// Required profile(s): &lt;i&gt;Stammdaten, Debitorenstamm
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='accountNumber'>
        /// </param>
        /// <param name='body'>
        /// content in JSON format
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateDebitorWithHttpMessagesAsync(string accountNumber, UpdatePersonalAccountForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new bank connection for debitor.
        /// </summary>
        /// Creates a new bank connection for the debitor with the given
        /// accountNumber
        /// Required profile(s): &lt;i&gt;Stammdaten, Debitorenstamm
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='accountNumber'>
        /// accountNumber (Kontonummer)of a Scopevisio debitor
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateDebitorBankConnectionWithHttpMessagesAsync(string accountNumber, BankConnectionForm body = default(BankConnectionForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Bank connections for a Scopevisio debitor account.
        /// </summary>
        /// Returns the bank connections for the debitor account with the
        /// given accountNumber.
        /// Required profile(s): &lt;i&gt;Stammdaten, Debitorenstamm
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='accountNumber'>
        /// accountNumber (Kontonummer) of a Scopevisio debitor.
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// documentNumber, postingDate
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetBankConnectionsForDebitorWithHttpMessagesAsync(string accountNumber, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// dimensions
        /// </summary>
        /// Returns all of the dimensions.
        /// Required profile(s): &lt;i&gt;Journal (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetAllDimensionEntriesWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// dimension entries
        /// </summary>
        /// Returns the entries for a given dimension.
        /// Required profile(s): &lt;i&gt;Berichte (Anzeigen)&lt;/i&gt;.
        /// <param name='dimensionNameOrNumber'>
        /// the name or the number of of the dimension. Example:
        /// /dimensions/Kostenstellen/dimensionentries,
        /// /dimesions/1/dimensionentries
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetDimensionReportEntriesWithHttpMessagesAsync(string dimensionNameOrNumber, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the name of a dimension entry.
        /// </summary>
        /// Updates the name of the Scopevisio dimension entry with the given
        /// number.
        /// Required profile(s): &lt;i&gt;Berichte (Bearbeiten)&lt;/i&gt;.
        /// <param name='dimensionNameOrNumber'>
        /// the name or the number of of the dimension. Example:
        /// /dimensions/Kostenstellen/dimensionentries,
        /// /dimesions/1/dimensionentries
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateDimensionEntryWithHttpMessagesAsync(string dimensionNameOrNumber, DimensionEntryForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a dimensionEntry to a dimension
        /// </summary>
        /// Adds a new dimension entry to a dimension.
        /// Required profile(s): &lt;i&gt;Berichte (Bearbeiten)&lt;/i&gt;.
        /// <param name='dimensionNameOrNumber'>
        /// the name or the number of of the dimension. Example:
        /// /dimensions/Kostenstellen/dimensionentries,
        /// /dimesions/1/dimensionentries
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AddDimensionEntryWithHttpMessagesAsync(string dimensionNameOrNumber, DimensionEntryForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get dispatch with number (interne Nummer)
        /// </summary>
        /// Returns the Scopevisio dispatch with the given number (interne
        /// Nummer).
        /// Required profile(s) : &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio dispatch
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id, documentNumber
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetDispatchWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// the parent of the dispatch with the given document number
        /// </summary>
        /// Returns the Scopevisio outgoing invoice document which is parent
        /// of the dispatch with the given document number.
        /// Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// document number of a Scopevisio dispatch
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id, documentNumber
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetDispatchParentWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get the positions for the dispatch with the given number (interne
        /// Nummer)
        /// </summary>
        /// Returns the positions of the dispatch with the given number
        /// (interne Nummer).
        /// Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio dispatch
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id,name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetDispatchPositionsWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Dispatches
        /// </summary>
        /// Returns all Scopevisio dispatches.
        /// Required profile(s): &lt;i&gt;Lieferscheine (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetDispatchesWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// events
        /// </summary>
        /// Returns Events of Scopevisio.
        /// Required profile(s): &lt;i&gt;Rechnungseingangsbuch
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetEventsWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// simple hello world call.
        /// </summary>
        /// Returns 'Hello world' test data.
        /// No profiles required.
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HelloJsonWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get human resources
        /// </summary>
        /// Get human resources.
        /// Required profile(s): &lt;i&gt;Human-Ressourcen Verwaltung
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetHumanResourcesWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get availability of human resources.
        /// </summary>
        /// Return availability of human resources for the given time range.
        /// The both parameters validFrom and validTill specify the start and
        /// end time for which the availability of human resources should be
        /// retrieved.
        /// Required profile(s): &lt;i&gt;Human-Ressourcen Verwaltung
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='validFrom'>
        /// validFrom (Planungszeit von). The start of the time range to show
        /// the availability of the human resources. It must be provided as
        /// an epoch timestamp in milliseconds.
        /// </param>
        /// <param name='validTill'>
        /// validTill (Planungszeit bis). The end of the time range to show
        /// the availability of the human resources. It must be provided as
        /// an epoch timestamp in milliseconds.
        /// </param>
        /// <param name='searchSpecification'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// &lt;b&gt;Please consider: the fields "month","available","id" are
        /// excluded from the search.&lt;/b&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetHumanResourcesYearWithHttpMessagesAsync(long validFrom, long validTill, string searchSpecification = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// impersonal accounts
        /// </summary>
        /// Returns the impersonalaccounts
        /// Required profile(s): &lt;i&gt;Stammdaten, Kontenplan
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetImpersonalAccountsWithHttpMessagesAsync(string body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Import an incoming invoice.
        /// </summary>
        /// Required profiles: &lt;i&gt;Rechnungseingangsbuch
        /// (Bearbeiten)&lt;/i&gt;.
        /// The invoice should be provided as a base64 encoded pdf file. The
        /// maximum size allowed is 20 MB.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateIncomingInvoiceWithHttpMessagesAsync(IncomingInvoiceForm body = default(IncomingInvoiceForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// incoming invoice for the given idOrNumber (id or interne Nummer)
        /// </summary>
        /// Returns the Scopevisio incoming invoices with the given idOrNumber
        /// (id or interne Nummer).
        /// Required profile(s):&lt;i&gt; Rechnungseingangsbuch
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='idOrNumber'>
        /// document idOrNumber (id or interne Nummer) of a Scopevisio
        /// invcoming invoice
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id,documentNumber
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetInvoiceWithHttpMessagesAsync(string idOrNumber, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// The file of incoming invoice with the given idOrNumber (id or
        /// Interne Nummer)
        /// </summary>
        /// Returns the main file of the Scopevisio incoming invoice with the
        /// given idOrNumber (id or Interne Nummer).
        /// Required profile(s):&lt;i&gt; Rechnungseingangsbuch
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='idOrNumber'>
        /// id or number(Interne Nummer) of a Scopevisio invcoming invoice.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetInvoiceFileWithHttpMessagesAsync(string idOrNumber, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Link to the main file for the incoming invoice in the teamwork web
        /// application
        /// </summary>
        /// Returns a link to the main file for the incoming invoice with the
        /// given idOrNumber (id or Interne Nummer) in the teamwork web
        /// application.You need to be logged in to the teamwork webapp.
        /// Required profile(s): &lt;i&gt;Rechnungseingangsbuch
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='idOrNumber'>
        /// idOrNumber (id or Interne Nummer) of a Scopevisio incoming invoice.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetIncomingInvoiceTeamworkFileLinkWithHttpMessagesAsync(string idOrNumber, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// incoming invoices
        /// </summary>
        /// Returns Scopevisio incoming invoices.
        /// Required profile(s): &lt;i&gt;Rechnungseingangsbuch
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// (optional) Apply a search filter in JSON. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetIncomingInvoicesWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Import an incoming email.
        /// </summary>
        /// Required profiles: &lt;i&gt;Mailbot, Mailagent
        /// (Bearbeiten)&lt;/i&gt;.
        /// The service tries to assign the imported mail to the sender and
        /// receiver contacts if found and if they are not the current user
        /// or a vaild sender (see Scopevisio client, Systemadministration
        /// -&gt; Persönliche E-Mail-Adresse verwalten -&gt; Absender
        /// 1-5).The email should be provided as eml content.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateIncomingMailWithHttpMessagesAsync(IncomingMailForm body = default(IncomingMailForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// general journal entries
        /// </summary>
        /// Returns the Scopevisio journal entries.
        /// Required profile(s): &lt;i&gt;Journal (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetJournalEntriesWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Posting by documentNumber
        /// </summary>
        /// Returns the Scopevisio posting rows with the given documentNumber.
        /// Required profile(s): &lt;i&gt;Journal (Anzeigen)&lt;/i&gt;.
        /// <param name='documentNumber'>
        /// documentNumber (Buchungsnummer) of a scopevisio posting.
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// documentNumber, postingDate
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetJournalEntryByDocumentNumberWithHttpMessagesAsync(string documentNumber, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels the posting with the given documentNumber.
        /// </summary>
        /// Cancels the posting with the given documentNumber. If the posting
        /// is already cancelled no error is thrown but the cancellation
        /// posting document number is returned.
        /// Required profiles: &lt;i&gt;Journal (Bearbeiten)&lt;/i&gt;
        /// <param name='documentNumber'>
        /// Document number (Buchungsnummer) of a Scopevisio general journal
        /// entry.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CancelPostingDocumentWithHttpMessagesAsync(string documentNumber, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns file for a journal entry if existing
        /// </summary>
        /// Returns the file of the general journal entry with the given
        /// document number.
        /// Required profile(s): &lt;i&gt;Journal (Anzeigen)&lt;/i&gt;.
        /// <param name='documentNumber'>
        /// document number of a Scopevisio general journal entry
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetGeneralJournalEntryFileWithHttpMessagesAsync(string documentNumber, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a file to a Scopevisio journal entry
        /// </summary>
        /// Adds a file to a Scopevisio journal entry.
        /// Required profile(s): &lt;i&gt;Journal (Bearbeiten)&lt;/i&gt;.
        /// <param name='documentNumber'>
        /// document number of a Scopevisio general journal entry
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AddFileWithHttpMessagesAsync(string documentNumber, FileForm body = default(FileForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// kreditor accounts
        /// </summary>
        /// Returns the Kreditor-Accounts
        /// Required profile(s): &lt;i&gt;Stammdaten, Kreditorenstamm
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetKreditorAccountsWithHttpMessagesAsync(string body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a kreditor by accountNumber (Kontonummer).
        /// </summary>
        /// Updates the kreditor with the given accountNumber.
        /// Required profile(s): &lt;i&gt;Stammdaten, Kreditorenstamm
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='accountNumber'>
        /// </param>
        /// <param name='body'>
        /// content in JSON format
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateKreditorWithHttpMessagesAsync(string accountNumber, UpdatePersonalAccountForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new bank connection for kreditor.
        /// </summary>
        /// Creates a new bank connection for the kreditor with the given
        /// accountNumber
        /// Required profile(s): &lt;i&gt;Stammdaten, Kreditorenstamm
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='accountNumber'>
        /// accountNumber (Kontonummer)of a Scopevisio kreditor
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateKebitorBankConnectionWithHttpMessagesAsync(string accountNumber, BankConnectionForm body = default(BankConnectionForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Bank connections for a Scopevisio kreditor account.
        /// </summary>
        /// Returns the bank connections for the kreditor account with the
        /// given accountNumber.
        /// Required profile(s): &lt;i&gt;Stammdaten, Kreditorenstamm
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='accountNumber'>
        /// accountNumber (Kontonummer) of a Scopevisio kreditor.
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// documentNumber, postingDate
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetBankConnectionsForKreditorWithHttpMessagesAsync(string accountNumber, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Scopevisio licences
        /// </summary>
        /// Returns the available Scopevisio licences and the assigned users.
        /// No profiles required.
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetLicencesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// customer account information
        /// </summary>
        /// Returns customer and user account info.
        /// No profiles required.
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetApplicationContextWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get offer with number (interne Nummer)
        /// </summary>
        /// Returns the Scopevisio offer with the given number (interne
        /// Nummer).
        /// Required profile(s) : &lt;i&gt;Angebote (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio offer
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id, documentNumber
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetOfferWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert offer to dispatch
        /// </summary>
        /// Convert the Scopevisio offer with the given number (interne
        /// Nummer) to an dispatch.
        /// Required profile(s): &lt;i&gt;Angebote (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio offer
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertOfferToDispatchWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert offer to opportunity
        /// </summary>
        /// Convert the Scopevisio offer with the given number (interne
        /// Nummer) to an opportunity.
        /// Required profile(s): &lt;i&gt;Angebote (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio offer
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertOfferToOpportunityWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert offer to order
        /// </summary>
        /// Convert the Scopevisio offer with the given number (interne
        /// Nummer) to an order.
        /// Required profile(s): &lt;i&gt;Angebote (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio offer
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertOfferToOrderWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert offer to outgoing invoice
        /// </summary>
        /// Convert the Scopevisio offer with the given number (interne
        /// Nummer) to an outgoing invoice.
        /// Required profile(s): &lt;i&gt;Angebote (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio offer
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertOfferToOutgoingInvoiceWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert offer to recurring invoice
        /// </summary>
        /// Convert the Scopevisio offer with the given number (interne
        /// Nummer) to a recurring invoice.
        /// Required profile(s): &lt;i&gt;Angebote (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio offer
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertOfferToRecurringInvoiceWithHttpMessagesAsync(string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// the parent of an offer with the given document number
        /// </summary>
        /// Returns the Scopevisio outgoing invoice document which is parent
        /// of the outgoing invoice with the given document number.
        /// Required profile(s): &lt;i&gt;Angebote (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// document number of a Scopevisio offer
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id, documentNumber
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetOfferParentWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get the positions for the offer with the given number (interne
        /// Nummer)
        /// </summary>
        /// Returns the positions of the offer with the given number (interne
        /// Nummer).
        /// Required profile(s): &lt;i&gt;Angebote (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio offer
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id,name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetOfferPositionsWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Offers
        /// </summary>
        /// Returns all Scopevisio offers.
        /// Required profile(s): &lt;i&gt;Angebote (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetOffersWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Opportunities
        /// </summary>
        /// Returns all Scopevisio opportunites.
        /// Required profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
        /// Rechnungen (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetOpportunitiesWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get opportunity with number (interne Nummer)
        /// </summary>
        /// Returns the Scopevisio sales potential with the given number
        /// (interne Nummer).
        /// Required profile(s): &lt;i&gt;Rechnungen, Potenziale
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio outgoing invoice
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id, documentNumber
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetOpportunityWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert opportunity to dispatch
        /// </summary>
        /// Convert the Scopevisio opportunity with the given number (interne
        /// Nummer) to an dispatch.
        /// Required profile(s): &lt;i&gt;Rechnungen, Potenziale
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio opportunity
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertOpportunityToDispatchWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert opportunity to offer
        /// </summary>
        /// Convert the Scopevisio opportunity with the given number (interne
        /// Nummer) to an offer.
        /// Required profile(s): &lt;i&gt;Rechnungen, Potenziale
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio opportunity
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertOpportunityToOfferWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert opportunity to order
        /// </summary>
        /// Convert the Scopevisio opportunity with the given number (interne
        /// Nummer) to an order.
        /// Required profile(s): &lt;i&gt;Rechnungen, Potenziale
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio opportunity
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertOpportunityToOrderWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert opportunity to outgoing invoice
        /// </summary>
        /// Convert the Scopevisio opportunity with the given number (interne
        /// Nummer) to an outgoing invoice.
        /// Required profile(s): &lt;i&gt;Rechnungen, Potenziale
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio opportunity
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertOpportunityToOutgoingInvoiceWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert opportunity to recurring invoice
        /// </summary>
        /// Convert the Scopevisio opportunity with the given number (interne
        /// Nummer) to a recurring invoice.
        /// Required profile(s): &lt;i&gt;Rechnungen, Potenziale
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio opportunity
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertOpportunityToRecurringInvoiceWithHttpMessagesAsync(string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get opportunity positions for the given number (interne Nummer)
        /// </summary>
        /// Returns the positions for the opportunity with the given number
        /// (interne Nummer).
        /// Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
        /// Rechnungen (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio potential
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id,name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetOpportunityPositionsWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get order with number (interne Nummer)
        /// </summary>
        /// Returns the Scopevisio order with the given number (interne
        /// Nummer).
        /// Required profile(s) : &lt;i&gt;Aufträge (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio order
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id, documentNumber
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetOrderWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert order to Dispatch
        /// </summary>
        /// Convert the Scopevisio order with the given number (interne
        /// Nummer) to an dispatch.
        /// Required profile(s): &lt;i&gt;Aufträge (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio order
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertOrderToDispatchWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert order to offer
        /// </summary>
        /// Convert the Scopevisio order with the given number (interne
        /// Nummer) to an offer.
        /// Required profile(s): &lt;i&gt;Aufträge (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio order
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertOrderToOfferWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert order to opportunity
        /// </summary>
        /// Convert the Scopevisio order with the given number (interne
        /// Nummer) to an opportunity.
        /// Required profile(s): &lt;i&gt;Aufträge (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio order
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertOrderToOpportunityWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert order to outgoing invoice
        /// </summary>
        /// Convert the Scopevisio order with the given number (interne
        /// Nummer) to an outgoing invoice.
        /// Required profile(s): &lt;i&gt;Aufträge (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio order
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertOrderToOutgoingInvoiceWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert order to recurring invoice
        /// </summary>
        /// Convert the Scopevisio order with the given number (interne
        /// Nummer) to a recurring invoice.
        /// Required profile(s): &lt;i&gt;Aufträge (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio order
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertOrderToRecurringInvoiceWithHttpMessagesAsync(string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// the parent of an order with the given document number
        /// </summary>
        /// Returns the Scopevisio outgoing invoice document which is parent
        /// of the order with the given document number.
        /// Required profile(s): &lt;i&gt;Aufträge (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// document number of a Scopevisio offer
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id, documentNumber
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetOrderParentWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get the positions for the order with the given number (interne
        /// Nummer)
        /// </summary>
        /// Returns the positions of the order with the given number (interne
        /// Nummer).
        /// Required profile(s): &lt;i&gt;Aufträge (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio OfferPositions
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id,name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetOrderPositionsWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Orders
        /// </summary>
        /// Returns all Scopevisio orders.
        /// Required profile(s): &lt;i&gt;Aufträge (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetOrdersWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a Scopevisio organisation.
        /// </summary>
        /// Creates a Scopevisio organisation with the given name (if not
        /// existing) and the given scoa (standard chart of accounts).
        /// &lt;strong&gt;The scoa set up takes some time. Please make sure
        /// you set your timeout to at least 5 min.&lt;/strong&gt;
        /// Required profiles: &lt;i&gt;Organisation (Bearbeiten)&lt;/i&gt;
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateOrganisationWithHttpMessagesAsync(OrganisationForm body = default(OrganisationForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// organisations
        /// </summary>
        /// Returns organisations of a customers instance the user has access
        /// to.
        /// No profiles required.
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> OrganisationJsonWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Export templates for offer, opportunity, order, outgoing invoice,
        /// credit, packing slip
        /// </summary>
        /// Returns the Scopevisio expoirt templates for offer, opportunity,
        /// order, outgoing invoice, credit, packing slip.
        /// Required profile(s): &lt;i&gt;Faktura Stammdaten, Opportunities
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetOutgoingInvoiceExportTemplatesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// outgoing invoice for number (interne Nummer)
        /// </summary>
        /// Returns the Scopevisio outgoing invoices with the given number
        /// (interne Nummer).
        /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio outgoing invoice
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id, documentNumber
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetOutgoingInvoiceWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert outgoing invoice to dispatch
        /// </summary>
        /// Convert the Scopevisio outgoing invoice with the given number
        /// (interne Nummer) to an dispatch.
        /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio outgoing invoice
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertInvoiceToDispatchWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert outgoing invoice to offer
        /// </summary>
        /// Convert the Scopevisio outgoing invoice with the given number
        /// (interne Nummer) to an offer.
        /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio outgoing invoice
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertInvoiceToOfferWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert outgoing invoice to opportunity
        /// </summary>
        /// Convert the Scopevisio outgoing invoice with the given number
        /// (interne Nummer) to an opportunity.
        /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio outgoing invoice
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertInvoiceToOpportunityWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert outgoing invoice to order
        /// </summary>
        /// Convert the Scopevisio outgoing invoice with the given number
        /// (interne Nummer) to an order.
        /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio outgoing invoice
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertInvoiceToOrderWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert outgoing invoice to recurring invoice
        /// </summary>
        /// Convert the Scopevisio outgoing invoice with the given number
        /// (interne Nummer) to a recurring invoice.
        /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio outgoing invoice
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertInvoiceToRecurringInvoiceWithHttpMessagesAsync(string number, ConvertToRecurringInvoiceForm body = default(ConvertToRecurringInvoiceForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// The file for the outgoing invoice
        /// </summary>
        /// Returns the last file for the given outgoing invoice number.
        /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// document number of a Scopevisio outgoing invoice
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetOutgoingInvoiceFileWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a file to a Scopevisio outgoing invoice
        /// </summary>
        /// Adds a file to a Scopevisio outgoing invoice.
        /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// documentNumber (Belegnummer) of a Scopevisio outgoing invoice
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AddFileToOutgoingInvoiceWithHttpMessagesAsync(string number, FileForm body = default(FileForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// the parent of an outgoing invoice with the given document number
        /// </summary>
        /// Returns the Scopevisio outgoing invoice document which is parent
        /// of the outgoing invoice with the given document number.
        /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// document number of a Scopevisio outgoing invoice
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id, documentNumber
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetOutgoingInvoiceParentWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get outgoing invoice positions for the given number (interne
        /// Nummer)
        /// </summary>
        /// Returns the positions for the outgoing invoice with the given
        /// number (interne Nummer).
        /// Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
        /// Rechnungen (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio outgoing invoice
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id,name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetOutgoingInvoicePositionsWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Post an outgoing invoice.
        /// </summary>
        /// Post the outgoing invoice with the given number(interne Nummer).
        /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio outgoing invoice
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostOutgoingInvoiceWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Link to the last file for the outgoing invoice in the teamwork web
        /// application
        /// </summary>
        /// Returns a link to the last file for the given outgoing invoice
        /// number in the teamwork web application. You need to be logged in
        /// to the teamwork webapp.
        /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// document number of a Scopevisio outgoing invoice
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetOutgoingInvoiceTeamworkFileLinkWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// outgoing invoices
        /// </summary>
        /// Returns the Scopevisio outgoing invoices. &lt;i&gt;
        /// Required profile(s): Rechnungen (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetOutgoingInvoicesWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Imports outgoing invoices
        /// </summary>
        /// Required profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
        /// Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ImportOutgoingInvoicesWithHttpMessagesAsync(OutgoingInvoiceImportForm body = default(OutgoingInvoiceImportForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new payment term.
        /// </summary>
        /// Creates a new payment term.
        /// Required profile(s): &lt;i&gt;Stammdaten, Zahlungsbedingungen
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreatePaymentTermWithHttpMessagesAsync(PaymentTermForm body = default(PaymentTermForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets payment term for id.
        /// </summary>
        /// Returns the Scopevisio payment term with the given id.
        /// Required profile(s): &lt;i&gt;Stammdaten, Zahlungsbedingungen
        /// (Anzeigen)&lt;/i&gt;
        /// <param name='id'>
        /// id of a Scopevisio payment term
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetPaymentTermWithHttpMessagesAsync(long id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update payment term.
        /// </summary>
        /// Update the payment term with the given id.
        /// Required profile(s): &lt;i&gt;Stammdaten, Zahlungsbedingungen
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='id'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdatePaymentTermWithHttpMessagesAsync(long id, PaymentTermForm body = default(PaymentTermForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get payment terms..
        /// </summary>
        /// Returns all payment terms for the current Scopeviso organisation.
        /// Required profile(s): &lt;i&gt;Stammdaten, Zahlungsbedingungen
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// name, netTimeLimit
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetPaymentTermsWithHttpMessagesAsync(string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// personal journal entries
        /// </summary>
        /// Returns the Scopevisio journal entries.
        /// Required profile(s): &lt;i&gt;Journal (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetPersonalJournalEntriesWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// import postings
        /// </summary>
        /// Required profiles: &lt;i&gt;Datenimport (Bearbeiten)&lt;/i&gt;.
        /// The examples and allowable values refer to chart of accounts
        /// SKR03. If you use another chart of accounts you should check your
        /// settings in the Scopevisio desktop application.
        /// 
        /// To import a posting two or more postings rows are needed. More
        /// information and data structure can be found inside the Scopevisio
        /// client
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreatePostingsWithHttpMessagesAsync(Postings body = default(Postings), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// creates a new product
        /// </summary>
        /// Creates a new Scopevisio product.
        /// Required profile(s): &lt;i&gt;Produktverwaltung
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='body'>
        /// content in JSON format, topic is required
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateProductWithHttpMessagesAsync(ProductForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get product by id
        /// </summary>
        /// Returns the Scopevisio product with the given id.
        /// Required profile(s): &lt;i&gt;Produktverwaltung
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='id'>
        /// the id of the product you want to retrieve
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id,number,name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetProductWithHttpMessagesAsync(long id, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// update product by id
        /// </summary>
        /// Updates the Scopevisio product with the given id.
        /// Required profile(s): &lt;i&gt;Produktverwaltung
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='id'>
        /// id of a Scopevisio product
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateProductWithHttpMessagesAsync(long id, ProductForm body = default(ProductForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// creates a new productGroup
        /// </summary>
        /// Creates a new Scopevisio productGroup.
        /// Required profile(s): &lt;i&gt;Produktverwaltung
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='name'>
        /// content in JSON format, topic is required
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateProductGroupWithHttpMessagesAsync(ProductGroupForm name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get all productGroups
        /// </summary>
        /// Returns all the Scopevisio productGroups.
        /// Required profile(s): &lt;i&gt;Produktverwaltung
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetProductGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// products
        /// </summary>
        /// Returns all Scopevisio products.
        /// Required profile(s): &lt;i&gt;Produktverwaltung
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetProductsWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a new project
        /// </summary>
        /// Creates a new Project
        /// Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateProjectWithHttpMessagesAsync(ProjectForm body = default(ProjectForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// project by id
        /// </summary>
        /// Returns the Scopevisio project with the given id.
        /// Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// <param name='id'>
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id,number,name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetProjectWithHttpMessagesAsync(long id, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// update project by id
        /// </summary>
        /// Updates the Scopevisio project with the given id.
        /// Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// <param name='id'>
        /// id of a Scopevisio Project
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateProjectWithHttpMessagesAsync(long id, ProjectForm body = default(ProjectForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assign mail to a project.
        /// </summary>
        /// Assigns the mail with the given mailId to the project with the
        /// given projectId.
        /// Required profile(s): &lt;i&gt;Projekte, Mailbot, Mailagent
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='projectId'>
        /// </param>
        /// <param name='body'>
        /// content in JSON format
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AssignMailProjectWithHttpMessagesAsync(long projectId, AssignMailForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new comment.
        /// </summary>
        /// Creates a new comment.
        /// Required profile(s): &lt;i&gt;Projekte, Pinnwand
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='projectId'>
        /// projectId of a Scopevisio project
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateProjectCommentWithHttpMessagesAsync(long projectId, BlogEntryForm body = default(BlogEntryForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Comments by projectId.
        /// </summary>
        /// Returns the Scopevisio comments with the given projectId.
        /// Required profile(s): &lt;i&gt;Projekte, Pinnwand
        /// (Anzeigen)&lt;/i&gt;
        /// <param name='projectId'>
        /// Id of a Scopevisio project
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id,blogId,body
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetBlogEntriesByProjectIdWithHttpMessagesAsync(long projectId, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a file to a Scopevisio project
        /// </summary>
        /// Adds a file to a Scopevisio project.
        /// Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// <param name='projectId'>
        /// projectId (MID) of a Scopevisio project.
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AddProjectFileWithHttpMessagesAsync(long projectId, TeamworkFileForm body = default(TeamworkFileForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a project employee (Projektteam-Eintrag)
        /// </summary>
        /// Creates a new project employee (Projektteam-Eintrag) for a
        /// Scopevisio project.
        /// Required profile(s): &lt;i&gt;Kontakte, Projekte
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='projectId'>
        /// </param>
        /// <param name='body'>
        /// content in JSON format
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateProjectEmployeeWithHttpMessagesAsync(long projectId, ProjectEmployeeForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get project employee (Projektteam-Eintrag) by id
        /// </summary>
        /// Returns project employee with the given employee id (not contact
        /// id).
        /// Required profile(s): &lt;i&gt;Kontakte, Projekte
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='employeeId'>
        /// Id of a Scopevisio project employee
        /// </param>
        /// <param name='projectId'>
        /// </param>
        /// <param name='fields'>
        /// Comma separated list of fields to show in response
        /// 
        /// id,type,subtype
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetProjectEmployeeWithHttpMessagesAsync(long employeeId, long projectId, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// update project employee (Projektteam-Eintrag) by employeeId (not
        /// contactId).
        /// </summary>
        /// Updates the employee of a Scopevisio project with the given
        /// employeeId.
        /// Required profile(s): &lt;i&gt;Kontakte, Projekte
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='projectId'>
        /// </param>
        /// <param name='employeeId'>
        /// </param>
        /// <param name='body'>
        /// content in JSON format
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateProjectEmployeeWithHttpMessagesAsync(long projectId, long employeeId, ProjectEmployeeForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// project employees (Projektteam) of a given project
        /// </summary>
        /// Returns the project employees (Projektteam) of a Scopevisio
        /// project with the given projectId.
        /// Required profile(s): &lt;i&gt;Kontakte, Projekte
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='projectId'>
        /// id of a Scopevisio project
        /// </param>
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetProjectEmployeesWithHttpMessagesAsync(long projectId, string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get project resources.
        /// </summary>
        /// Returns the project resources.
        /// Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// <param name='projectStartFrom'>
        /// After which date the project start date should be. It must be
        /// provided as an epoch timestamp in milliseconds.
        /// </param>
        /// <param name='projectStartTo'>
        /// Before which date the project start date should be. It must be
        /// provided as an epoch timestamp in milliseconds.
        /// </param>
        /// <param name='searchSpecification'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// &lt;b&gt;Please consider: the fields
        /// "month","monthDays","workDays", "availableMonthDays" are excluded
        /// from the search.&lt;/b&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetProjectResourcesWithHttpMessagesAsync(long projectStartFrom, long projectStartTo, string searchSpecification = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get project revenue
        /// </summary>
        /// Get project revenue.
        /// Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// <param name='projectStartFrom'>
        /// After which date the project start date should be. It must be
        /// provided as an epoch timestamp in milliseconds.
        /// </param>
        /// <param name='projectStartTo'>
        /// Before which date the project start date should be. It must be
        /// provided as an epoch timestamp in milliseconds.
        /// </param>
        /// <param name='revenueType'>
        /// revenueType(Umsatzart), the wished revenue Type. (Umsatzart), 0 =
        /// Planung, 1 = Realisierung, 2 = Abweichung, if not provided
        /// revenueType is set to "Planung"
        /// </param>
        /// <param name='searchSpecification'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// &lt;b&gt;Please consider: the fields "month","monthRevenue","id"
        /// are excluded from the search.&lt;/b&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetProjectRevenueWithHttpMessagesAsync(long projectStartFrom, long projectStartTo, long? revenueType = default(long?), string searchSpecification = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// projects
        /// </summary>
        /// Returns Scopevisio projects.
        /// Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetProjectsWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// recurring invoice for number (interne Nummer)
        /// </summary>
        /// Returns the Scopevisio recurring invoice with the given number
        /// (interne Nummer).
        /// Required profile(s): &lt;i&gt;Rechnungen (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio outgoing invoice
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id, documentNumber
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetRecurringInvoiceWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update the recurrence data of an invoice.
        /// </summary>
        /// Update the recurrence data of the invoice with the given
        /// number(interne Nummer).
        /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio recurring invoice
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateRecurringInvoiceWithHttpMessagesAsync(string number, RecurringInvoiceForm body = default(RecurringInvoiceForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert recurring invoice to dispatch
        /// </summary>
        /// Convert the Scopevisio recurring invoice with the given number
        /// (interne Nummer) to an dispatch.
        /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio recurring invoice
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertRecurringInvoiceToDispatchWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert recurring invoice to offer
        /// </summary>
        /// Convert the Scopevisio recurring invoice with the given number
        /// (interne Nummer) to an offer.
        /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio recurring invoice
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertRecurringInvoiceToOfferWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert recurring invoice to opportunity
        /// </summary>
        /// Convert the Scopevisio recurring invoice with the given number
        /// (interne Nummer) to an opportunity.
        /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio recurring invoice
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertRecurringInvoiceToOpportunityWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert recurring invoice to order
        /// </summary>
        /// Convert the Scopevisio recurring invoice with the given number
        /// (interne Nummer) to an order.
        /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio recurring invoice
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertRecurringInvoiceToOrderWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert recurring invoice to recurring invoice
        /// </summary>
        /// Convert the Scopevisio recurring invoice with the given number
        /// (interne Nummer) to a recurring invoice.
        /// Required profile(s): &lt;i&gt;Rechnungen (Bearbeiten)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio recurring invoice
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ConvertRecurringInvoiceToOutgoingInvoiceWithHttpMessagesAsync(string number, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get recurring invoice positions for the given number (interne
        /// Nummer)
        /// </summary>
        /// Returns the positions for the recurring invoice with the given
        /// number (interne Nummer).
        /// Required Profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
        /// Rechnungen (Anzeigen)&lt;/i&gt;.
        /// <param name='number'>
        /// number (interne Nummer) of a Scopevisio recurring invoice
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id,name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetRecurringInvoicePositionsWithHttpMessagesAsync(string number, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// recurring invoices
        /// </summary>
        /// Returns the Scopevisio recurring invoices. &lt;i&gt;
        /// Required profile(s): Rechnungen (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetRecurringInvoicesWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Exports accounting reports
        /// </summary>
        /// Required profile(s): &lt;code&gt;Berichte, Debitoren, Kreditoren
        /// (Anzeigen)&lt;/code&gt;.
        /// <param name='type'>
        /// The report type to export:&lt;ul&gt;&lt;li&gt;susa_account = SuSa
        /// Sachkonten&lt;/li&gt;&lt;li&gt;susa_debitor = SuSa
        /// Debitorkonten&lt;/li&gt;&lt;li&gt;susa_creditor = SuSa
        /// Kreditorkonten&lt;/li&gt;&lt;li&gt;bilanz =
        /// Bilanz&lt;/li&gt;&lt;li&gt;guv = Gewinn- und
        /// Verlustrechnung&lt;/li&gt;&lt;li&gt;bwa = Betriebswirtschaftliche
        /// Auswertung&lt;/li&gt;&lt;/ul&gt;. Possible values include:
        /// 'susa_account', 'susa_debitor', 'susa_creditor', 'bilanz', 'guv',
        /// 'bwa'
        /// </param>
        /// <param name='startDate'>
        /// Start date. Format: &lt;code&gt;dd.MM.yyyy&lt;/code&gt;
        /// </param>
        /// <param name='endDate'>
        /// End date. Format: &lt;code&gt;dd.MM.yyyy&lt;/code&gt;
        /// </param>
        /// <param name='reportName'>
        /// Report name, applies only for type bilanz, guv, bwa
        /// </param>
        /// <param name='outputFormat'>
        /// Output format. Possible values include: 'pdf', 'csv', 'xml', 'json'
        /// </param>
        /// <param name='includeHeader'>
        /// Trigger: Include header in csv export
        /// </param>
        /// <param name='includeZeroValued'>
        /// Trigger: Include zero values in export
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetReportWithHttpMessagesAsync(string type, string startDate, string endDate, string reportName = default(string), string outputFormat = "csv", bool? includeHeader = default(bool?), bool? includeZeroValued = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new sales project (Vertriebsprojekt)
        /// </summary>
        /// Creates a new sales project (Vertriebsprojekt). The created
        /// project has "sphereLead" set. It is not possible to convert a
        /// Lead (project with "sphereLead" set) to Interessent
        /// ("sphereInterested" set) via webservice. The conversion must be
        /// done via the Scopevisio client. To retrieve a sales project use
        /// the endpoint project/{id}.
        /// Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateSalesProjectWithHttpMessagesAsync(SalesProjectForm body = default(SalesProjectForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// update sales project (Vertriebsprojekt) by id
        /// </summary>
        /// Updates the Scopevisio sales project (Vertriebsprojekt) with the
        /// given id. It is not possible to convert a  Lead (project
        /// "sphereLead" set) to Interessent ("sphereInterested" set) via
        /// webservice. The conversion must be done via the Scopevisio
        /// client. Setting the interested fields like intrestedBudget,
        /// intrestedAuthority, etc. is only possible if the projectis
        /// already Interessent ("sphereInterested" set). Otherwise they are
        /// overridden by the conversion process. To retrieve a sales project
        /// use the endpoint project/{id}.
        /// Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// <param name='id'>
        /// id of a Scopevisio Project
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateSalesProjectWithHttpMessagesAsync(long id, SalesProjectForm body = default(SalesProjectForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new subtask (Tätigkeit)
        /// </summary>
        /// Creates a new subtask (Tätigkeit) for a Scopevisio Task
        /// Required profile(s): &lt;i&gt;Aufgabe, Kontakte
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='body'>
        /// content in JSON format, taskId is required
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateSubtaskWithHttpMessagesAsync(SubtaskForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a new task
        /// </summary>
        /// Creates a new Scopevisio Task
        /// Required profile(s): &lt;i&gt;Aufgabe, Kontakte
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='body'>
        /// content in JSON format, topic is required
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateTaskWithHttpMessagesAsync(TaskForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// task for id
        /// </summary>
        /// Returns the Scopevisio task with the given id.
        /// Required profile(s): &lt;i&gt;Aufgabe (Anzeigen)&lt;/i&gt;
        /// <param name='id'>
        /// id of a Scopevisio task
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id,topic
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetTaskWithHttpMessagesAsync(long id, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update task
        /// </summary>
        /// Updates the Scopevisio task with the given task id.
        /// Required profile(s): &lt;i&gt;Aufgabe (Bearbeiten)&lt;/i&gt;.
        /// <param name='id'>
        /// id of a Scopevisio task
        /// </param>
        /// <param name='body'>
        /// Content in JSON format. Please refer to TaskForm for example
        /// values and to our  &lt;a
        /// href='../browser/index.html#!/documentation'&gt;general
        /// documentation&lt;/a&gt; for update information.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateTaskWithHttpMessagesAsync(long id, TaskForm body = default(TaskForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assign mail to a task.
        /// </summary>
        /// Assigns the mail with the given mailId to the task with the given
        /// taskId.
        /// Required profile(s): &lt;i&gt;Aufgaben,Mailbot,Mailagent
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='taskId'>
        /// </param>
        /// <param name='body'>
        /// content in JSON format
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AssignMailTaskWithHttpMessagesAsync(long taskId, AssignMailForm body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new comment.
        /// </summary>
        /// Creates a new comment.
        /// Required profile(s): &lt;i&gt;Aufgaben, Pinnwand
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='taskId'>
        /// taskId of a Scopevisio task
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateTaskCommentWithHttpMessagesAsync(long taskId, BlogEntryForm body = default(BlogEntryForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Comments by taskId.
        /// </summary>
        /// Returns the Scopevisio comments with the given taskId.
        /// Required profile(s): &lt;i&gt;Aufgaben, Pinnwand
        /// (Anzeigen)&lt;/i&gt;
        /// <param name='taskId'>
        /// id (Master ID) of a Scopevisio task
        /// </param>
        /// <param name='fields'>
        /// Comma separated list of fields to show in response.
        /// 
        /// id,blogId,body
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetTaskCommentsWithHttpMessagesAsync(long taskId, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a file to a Scopevisio task
        /// </summary>
        /// Adds a file to a Scopevisio task.
        /// Required profile(s): &lt;i&gt;Aufgaben (Bearbeiten)&lt;/i&gt;.
        /// <param name='taskId'>
        /// taskId (Master ID) of a Scopevisio taskId.
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AddTaskFileWithHttpMessagesAsync(long taskId, TeamworkFileForm body = default(TeamworkFileForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Subtasks (Tätigkeiten) for task id
        /// </summary>
        /// Returns all subtasks (Tätigkeiten) for a Scopevisio task with the
        /// given id.
        /// Required profile(s): &lt;i&gt;Aufgabe (Anzeigen)&lt;/i&gt;.
        /// <param name='taskId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetSubtasksWithHttpMessagesAsync(long taskId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// tasks
        /// </summary>
        /// Returns Scopevisio tasks.
        /// Required profile(s): &lt;i&gt;Aufgabe (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetTasksWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// See our &lt;a
        /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
        /// for usage.
        /// </summary>
        /// <param name='arg1'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetHandler1WithHttpMessagesAsync(string arg1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// See our &lt;a
        /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
        /// for usage.
        /// </summary>
        /// <param name='arg1'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PostHandler1WithHttpMessagesAsync(string arg1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// See our &lt;a
        /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
        /// for usage.
        /// </summary>
        /// <param name='arg1'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PutHandler1WithHttpMessagesAsync(string arg1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// See our &lt;a
        /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
        /// for usage.
        /// </summary>
        /// <param name='arg1'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteHandler1WithHttpMessagesAsync(string arg1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// See our &lt;a
        /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
        /// for usage.
        /// </summary>
        /// <param name='arg1'>
        /// </param>
        /// <param name='arg2'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetHandler2WithHttpMessagesAsync(string arg1, string arg2, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// See our &lt;a
        /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
        /// for usage.
        /// </summary>
        /// <param name='arg1'>
        /// </param>
        /// <param name='arg2'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PostHandler2WithHttpMessagesAsync(string arg1, string arg2, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// See our &lt;a
        /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
        /// for usage.
        /// </summary>
        /// <param name='arg1'>
        /// </param>
        /// <param name='arg2'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PutHandler2WithHttpMessagesAsync(string arg1, string arg2, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// See our &lt;a
        /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
        /// for usage.
        /// </summary>
        /// <param name='arg1'>
        /// </param>
        /// <param name='arg2'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteHandler2WithHttpMessagesAsync(string arg1, string arg2, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// See our &lt;a
        /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
        /// for usage.
        /// </summary>
        /// <param name='arg1'>
        /// </param>
        /// <param name='arg2'>
        /// </param>
        /// <param name='arg3'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetHandler3WithHttpMessagesAsync(string arg1, string arg2, string arg3, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// See our &lt;a
        /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
        /// for usage.
        /// </summary>
        /// <param name='arg1'>
        /// </param>
        /// <param name='arg2'>
        /// </param>
        /// <param name='arg3'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PostHandler3WithHttpMessagesAsync(string arg1, string arg2, string arg3, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// See our &lt;a
        /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
        /// for usage.
        /// </summary>
        /// <param name='arg1'>
        /// </param>
        /// <param name='arg2'>
        /// </param>
        /// <param name='arg3'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PutHandler3WithHttpMessagesAsync(string arg1, string arg2, string arg3, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// See our &lt;a
        /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
        /// for usage.
        /// </summary>
        /// <param name='arg1'>
        /// </param>
        /// <param name='arg2'>
        /// </param>
        /// <param name='arg3'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteHandler3WithHttpMessagesAsync(string arg1, string arg2, string arg3, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// See our &lt;a
        /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
        /// for usage.
        /// </summary>
        /// <param name='arg1'>
        /// </param>
        /// <param name='arg2'>
        /// </param>
        /// <param name='arg3'>
        /// </param>
        /// <param name='arg4'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PutHandler4WithHttpMessagesAsync(string arg1, string arg2, string arg3, string arg4, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// See our &lt;a
        /// href='../browser/index.html#!/documentation#teamwork'&gt;documentation&lt;/a&gt;
        /// for usage.
        /// </summary>
        /// <param name='arg1'>
        /// </param>
        /// <param name='arg2'>
        /// </param>
        /// <param name='arg3'>
        /// </param>
        /// <param name='arg4'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteHandler4WithHttpMessagesAsync(string arg1, string arg2, string arg3, string arg4, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Teamwork token
        /// </summary>
        /// Returns a teamwork token.
        /// No profiles required.
        /// <param name='force'>
        /// Force retrieving new teamworktoken and not returning existing one.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetTeamworkTokenWithHttpMessagesAsync(bool? force = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Invalidates the stored teamwork token
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteTeamworkTokenWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get text templates (Textbausteine)
        /// </summary>
        /// Returns the Scopevisio text templates (Textbausteine).
        /// Required profile(s): &lt;i&gt;Angebote, Aufträge, Lieferscheine,
        /// Rechnungen, Rechnungseingangsbuch (Anzeigen)&lt;/i&gt;.
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetTextTemplatesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all timeentries available
        /// </summary>
        /// Shows all available time entries.
        /// Required profile(s): &lt;i&gt;Zeiterfassung (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetAllTimEntriesWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new timeentry
        /// </summary>
        /// Creates a new timeentry.
        /// Required profile(s): &lt;i&gt;Projekte, Zeiterfassung
        /// (Bearbeiten)&lt;/i&gt;.
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateTimeEntryWithHttpMessagesAsync(TimeEntryForm body = default(TimeEntryForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// timeEntry for id
        /// </summary>
        /// Returns the Scopevisio timeEntry with the given id.
        /// Required profile(s): &lt;i&gt;Projekte (Anzeigen)&lt;/i&gt;
        /// <param name='id'>
        /// id of a Scopevisio timeEntry
        /// </param>
        /// <param name='fields'>
        /// comma separated list of fields to show in response
        /// 
        /// id,topic
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetTimeEntryWithHttpMessagesAsync(long id, string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update timeEntry
        /// </summary>
        /// Updates the Scopevisio timeEntry with the given timeEntry id.
        /// Update may be refused if a time entry run exists for this time
        /// entry. In this case the time entry is updated only if the setting
        /// in the time entry run settings (see Scopevisio client
        /// application) is "Änderungen zulassen".
        /// Required profile(s): &lt;i&gt;Projekte (Bearbeiten)&lt;/i&gt;.
        /// <param name='id'>
        /// id of a Scopevisio timeEntry
        /// </param>
        /// <param name='body'>
        /// Content in JSON format. Please refer to TimeentryForm for example
        /// values and to our  &lt;a
        /// href='../browser/index.html#!/documentation'&gt;general
        /// documentation&lt;/a&gt; for update information.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateTimeEntryWithHttpMessagesAsync(long id, TimeEntryForm body = default(TimeEntryForm), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Access token
        /// </summary>
        /// Retrieves a Scopevisio access token.
        /// No profiles required.
        /// <param name='grantType'>
        /// Grant type. Possible values include: 'password', 'refresh_token',
        /// 'authorization_code'
        /// </param>
        /// <param name='customer'>
        /// Scopevisio 7 digit customer number
        /// </param>
        /// <param name='clientId'>
        /// Client ID, if not set, will revert to "sv"
        /// </param>
        /// <param name='clientSecret'>
        /// Client secret
        /// </param>
        /// <param name='username'>
        /// Scopevisio user login, required if grant_type=password
        /// </param>
        /// <param name='organisationId'>
        /// Scopevisio organisation id
        /// </param>
        /// <param name='organisation'>
        /// Scopevisio organisation name
        /// </param>
        /// <param name='password'>
        /// Scopevisio user password, required if grant_type=password
        /// </param>
        /// <param name='totpResponse'>
        /// Scopeviso user one time password, required only if activated
        /// </param>
        /// <param name='refreshToken'>
        /// Refresh token, required if grant_type=refresh_token
        /// </param>
        /// <param name='code'>
        /// Authorization code, required if grant_type=authorization_code
        /// </param>
        /// <param name='requestcookie'>
        /// Whether to set access token in cookie
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> TokenWithHttpMessagesAsync(string grantType, string customer, string clientId = default(string), string clientSecret = default(string), string username = default(string), long? organisationId = default(long?), string organisation = default(string), string password = default(string), string totpResponse = default(string), string refreshToken = default(string), string code = default(string), string requestcookie = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Revokes the given token
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RevokeTokenWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Changes the organisation by name
        /// </summary>
        /// <param name='name'>
        /// Name of the organisation to change to
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ChangeOrganisationByNameWithHttpMessagesAsync(string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Changes the organisation by ID
        /// </summary>
        /// <param name='organisationId'>
        /// ID of the organisation to change to
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ChangeOrganisationByIdWithHttpMessagesAsync(long organisationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all users
        /// </summary>
        /// Required profile(s): Benutzer (Anzeigen).
        /// <param name='onlyActive'>
        /// If set to true, deleted users are not returned.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetUsersWithHttpMessagesAsync(bool? onlyActive = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates the given users
        /// </summary>
        /// Required profile(s): Benutzer (Bearbeiten).
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CreateUsersWithHttpMessagesAsync(IList<UserForm> body = default(IList<UserForm>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the given users
        /// </summary>
        /// Required profile(s): Benutzer (Bearbeiten).
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateUsersWithHttpMessagesAsync(IList<UserForm> body = default(IList<UserForm>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the user by UID or email
        /// </summary>
        /// Required profile(s): Benutzer (Anzeigen).
        /// <param name='uidOrEmail'>
        /// User ID or email
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetUserWithHttpMessagesAsync(string uidOrEmail, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the user by UID or email. Please note, the users are only
        /// marked as deleted.
        /// </summary>
        /// Required profile(s): Benutzer (Bearbeiten).
        /// <param name='uidOrEmail'>
        /// User ID or email
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteUserWithHttpMessagesAsync(string uidOrEmail, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// vat matrix
        /// </summary>
        /// Returns the vat matrix for the current organisation.
        /// Required profile(s): &lt;i&gt;Stammdaten, Steuermatrix
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetVatMatrixEntriesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// retrieve deployment version infos
        /// </summary>
        /// Returns deployment version infos.
        /// No profiles required.
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetVersionWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// zones
        /// </summary>
        /// Returns all Scopevisio zones (Rechnungskreise).
        /// Required profile(s): &lt;i&gt;Stammdaten, Rechnungskreis
        /// (Anzeigen)&lt;/i&gt;.
        /// <param name='body'>
        /// search filter in JSON format. See also &lt;a
        /// href='../browser/index.html#!/searchscope'&gt;our search
        /// documentation&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetZonesWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
