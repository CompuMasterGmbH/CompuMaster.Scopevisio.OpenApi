// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace CompuMaster.Scopevisio.OpenScopeApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class ProjectForm
    {
        /// <summary>
        /// Initializes a new instance of the ProjectForm class.
        /// </summary>
        public ProjectForm() { }

        /// <summary>
        /// Initializes a new instance of the ProjectForm class.
        /// </summary>
        public ProjectForm(string name, long contactId, string number = default(string), string category = default(string), string type = default(string), string type2 = default(string), string description = default(string), string legacyNumber = default(string), long? initiatorContactId = default(long?), long? contactPerson = default(long?), string ownerUid = default(string), double? workdays = default(double?), long? startTs = default(long?), long? endTs = default(long?), long? decisionTs = default(long?), bool? estimatedHoursMode = default(bool?), double? estimatedHours = default(double?), long? dimensionNumber = default(long?), string dimensionName = default(string), string phase = default(string), string status = default(string), string priority = default(string), string risk = default(string), string riskDescription = default(string), string billable = default(string), string timeRecordable = default(string), string timeRecordType = default(string), long? hoursPerDay = default(long?), string mail = default(string), IList<CustomField> customFields = default(IList<CustomField>), IList<ProjectEmployeeForm> projectEmployees = default(IList<ProjectEmployeeForm>), long? permissionType = default(long?), string readPermissionProfiles = default(string), string readPermissionLogins = default(string), string writePermissionProfiles = default(string), string writePermissionLogins = default(string))
        {
            Number = number;
            Name = name;
            Category = category;
            Type = type;
            Type2 = type2;
            Description = description;
            ContactId = contactId;
            LegacyNumber = legacyNumber;
            InitiatorContactId = initiatorContactId;
            ContactPerson = contactPerson;
            OwnerUid = ownerUid;
            Workdays = workdays;
            StartTs = startTs;
            EndTs = endTs;
            DecisionTs = decisionTs;
            EstimatedHoursMode = estimatedHoursMode;
            EstimatedHours = estimatedHours;
            DimensionNumber = dimensionNumber;
            DimensionName = dimensionName;
            Phase = phase;
            Status = status;
            Priority = priority;
            Risk = risk;
            RiskDescription = riskDescription;
            Billable = billable;
            TimeRecordable = timeRecordable;
            TimeRecordType = timeRecordType;
            HoursPerDay = hoursPerDay;
            Mail = mail;
            CustomFields = customFields;
            ProjectEmployees = projectEmployees;
            PermissionType = permissionType;
            ReadPermissionProfiles = readPermissionProfiles;
            ReadPermissionLogins = readPermissionLogins;
            WritePermissionProfiles = writePermissionProfiles;
            WritePermissionLogins = writePermissionLogins;
        }

        /// <summary>
        /// number
        /// </summary>
        [JsonProperty(PropertyName = "number")]
        public string Number { get; set; }

        /// <summary>
        /// name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// category (Projektkategorie), if not given, it is set to
        /// "Kundenprojekt". Possible values include: 'Kundenprojekt',
        /// 'Vertriebsprojekt', 'Investitionsprojekt', 'Entwicklungsprojekt',
        /// 'Beratungsprojekt', 'Organisationsprojekt', 'Soziales Projekt',
        /// 'Sonstiges Projekt'
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }

        /// <summary>
        /// type (Projektbezug) . Possible values include: 'intern', 'extern'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// type2 (Projektart) - the allowable values depend on the project
        /// category. Please check the Scopevisio desktop application for all
        /// allowable values per category. The example values are for
        /// category "Kundenprojekt". Possible values include:
        /// 'Kundenauftrag', 'Lieferung', 'Bestellabwicklung',
        /// 'Leistungserbringung', 'Auftragserbringung', 'Sonstiges'
        /// </summary>
        [JsonProperty(PropertyName = "type2")]
        public string Type2 { get; set; }

        /// <summary>
        /// description (Projektbeschreibung)
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// contactId (Projektadressat)
        /// </summary>
        [JsonProperty(PropertyName = "contactId")]
        public long ContactId { get; set; }

        /// <summary>
        /// legacyNumber (ID Vorsystem). The Id of the project used in the
        /// previous system.
        /// </summary>
        [JsonProperty(PropertyName = "legacyNumber")]
        public string LegacyNumber { get; set; }

        /// <summary>
        /// project initiator (Projektträger)
        /// </summary>
        [JsonProperty(PropertyName = "initiatorContactId")]
        public long? InitiatorContactId { get; set; }

        /// <summary>
        /// contactPerson (Ansprechpartner beim Kunden/Lead/Interessenten).
        /// The contact id of the contact person for the project - the
        /// selected contact must be an employee of the project contact and
        /// the project contact must be main employer.
        /// </summary>
        [JsonProperty(PropertyName = "contactPerson")]
        public long? ContactPerson { get; set; }

        /// <summary>
        /// ownerUid (Projektinhaber). Uid of the user, who is the owner of
        /// this project. Refer to /users to retrieve the uid
        /// </summary>
        [JsonProperty(PropertyName = "ownerUid")]
        public string OwnerUid { get; set; }

        /// <summary>
        /// workdays (Arbeitstage). Please check the Scopevisio desktop
        /// application for all allowable values for workdays
        /// </summary>
        [JsonProperty(PropertyName = "workdays")]
        public double? Workdays { get; set; }

        /// <summary>
        /// Project start (Projektstart)
        /// </summary>
        [JsonProperty(PropertyName = "startTs")]
        public long? StartTs { get; set; }

        /// <summary>
        /// project end (Projektende)
        /// </summary>
        [JsonProperty(PropertyName = "endTs")]
        public long? EndTs { get; set; }

        /// <summary>
        /// Project decision timestamp (Entsch.zeitp.)
        /// </summary>
        [JsonProperty(PropertyName = "decisionTs")]
        public long? DecisionTs { get; set; }

        /// <summary>
        /// estimatedHoursMode (checbox Manuell). Toggle if estimated hours is
        /// set manually or not, 0 = false, 1 = true
        /// </summary>
        [JsonProperty(PropertyName = "estimatedHoursMode")]
        public bool? EstimatedHoursMode { get; set; }

        /// <summary>
        /// Estimated hours field is evaluated only if estimatedHoursMode is
        /// present and set to true
        /// </summary>
        [JsonProperty(PropertyName = "estimatedHours")]
        public double? EstimatedHours { get; set; }

        /// <summary>
        /// dimensionNumber (Projektkostenstelle)
        /// </summary>
        [JsonProperty(PropertyName = "dimensionNumber")]
        public long? DimensionNumber { get; set; }

        /// <summary>
        /// dimensionName (Projektkostenstelle) Name of the dimensionNumber.
        /// If not given, it is set to the project name.
        /// </summary>
        [JsonProperty(PropertyName = "dimensionName")]
        public string DimensionName { get; set; }

        /// <summary>
        /// phase (Projekt-Phase) - the allowable values depend on the project
        /// category. Please check the Scopevisio desktop application for all
        /// allowable values per category. The example values are for
        /// category "Kundenprojekt". Possible values include:
        /// 'Vorbereitung', 'Durchführung', 'Durchführung und
        /// Teilabrechnung', 'Abschluss', 'Schlußabrechnung', 'Bewertung',
        /// 'Zahlungsüberwachung'
        /// </summary>
        [JsonProperty(PropertyName = "phase")]
        public string Phase { get; set; }

        /// <summary>
        /// status (Projekt-Status) - the allowable values depend on the
        /// project category. Please checkthe Scopevisio desktop application
        /// for all allowable values per category. The example values are for
        /// category "Kundenprojekt". Possible values include: 'anstehend',
        /// 'gestartet', 'beendet', 'unterbrochen', 'zurückgestellt',
        /// 'abgebrochen', 'unbekannt'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// priority (Projekt-Priorität). Possible values include: 'niedrig',
        /// 'mittel', 'hoch', 'sehr hoch', 'sofort'
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public string Priority { get; set; }

        /// <summary>
        /// risk (Projekt-Risiko). Possible values include: 'niedrig',
        /// 'mittel', 'hoch', 'sehr hoch', 'unbekannt'
        /// </summary>
        [JsonProperty(PropertyName = "risk")]
        public string Risk { get; set; }

        /// <summary>
        /// riskDescription (Risikobeschreibung)
        /// </summary>
        [JsonProperty(PropertyName = "riskDescription")]
        public string RiskDescription { get; set; }

        /// <summary>
        /// billable (Fakturierbar). Possible values include: 'Ja', 'Nein',
        /// 'Noch zu genehmigen'
        /// </summary>
        [JsonProperty(PropertyName = "billable")]
        public string Billable { get; set; }

        /// <summary>
        /// timeRecordable (Zeiterfassung). Possible values include: 'Ja',
        /// 'Nein', 'Noch zu genehmigen'
        /// </summary>
        [JsonProperty(PropertyName = "timeRecordable")]
        public string TimeRecordable { get; set; }

        /// <summary>
        /// time record type (Zeiterfassung in...). Possible values include:
        /// 'Minuten', 'Stunden', 'Tage', 'Wochen', 'Jahren'
        /// </summary>
        [JsonProperty(PropertyName = "timeRecordType")]
        public string TimeRecordType { get; set; }

        /// <summary>
        /// hours per day (Stunden pro Arbeitstag)
        /// </summary>
        [JsonProperty(PropertyName = "hoursPerDay")]
        public long? HoursPerDay { get; set; }

        /// <summary>
        /// project email (E-Mail)
        /// </summary>
        [JsonProperty(PropertyName = "mail")]
        public string Mail { get; set; }

        /// <summary>
        /// custom fields (Benutzerdefinierte Felder)- these are available for
        /// projects only if your client supports sales projects
        /// </summary>
        [JsonProperty(PropertyName = "customFields")]
        public IList<CustomField> CustomFields { get; set; }

        /// <summary>
        /// project employees are all contacts involved in the project
        /// (Projektbeteiligte)
        /// </summary>
        [JsonProperty(PropertyName = "projectEmployees")]
        public IList<ProjectEmployeeForm> ProjectEmployees { get; set; }

        /// <summary>
        /// permissionType(Berechtigungen)0 = Öffentlich, 1 =
        /// Benutzerdefiniert, 2 = Persönlich
        /// </summary>
        [JsonProperty(PropertyName = "permissionType")]
        public long? PermissionType { get; set; }

        /// <summary>
        /// comma separated list of profiles for the read permissions,
        /// evaluated only if permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "readPermissionProfiles")]
        public string ReadPermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails for the read
        /// permissions, evaluated only if permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "readPermissionLogins")]
        public string ReadPermissionLogins { get; set; }

        /// <summary>
        /// comma separated list of profiles for full access, evaluated only
        /// if permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "writePermissionProfiles")]
        public string WritePermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails, evaluated only if
        /// permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "writePermissionLogins")]
        public string WritePermissionLogins { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (this.CustomFields != null)
            {
                foreach (var element in this.CustomFields)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.ProjectEmployees != null)
            {
                foreach (var element1 in this.ProjectEmployees)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
