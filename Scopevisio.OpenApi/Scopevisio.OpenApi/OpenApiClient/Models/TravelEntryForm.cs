// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace CompuMaster.Scopevisio.OpenApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class TravelEntryForm
    {
        /// <summary>
        /// Initializes a new instance of the TravelEntryForm class.
        /// </summary>
        public TravelEntryForm() { }

        /// <summary>
        /// Initializes a new instance of the TravelEntryForm class.
        /// </summary>
        public TravelEntryForm(long employeeId, long startTs, long endTs, string accountType = default(string), string documentnumber = default(string), long? orderId = default(long?), long? dimensionNumber = default(long?), long? projectId = default(long?), string note = default(string), long? startContactId = default(long?), string startStreet = default(string), string startCity = default(string), string startPostcode = default(string), string startCountry = default(string), string startFederalState = default(string), string street = default(string), string city = default(string), string postcode = default(string), string country = default(string), string federalState = default(string), string internalNote = default(string), bool? stateDone = default(bool?), bool? billable = default(bool?), long? permissionType = default(long?), string readPermissionProfiles = default(string), string readPermissionLogins = default(string), string writePermissionProfiles = default(string), string writePermissionLogins = default(string))
        {
            EmployeeId = employeeId;
            AccountType = accountType;
            Documentnumber = documentnumber;
            OrderId = orderId;
            DimensionNumber = dimensionNumber;
            ProjectId = projectId;
            Note = note;
            StartTs = startTs;
            EndTs = endTs;
            StartContactId = startContactId;
            StartStreet = startStreet;
            StartCity = startCity;
            StartPostcode = startPostcode;
            StartCountry = startCountry;
            StartFederalState = startFederalState;
            Street = street;
            City = city;
            Postcode = postcode;
            Country = country;
            FederalState = federalState;
            InternalNote = internalNote;
            StateDone = stateDone;
            Billable = billable;
            PermissionType = permissionType;
            ReadPermissionProfiles = readPermissionProfiles;
            ReadPermissionLogins = readPermissionLogins;
            WritePermissionProfiles = writePermissionProfiles;
            WritePermissionLogins = writePermissionLogins;
        }

        /// <summary>
        /// Id of contact (Reisender)
        /// </summary>
        [JsonProperty(PropertyName = "employeeId")]
        public long EmployeeId { get; set; }

        /// <summary>
        /// accountType(Beschaeftigungart). Default value is "Mitarbeiter" if
        /// not set by the user. . Possible values include: 'Mitarbeiter',
        /// 'Unternehmer', 'Extern'
        /// </summary>
        [JsonProperty(PropertyName = "accountType")]
        public string AccountType { get; set; }

        /// <summary>
        /// documentNumber(Reisenummer). "documentNumber" if not provided a
        /// document number is generated.
        /// </summary>
        [JsonProperty(PropertyName = "documentnumber")]
        public string Documentnumber { get; set; }

        /// <summary>
        /// orderId(Auftrag)
        /// </summary>
        [JsonProperty(PropertyName = "orderId")]
        public long? OrderId { get; set; }

        /// <summary>
        /// dimensionNumber(Kostenstelle)
        /// </summary>
        [JsonProperty(PropertyName = "dimensionNumber")]
        public long? DimensionNumber { get; set; }

        /// <summary>
        /// projectId(Projekt)
        /// </summary>
        [JsonProperty(PropertyName = "projectId")]
        public long? ProjectId { get; set; }

        /// <summary>
        /// note(Anlass der Reise).
        /// </summary>
        [JsonProperty(PropertyName = "note")]
        public string Note { get; set; }

        /// <summary>
        /// start timestamp(Reisebeginn)."startTs" is a mandatory field. If
        /// not given it is not work.
        /// </summary>
        [JsonProperty(PropertyName = "startTs")]
        public long StartTs { get; set; }

        /// <summary>
        /// end timestamp(Reiseende)."endTs" is a mandatory field. If not
        /// given it is not work.
        /// </summary>
        [JsonProperty(PropertyName = "endTs")]
        public long EndTs { get; set; }

        /// <summary>
        /// contactId(kontakt)
        /// </summary>
        [JsonProperty(PropertyName = "startContactId")]
        public long? StartContactId { get; set; }

        /// <summary>
        /// startStreet and startNumber(straße und hausnummer)
        /// </summary>
        [JsonProperty(PropertyName = "startStreet")]
        public string StartStreet { get; set; }

        /// <summary>
        /// startCity(stadt)
        /// </summary>
        [JsonProperty(PropertyName = "startCity")]
        public string StartCity { get; set; }

        /// <summary>
        /// startPostcode(postleitzahl)
        /// </summary>
        [JsonProperty(PropertyName = "startPostcode")]
        public string StartPostcode { get; set; }

        /// <summary>
        /// startCountry(land)
        /// </summary>
        [JsonProperty(PropertyName = "startCountry")]
        public string StartCountry { get; set; }

        /// <summary>
        /// startFederalState(bundesland)
        /// </summary>
        [JsonProperty(PropertyName = "startFederalState")]
        public string StartFederalState { get; set; }

        /// <summary>
        /// street and number(straße und Hausnummer)
        /// </summary>
        [JsonProperty(PropertyName = "street")]
        public string Street { get; set; }

        /// <summary>
        /// city(stadt)
        /// </summary>
        [JsonProperty(PropertyName = "city")]
        public string City { get; set; }

        /// <summary>
        /// postcode(postleitzahl)
        /// </summary>
        [JsonProperty(PropertyName = "postcode")]
        public string Postcode { get; set; }

        /// <summary>
        /// county(land)
        /// </summary>
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// federalstate(bundesland)
        /// </summary>
        [JsonProperty(PropertyName = "federalState")]
        public string FederalState { get; set; }

        /// <summary>
        /// internal Note(Interne Notiz)
        /// </summary>
        [JsonProperty(PropertyName = "internalNote")]
        public string InternalNote { get; set; }

        /// <summary>
        /// stateDone(Durchgeführt)
        /// </summary>
        [JsonProperty(PropertyName = "stateDone")]
        public bool? StateDone { get; set; }

        /// <summary>
        /// billable(Fakturierbar)
        /// </summary>
        [JsonProperty(PropertyName = "billable")]
        public bool? Billable { get; set; }

        /// <summary>
        /// 0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich
        /// </summary>
        [JsonProperty(PropertyName = "permissionType")]
        public long? PermissionType { get; set; }

        /// <summary>
        /// comma separated list of profiles for the read permissions,
        /// evaluated only if permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "readPermissionProfiles")]
        public string ReadPermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails for the read
        /// permissions, evaluated only if permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "readPermissionLogins")]
        public string ReadPermissionLogins { get; set; }

        /// <summary>
        /// comma separated list of profiles for full access, evaluated only
        /// if permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "writePermissionProfiles")]
        public string WritePermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails, evaluated only if
        /// permissionType equals 1.
        /// </summary>
        [JsonProperty(PropertyName = "writePermissionLogins")]
        public string WritePermissionLogins { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
