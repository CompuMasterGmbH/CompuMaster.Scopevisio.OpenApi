// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace CompuMaster.Scopevisio.OpenApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class CashbookEntryForm
    {
        /// <summary>
        /// Initializes a new instance of the CashbookEntryForm class.
        /// </summary>
        public CashbookEntryForm() { }

        /// <summary>
        /// Initializes a new instance of the CashbookEntryForm class.
        /// </summary>
        public CashbookEntryForm(long cashbookId, long documentDate, string externalDocumentNumber = default(string), string internalDocumentNumber = default(string), string freeText = default(string), double? debitAmount = default(double?), double? creditAmount = default(double?), string impersonalAccountNumber = default(string), string personalAccountNumber = default(string), string notice = default(string), IList<DimensionEntryValueForm> dimensions = default(IList<DimensionEntryValueForm>))
        {
            CashbookId = cashbookId;
            DocumentDate = documentDate;
            ExternalDocumentNumber = externalDocumentNumber;
            InternalDocumentNumber = internalDocumentNumber;
            FreeText = freeText;
            DebitAmount = debitAmount;
            CreditAmount = creditAmount;
            ImpersonalAccountNumber = impersonalAccountNumber;
            PersonalAccountNumber = personalAccountNumber;
            Notice = notice;
            Dimensions = dimensions;
        }

        /// <summary>
        /// cashbookId (Ref-Nummer Kasse)
        /// </summary>
        [JsonProperty(PropertyName = "cashbookId")]
        public long CashbookId { get; set; }

        /// <summary>
        /// documentDate(Datum), epoch timestamp in milliseconds
        /// </summary>
        [JsonProperty(PropertyName = "documentDate")]
        public long DocumentDate { get; set; }

        /// <summary>
        /// externalDocumentNumber(externe Belegnummer)
        /// </summary>
        [JsonProperty(PropertyName = "externalDocumentNumber")]
        public string ExternalDocumentNumber { get; set; }

        /// <summary>
        /// internalDocumentNumber (interne Belegnummer),
        /// </summary>
        [JsonProperty(PropertyName = "internalDocumentNumber")]
        public string InternalDocumentNumber { get; private set; }

        /// <summary>
        /// freeText(Belegtext)
        /// </summary>
        [JsonProperty(PropertyName = "freeText")]
        public string FreeText { get; set; }

        /// <summary>
        /// debitAmount(Einnahmen)
        /// </summary>
        [JsonProperty(PropertyName = "debitAmount")]
        public double? DebitAmount { get; set; }

        /// <summary>
        /// creditAmount(Ausgaben)
        /// </summary>
        [JsonProperty(PropertyName = "creditAmount")]
        public double? CreditAmount { get; set; }

        /// <summary>
        /// impersonalAccountNumber(Gegenkonto)
        /// </summary>
        [JsonProperty(PropertyName = "impersonalAccountNumber")]
        public string ImpersonalAccountNumber { get; set; }

        /// <summary>
        /// Kunde/Lieferant
        /// </summary>
        [JsonProperty(PropertyName = "personalAccountNumber")]
        public string PersonalAccountNumber { get; set; }

        /// <summary>
        /// notice(Notiz)
        /// </summary>
        [JsonProperty(PropertyName = "notice")]
        public string Notice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dimensions")]
        public IList<DimensionEntryValueForm> Dimensions { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (this.Dimensions != null)
            {
                foreach (var element in this.Dimensions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
