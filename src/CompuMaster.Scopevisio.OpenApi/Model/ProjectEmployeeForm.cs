/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CompuMaster.Scopevisio.OpenApi.Client.OpenAPIDateConverter;

namespace CompuMaster.Scopevisio.OpenApi.Model
{
    /// <summary>
    /// ProjectEmployeeForm
    /// </summary>
    [DataContract]
    public partial class ProjectEmployeeForm :  IEquatable<ProjectEmployeeForm>, IValidatableObject
    {
        /// <summary>
        /// contactSphere
        /// </summary>
        /// <value>contactSphere</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContactSphereEnum
        {
            /// <summary>
            /// Enum Alle for value: Alle
            /// </summary>
            [EnumMember(Value = "Alle")]
            Alle = 1,

            /// <summary>
            /// Enum Lead for value: Lead
            /// </summary>
            [EnumMember(Value = "Lead")]
            Lead = 2,

            /// <summary>
            /// Enum Interessent for value: Interessent
            /// </summary>
            [EnumMember(Value = "Interessent")]
            Interessent = 3,

            /// <summary>
            /// Enum Kunde for value: Kunde
            /// </summary>
            [EnumMember(Value = "Kunde")]
            Kunde = 4,

            /// <summary>
            /// Enum Lieferant for value: Lieferant
            /// </summary>
            [EnumMember(Value = "Lieferant")]
            Lieferant = 5,

            /// <summary>
            /// Enum Debitor for value: Debitor
            /// </summary>
            [EnumMember(Value = "Debitor")]
            Debitor = 6,

            /// <summary>
            /// Enum Kreditor for value: Kreditor
            /// </summary>
            [EnumMember(Value = "Kreditor")]
            Kreditor = 7,

            /// <summary>
            /// Enum Mitarbeiter for value: Mitarbeiter
            /// </summary>
            [EnumMember(Value = "Mitarbeiter")]
            Mitarbeiter = 8

        }

        /// <summary>
        /// contactSphere
        /// </summary>
        /// <value>contactSphere</value>
        [DataMember(Name="contactSphere", EmitDefaultValue=false)]
        public ContactSphereEnum? ContactSphere { get; set; }
        /// <summary>
        /// role in the project, please chek your catalog in the Scopevisio desktop client for allowable values
        /// </summary>
        /// <value>role in the project, please chek your catalog in the Scopevisio desktop client for allowable values</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleEnum
        {
            /// <summary>
            /// Enum Auftraggeber for value: Auftraggeber
            /// </summary>
            [EnumMember(Value = "Auftraggeber")]
            Auftraggeber = 1,

            /// <summary>
            /// Enum Projektleitung for value: Projektleitung
            /// </summary>
            [EnumMember(Value = "Projektleitung")]
            Projektleitung = 2,

            /// <summary>
            /// Enum Projektteammitglieder for value: Projektteammitglieder
            /// </summary>
            [EnumMember(Value = "Projektteammitglieder")]
            Projektteammitglieder = 3,

            /// <summary>
            /// Enum Lenkungsausschuss for value: Lenkungsausschuss
            /// </summary>
            [EnumMember(Value = "Lenkungsausschuss")]
            Lenkungsausschuss = 4,

            /// <summary>
            /// Enum Projektservicestelle for value: Projektservicestelle
            /// </summary>
            [EnumMember(Value = "Projektservicestelle")]
            Projektservicestelle = 5,

            /// <summary>
            /// Enum ArbeitspaketLeitung for value: Arbeitspaket-Leitung
            /// </summary>
            [EnumMember(Value = "Arbeitspaket-Leitung")]
            ArbeitspaketLeitung = 6,

            /// <summary>
            /// Enum Projektassistenz for value: Projektassistenz
            /// </summary>
            [EnumMember(Value = "Projektassistenz")]
            Projektassistenz = 7,

            /// <summary>
            /// Enum ProjectManagementOffice for value: Project Management Office
            /// </summary>
            [EnumMember(Value = "Project Management Office")]
            ProjectManagementOffice = 8,

            /// <summary>
            /// Enum Projektmanagement for value: Projektmanagement
            /// </summary>
            [EnumMember(Value = "Projektmanagement")]
            Projektmanagement = 9,

            /// <summary>
            /// Enum TechnischeKoordination for value: Technische Koordination
            /// </summary>
            [EnumMember(Value = "Technische Koordination")]
            TechnischeKoordination = 10,

            /// <summary>
            /// Enum FachlicheKoordination for value: Fachliche Koordination
            /// </summary>
            [EnumMember(Value = "Fachliche Koordination")]
            FachlicheKoordination = 11,

            /// <summary>
            /// Enum Analyseleitung for value: Analyseleitung
            /// </summary>
            [EnumMember(Value = "Analyseleitung")]
            Analyseleitung = 12,

            /// <summary>
            /// Enum Entwicklungsteamleitung for value: Entwicklungsteamleitung
            /// </summary>
            [EnumMember(Value = "Entwicklungsteamleitung")]
            Entwicklungsteamleitung = 13,

            /// <summary>
            /// Enum SoftwareArchitekt for value: Software Architekt
            /// </summary>
            [EnumMember(Value = "Software Architekt")]
            SoftwareArchitekt = 14,

            /// <summary>
            /// Enum Testverantwortlicher for value: Testverantwortlicher
            /// </summary>
            [EnumMember(Value = "Testverantwortlicher")]
            Testverantwortlicher = 15,

            /// <summary>
            /// Enum QSVerantwortlicher for value: QS Verantwortlicher
            /// </summary>
            [EnumMember(Value = "QS Verantwortlicher")]
            QSVerantwortlicher = 16,

            /// <summary>
            /// Enum Betriebsverantwortlicher for value: Betriebsverantwortlicher
            /// </summary>
            [EnumMember(Value = "Betriebsverantwortlicher")]
            Betriebsverantwortlicher = 17

        }

        /// <summary>
        /// role in the project, please chek your catalog in the Scopevisio desktop client for allowable values
        /// </summary>
        /// <value>role in the project, please chek your catalog in the Scopevisio desktop client for allowable values</value>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public RoleEnum? Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectEmployeeForm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectEmployeeForm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectEmployeeForm" /> class.
        /// </summary>
        /// <param name="contactId">contact id of the given project employee (required).</param>
        /// <param name="contactSphere">contactSphere.</param>
        /// <param name="role">role in the project, please chek your catalog in the Scopevisio desktop client for allowable values.</param>
        /// <param name="hourlyRate">hourly rate.</param>
        /// <param name="dailyRate">daily rate.</param>
        public ProjectEmployeeForm(long contactId = default(long), ContactSphereEnum? contactSphere = default(ContactSphereEnum?), RoleEnum? role = default(RoleEnum?), decimal hourlyRate = default(decimal), decimal dailyRate = default(decimal))
        {
            // to ensure "contactId" is required (not null)
            if (contactId == null)
            {
                throw new InvalidDataException("contactId is a required property for ProjectEmployeeForm and cannot be null");
            }
            else
            {
                this.ContactId = contactId;
            }
            
            this.ContactSphere = contactSphere;
            this.Role = role;
            this.HourlyRate = hourlyRate;
            this.DailyRate = dailyRate;
        }
        
        /// <summary>
        /// contact id of the given project employee
        /// </summary>
        /// <value>contact id of the given project employee</value>
        [DataMember(Name="contactId", EmitDefaultValue=false)]
        public long ContactId { get; set; }



        /// <summary>
        /// hourly rate
        /// </summary>
        /// <value>hourly rate</value>
        [DataMember(Name="hourlyRate", EmitDefaultValue=false)]
        public decimal HourlyRate { get; set; }

        /// <summary>
        /// daily rate
        /// </summary>
        /// <value>daily rate</value>
        [DataMember(Name="dailyRate", EmitDefaultValue=false)]
        public decimal DailyRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectEmployeeForm {\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  ContactSphere: ").Append(ContactSphere).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  HourlyRate: ").Append(HourlyRate).Append("\n");
            sb.Append("  DailyRate: ").Append(DailyRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectEmployeeForm);
        }

        /// <summary>
        /// Returns true if ProjectEmployeeForm instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectEmployeeForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectEmployeeForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.ContactSphere == input.ContactSphere ||
                    (this.ContactSphere != null &&
                    this.ContactSphere.Equals(input.ContactSphere))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.HourlyRate == input.HourlyRate ||
                    (this.HourlyRate != null &&
                    this.HourlyRate.Equals(input.HourlyRate))
                ) && 
                (
                    this.DailyRate == input.DailyRate ||
                    (this.DailyRate != null &&
                    this.DailyRate.Equals(input.DailyRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.ContactSphere != null)
                    hashCode = hashCode * 59 + this.ContactSphere.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.HourlyRate != null)
                    hashCode = hashCode * 59 + this.HourlyRate.GetHashCode();
                if (this.DailyRate != null)
                    hashCode = hashCode * 59 + this.DailyRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
