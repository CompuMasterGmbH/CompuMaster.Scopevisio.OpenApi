/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CashbookEntryForm
    /// </summary>
    [DataContract]
    public partial class CashbookEntryForm :  IEquatable<CashbookEntryForm>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CashbookEntryForm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CashbookEntryForm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CashbookEntryForm" /> class.
        /// </summary>
        /// <param name="cashbookId">cashbookId (Ref-Nummer Kasse) (required).</param>
        /// <param name="documentDate">documentDate(Datum), epoch timestamp in milliseconds (required).</param>
        /// <param name="externalDocumentNumber">externalDocumentNumber(externe Belegnummer).</param>
        /// <param name="freeText">freeText(Belegtext).</param>
        /// <param name="debitAmount">debitAmount(Einnahmen).</param>
        /// <param name="creditAmount">creditAmount(Ausgaben).</param>
        /// <param name="impersonalAccountNumber">impersonalAccountNumber(Gegenkonto).</param>
        /// <param name="personalAccountNumber">Kunde/Lieferant.</param>
        /// <param name="notice">notice(Notiz).</param>
        /// <param name="dimensions">dimensions.</param>
        public CashbookEntryForm(long cashbookId = default(long), long documentDate = default(long), string externalDocumentNumber = default(string), string freeText = default(string), decimal debitAmount = default(decimal), decimal creditAmount = default(decimal), string impersonalAccountNumber = default(string), string personalAccountNumber = default(string), string notice = default(string), List<DimensionEntryValueForm> dimensions = default(List<DimensionEntryValueForm>))
        {
            // to ensure "cashbookId" is required (not null)
            if (cashbookId == null)
            {
                throw new InvalidDataException("cashbookId is a required property for CashbookEntryForm and cannot be null");
            }
            else
            {
                this.CashbookId = cashbookId;
            }
            
            // to ensure "documentDate" is required (not null)
            if (documentDate == null)
            {
                throw new InvalidDataException("documentDate is a required property for CashbookEntryForm and cannot be null");
            }
            else
            {
                this.DocumentDate = documentDate;
            }
            
            this.ExternalDocumentNumber = externalDocumentNumber;
            this.FreeText = freeText;
            this.DebitAmount = debitAmount;
            this.CreditAmount = creditAmount;
            this.ImpersonalAccountNumber = impersonalAccountNumber;
            this.PersonalAccountNumber = personalAccountNumber;
            this.Notice = notice;
            this.Dimensions = dimensions;
        }
        
        /// <summary>
        /// cashbookId (Ref-Nummer Kasse)
        /// </summary>
        /// <value>cashbookId (Ref-Nummer Kasse)</value>
        [DataMember(Name="cashbookId", EmitDefaultValue=false)]
        public long CashbookId { get; set; }

        /// <summary>
        /// documentDate(Datum), epoch timestamp in milliseconds
        /// </summary>
        /// <value>documentDate(Datum), epoch timestamp in milliseconds</value>
        [DataMember(Name="documentDate", EmitDefaultValue=false)]
        public long DocumentDate { get; set; }

        /// <summary>
        /// externalDocumentNumber(externe Belegnummer)
        /// </summary>
        /// <value>externalDocumentNumber(externe Belegnummer)</value>
        [DataMember(Name="externalDocumentNumber", EmitDefaultValue=false)]
        public string ExternalDocumentNumber { get; set; }

        /// <summary>
        /// internalDocumentNumber (interne Belegnummer),
        /// </summary>
        /// <value>internalDocumentNumber (interne Belegnummer),</value>
        [DataMember(Name="internalDocumentNumber", EmitDefaultValue=false)]
        public string InternalDocumentNumber { get; private set; }

        /// <summary>
        /// freeText(Belegtext)
        /// </summary>
        /// <value>freeText(Belegtext)</value>
        [DataMember(Name="freeText", EmitDefaultValue=false)]
        public string FreeText { get; set; }

        /// <summary>
        /// debitAmount(Einnahmen)
        /// </summary>
        /// <value>debitAmount(Einnahmen)</value>
        [DataMember(Name="debitAmount", EmitDefaultValue=false)]
        public decimal DebitAmount { get; set; }

        /// <summary>
        /// creditAmount(Ausgaben)
        /// </summary>
        /// <value>creditAmount(Ausgaben)</value>
        [DataMember(Name="creditAmount", EmitDefaultValue=false)]
        public decimal CreditAmount { get; set; }

        /// <summary>
        /// impersonalAccountNumber(Gegenkonto)
        /// </summary>
        /// <value>impersonalAccountNumber(Gegenkonto)</value>
        [DataMember(Name="impersonalAccountNumber", EmitDefaultValue=false)]
        public string ImpersonalAccountNumber { get; set; }

        /// <summary>
        /// Kunde/Lieferant
        /// </summary>
        /// <value>Kunde/Lieferant</value>
        [DataMember(Name="personalAccountNumber", EmitDefaultValue=false)]
        public string PersonalAccountNumber { get; set; }

        /// <summary>
        /// notice(Notiz)
        /// </summary>
        /// <value>notice(Notiz)</value>
        [DataMember(Name="notice", EmitDefaultValue=false)]
        public string Notice { get; set; }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name="dimensions", EmitDefaultValue=false)]
        public List<DimensionEntryValueForm> Dimensions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CashbookEntryForm {\n");
            sb.Append("  CashbookId: ").Append(CashbookId).Append("\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  ExternalDocumentNumber: ").Append(ExternalDocumentNumber).Append("\n");
            sb.Append("  InternalDocumentNumber: ").Append(InternalDocumentNumber).Append("\n");
            sb.Append("  FreeText: ").Append(FreeText).Append("\n");
            sb.Append("  DebitAmount: ").Append(DebitAmount).Append("\n");
            sb.Append("  CreditAmount: ").Append(CreditAmount).Append("\n");
            sb.Append("  ImpersonalAccountNumber: ").Append(ImpersonalAccountNumber).Append("\n");
            sb.Append("  PersonalAccountNumber: ").Append(PersonalAccountNumber).Append("\n");
            sb.Append("  Notice: ").Append(Notice).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CashbookEntryForm);
        }

        /// <summary>
        /// Returns true if CashbookEntryForm instances are equal
        /// </summary>
        /// <param name="input">Instance of CashbookEntryForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashbookEntryForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CashbookId == input.CashbookId ||
                    (this.CashbookId != null &&
                    this.CashbookId.Equals(input.CashbookId))
                ) && 
                (
                    this.DocumentDate == input.DocumentDate ||
                    (this.DocumentDate != null &&
                    this.DocumentDate.Equals(input.DocumentDate))
                ) && 
                (
                    this.ExternalDocumentNumber == input.ExternalDocumentNumber ||
                    (this.ExternalDocumentNumber != null &&
                    this.ExternalDocumentNumber.Equals(input.ExternalDocumentNumber))
                ) && 
                (
                    this.InternalDocumentNumber == input.InternalDocumentNumber ||
                    (this.InternalDocumentNumber != null &&
                    this.InternalDocumentNumber.Equals(input.InternalDocumentNumber))
                ) && 
                (
                    this.FreeText == input.FreeText ||
                    (this.FreeText != null &&
                    this.FreeText.Equals(input.FreeText))
                ) && 
                (
                    this.DebitAmount == input.DebitAmount ||
                    (this.DebitAmount != null &&
                    this.DebitAmount.Equals(input.DebitAmount))
                ) && 
                (
                    this.CreditAmount == input.CreditAmount ||
                    (this.CreditAmount != null &&
                    this.CreditAmount.Equals(input.CreditAmount))
                ) && 
                (
                    this.ImpersonalAccountNumber == input.ImpersonalAccountNumber ||
                    (this.ImpersonalAccountNumber != null &&
                    this.ImpersonalAccountNumber.Equals(input.ImpersonalAccountNumber))
                ) && 
                (
                    this.PersonalAccountNumber == input.PersonalAccountNumber ||
                    (this.PersonalAccountNumber != null &&
                    this.PersonalAccountNumber.Equals(input.PersonalAccountNumber))
                ) && 
                (
                    this.Notice == input.Notice ||
                    (this.Notice != null &&
                    this.Notice.Equals(input.Notice))
                ) && 
                (
                    this.Dimensions == input.Dimensions ||
                    this.Dimensions != null &&
                    input.Dimensions != null &&
                    this.Dimensions.SequenceEqual(input.Dimensions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CashbookId != null)
                    hashCode = hashCode * 59 + this.CashbookId.GetHashCode();
                if (this.DocumentDate != null)
                    hashCode = hashCode * 59 + this.DocumentDate.GetHashCode();
                if (this.ExternalDocumentNumber != null)
                    hashCode = hashCode * 59 + this.ExternalDocumentNumber.GetHashCode();
                if (this.InternalDocumentNumber != null)
                    hashCode = hashCode * 59 + this.InternalDocumentNumber.GetHashCode();
                if (this.FreeText != null)
                    hashCode = hashCode * 59 + this.FreeText.GetHashCode();
                if (this.DebitAmount != null)
                    hashCode = hashCode * 59 + this.DebitAmount.GetHashCode();
                if (this.CreditAmount != null)
                    hashCode = hashCode * 59 + this.CreditAmount.GetHashCode();
                if (this.ImpersonalAccountNumber != null)
                    hashCode = hashCode * 59 + this.ImpersonalAccountNumber.GetHashCode();
                if (this.PersonalAccountNumber != null)
                    hashCode = hashCode * 59 + this.PersonalAccountNumber.GetHashCode();
                if (this.Notice != null)
                    hashCode = hashCode * 59 + this.Notice.GetHashCode();
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
