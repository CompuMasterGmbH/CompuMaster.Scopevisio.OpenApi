/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TaskForm
    /// </summary>
    [DataContract]
    public partial class TaskForm :  IEquatable<TaskForm>, IValidatableObject
    {
        /// <summary>
        /// priority
        /// </summary>
        /// <value>priority</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriorityEnum
        {
            /// <summary>
            /// Enum Niedrig for value: Niedrig
            /// </summary>
            [EnumMember(Value = "Niedrig")]
            Niedrig = 1,

            /// <summary>
            /// Enum Normal for value: Normal
            /// </summary>
            [EnumMember(Value = "Normal")]
            Normal = 2,

            /// <summary>
            /// Enum Hoch for value: Hoch
            /// </summary>
            [EnumMember(Value = "Hoch")]
            Hoch = 3

        }

        /// <summary>
        /// priority
        /// </summary>
        /// <value>priority</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public PriorityEnum? Priority { get; set; }
        /// <summary>
        /// contactSphere
        /// </summary>
        /// <value>contactSphere</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContactSphereEnum
        {
            /// <summary>
            /// Enum Lead for value: Lead
            /// </summary>
            [EnumMember(Value = "Lead")]
            Lead = 1,

            /// <summary>
            /// Enum Insteressent for value: Insteressent
            /// </summary>
            [EnumMember(Value = "Insteressent")]
            Insteressent = 2,

            /// <summary>
            /// Enum Kunde for value: Kunde
            /// </summary>
            [EnumMember(Value = "Kunde")]
            Kunde = 3,

            /// <summary>
            /// Enum Lieferant for value: Lieferant
            /// </summary>
            [EnumMember(Value = "Lieferant")]
            Lieferant = 4,

            /// <summary>
            /// Enum Debitor for value: Debitor
            /// </summary>
            [EnumMember(Value = "Debitor")]
            Debitor = 5,

            /// <summary>
            /// Enum Keditor for value: Keditor
            /// </summary>
            [EnumMember(Value = "Keditor")]
            Keditor = 6,

            /// <summary>
            /// Enum Mitabeiter for value: Mitabeiter
            /// </summary>
            [EnumMember(Value = "Mitabeiter")]
            Mitabeiter = 7,

            /// <summary>
            /// Enum Partner for value: Partner
            /// </summary>
            [EnumMember(Value = "Partner")]
            Partner = 8,

            /// <summary>
            /// Enum Projekt for value: Projekt
            /// </summary>
            [EnumMember(Value = "Projekt")]
            Projekt = 9,

            /// <summary>
            /// Enum Durchfhrung for value: Durchführung
            /// </summary>
            [EnumMember(Value = "Durchführung")]
            Durchfhrung = 10,

            /// <summary>
            /// Enum Abrechnung for value: Abrechnung
            /// </summary>
            [EnumMember(Value = "Abrechnung")]
            Abrechnung = 11

        }

        /// <summary>
        /// contactSphere
        /// </summary>
        /// <value>contactSphere</value>
        [DataMember(Name="contactSphere", EmitDefaultValue=false)]
        public ContactSphereEnum? ContactSphere { get; set; }
        /// <summary>
        /// status
        /// </summary>
        /// <value>status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Anstehend for value: Anstehend
            /// </summary>
            [EnumMember(Value = "Anstehend")]
            Anstehend = 1,

            /// <summary>
            /// Enum Begonnen for value: Begonnen
            /// </summary>
            [EnumMember(Value = "Begonnen")]
            Begonnen = 2,

            /// <summary>
            /// Enum Erledigt for value: Erledigt
            /// </summary>
            [EnumMember(Value = "Erledigt")]
            Erledigt = 3

        }

        /// <summary>
        /// status
        /// </summary>
        /// <value>status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskForm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaskForm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskForm" /> class.
        /// </summary>
        /// <param name="topic">topic (required).</param>
        /// <param name="priority">priority.</param>
        /// <param name="contactId">contactId.</param>
        /// <param name="contactLegacyId">contactLegacyId, if a contact with the given contactId is found, contactLegacyId is not evaluated.</param>
        /// <param name="contactSphere">contactSphere.</param>
        /// <param name="description">description.</param>
        /// <param name="startDateTS">startDateTS.</param>
        /// <param name="dueDateTS">dueDateTS.</param>
        /// <param name="responsibleContactId">responsibleContactId.</param>
        /// <param name="reminderDateTS">reminderDateTS.</param>
        /// <param name="status">status.</param>
        /// <param name="projectId">projectId.</param>
        /// <param name="outgoingInvoiceId">outgoingInvoiceId.</param>
        /// <param name="tags">tags.</param>
        /// <param name="employeeDomain">creates an employee task (default to false).</param>
        /// <param name="setEstimatedHoursManually">allows setting estimated hours manually (default to false).</param>
        /// <param name="estimatedHours">this parameter is evaluated only if setEstimatedHoursManually is set to true.</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="permissionType">0 &#x3D; Öffentlich, 1 &#x3D; Benutzerdefiniert, 2 &#x3D; Persönlich.</param>
        /// <param name="readPermissionProfiles">comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1..</param>
        /// <param name="readPermissionLogins">comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1..</param>
        /// <param name="writePermissionProfiles">comma separated list of profiles for full access, evaluated only if permissionType equals 1..</param>
        /// <param name="writePermissionLogins">comma separated list of user login emails, evaluated only if permissionType equals 1..</param>
        public TaskForm(string topic = default(string), PriorityEnum? priority = default(PriorityEnum?), long contactId = default(long), string contactLegacyId = default(string), ContactSphereEnum? contactSphere = default(ContactSphereEnum?), string description = default(string), long startDateTS = default(long), long dueDateTS = default(long), long responsibleContactId = default(long), long reminderDateTS = default(long), StatusEnum? status = default(StatusEnum?), long projectId = default(long), long outgoingInvoiceId = default(long), string tags = default(string), bool employeeDomain = false, bool setEstimatedHoursManually = false, decimal estimatedHours = default(decimal), List<CustomField> customFields = default(List<CustomField>), long permissionType = default(long), string readPermissionProfiles = default(string), string readPermissionLogins = default(string), string writePermissionProfiles = default(string), string writePermissionLogins = default(string))
        {
            // to ensure "topic" is required (not null)
            if (topic == null)
            {
                throw new InvalidDataException("topic is a required property for TaskForm and cannot be null");
            }
            else
            {
                this.Topic = topic;
            }
            
            this.Priority = priority;
            this.ContactId = contactId;
            this.ContactLegacyId = contactLegacyId;
            this.ContactSphere = contactSphere;
            this.Description = description;
            this.StartDateTS = startDateTS;
            this.DueDateTS = dueDateTS;
            this.ResponsibleContactId = responsibleContactId;
            this.ReminderDateTS = reminderDateTS;
            this.Status = status;
            this.ProjectId = projectId;
            this.OutgoingInvoiceId = outgoingInvoiceId;
            this.Tags = tags;
            // use default value if no "employeeDomain" provided
            if (employeeDomain == null)
            {
                this.EmployeeDomain = false;
            }
            else
            {
                this.EmployeeDomain = employeeDomain;
            }
            // use default value if no "setEstimatedHoursManually" provided
            if (setEstimatedHoursManually == null)
            {
                this.SetEstimatedHoursManually = false;
            }
            else
            {
                this.SetEstimatedHoursManually = setEstimatedHoursManually;
            }
            this.EstimatedHours = estimatedHours;
            this.CustomFields = customFields;
            this.PermissionType = permissionType;
            this.ReadPermissionProfiles = readPermissionProfiles;
            this.ReadPermissionLogins = readPermissionLogins;
            this.WritePermissionProfiles = writePermissionProfiles;
            this.WritePermissionLogins = writePermissionLogins;
        }
        
        /// <summary>
        /// topic
        /// </summary>
        /// <value>topic</value>
        [DataMember(Name="topic", EmitDefaultValue=false)]
        public string Topic { get; set; }


        /// <summary>
        /// contactId
        /// </summary>
        /// <value>contactId</value>
        [DataMember(Name="contactId", EmitDefaultValue=false)]
        public long ContactId { get; set; }

        /// <summary>
        /// contactLegacyId, if a contact with the given contactId is found, contactLegacyId is not evaluated
        /// </summary>
        /// <value>contactLegacyId, if a contact with the given contactId is found, contactLegacyId is not evaluated</value>
        [DataMember(Name="contactLegacyId", EmitDefaultValue=false)]
        public string ContactLegacyId { get; set; }


        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// startDateTS
        /// </summary>
        /// <value>startDateTS</value>
        [DataMember(Name="startDateTS", EmitDefaultValue=false)]
        public long StartDateTS { get; set; }

        /// <summary>
        /// dueDateTS
        /// </summary>
        /// <value>dueDateTS</value>
        [DataMember(Name="dueDateTS", EmitDefaultValue=false)]
        public long DueDateTS { get; set; }

        /// <summary>
        /// responsibleContactId
        /// </summary>
        /// <value>responsibleContactId</value>
        [DataMember(Name="responsibleContactId", EmitDefaultValue=false)]
        public long ResponsibleContactId { get; set; }

        /// <summary>
        /// reminderDateTS
        /// </summary>
        /// <value>reminderDateTS</value>
        [DataMember(Name="reminderDateTS", EmitDefaultValue=false)]
        public long ReminderDateTS { get; set; }


        /// <summary>
        /// projectId
        /// </summary>
        /// <value>projectId</value>
        [DataMember(Name="projectId", EmitDefaultValue=false)]
        public long ProjectId { get; set; }

        /// <summary>
        /// outgoingInvoiceId
        /// </summary>
        /// <value>outgoingInvoiceId</value>
        [DataMember(Name="outgoingInvoiceId", EmitDefaultValue=false)]
        public long OutgoingInvoiceId { get; set; }

        /// <summary>
        /// tags
        /// </summary>
        /// <value>tags</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public string Tags { get; set; }

        /// <summary>
        /// creates an employee task
        /// </summary>
        /// <value>creates an employee task</value>
        [DataMember(Name="employeeDomain", EmitDefaultValue=false)]
        public bool EmployeeDomain { get; set; }

        /// <summary>
        /// allows setting estimated hours manually
        /// </summary>
        /// <value>allows setting estimated hours manually</value>
        [DataMember(Name="setEstimatedHoursManually", EmitDefaultValue=false)]
        public bool SetEstimatedHoursManually { get; set; }

        /// <summary>
        /// this parameter is evaluated only if setEstimatedHoursManually is set to true
        /// </summary>
        /// <value>this parameter is evaluated only if setEstimatedHoursManually is set to true</value>
        [DataMember(Name="estimatedHours", EmitDefaultValue=false)]
        public decimal EstimatedHours { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public List<CustomField> CustomFields { get; set; }

        /// <summary>
        /// 0 &#x3D; Öffentlich, 1 &#x3D; Benutzerdefiniert, 2 &#x3D; Persönlich
        /// </summary>
        /// <value>0 &#x3D; Öffentlich, 1 &#x3D; Benutzerdefiniert, 2 &#x3D; Persönlich</value>
        [DataMember(Name="permissionType", EmitDefaultValue=false)]
        public long PermissionType { get; set; }

        /// <summary>
        /// comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="readPermissionProfiles", EmitDefaultValue=false)]
        public string ReadPermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="readPermissionLogins", EmitDefaultValue=false)]
        public string ReadPermissionLogins { get; set; }

        /// <summary>
        /// comma separated list of profiles for full access, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of profiles for full access, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="writePermissionProfiles", EmitDefaultValue=false)]
        public string WritePermissionProfiles { get; set; }

        /// <summary>
        /// comma separated list of user login emails, evaluated only if permissionType equals 1.
        /// </summary>
        /// <value>comma separated list of user login emails, evaluated only if permissionType equals 1.</value>
        [DataMember(Name="writePermissionLogins", EmitDefaultValue=false)]
        public string WritePermissionLogins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskForm {\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  ContactLegacyId: ").Append(ContactLegacyId).Append("\n");
            sb.Append("  ContactSphere: ").Append(ContactSphere).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  StartDateTS: ").Append(StartDateTS).Append("\n");
            sb.Append("  DueDateTS: ").Append(DueDateTS).Append("\n");
            sb.Append("  ResponsibleContactId: ").Append(ResponsibleContactId).Append("\n");
            sb.Append("  ReminderDateTS: ").Append(ReminderDateTS).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  OutgoingInvoiceId: ").Append(OutgoingInvoiceId).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  EmployeeDomain: ").Append(EmployeeDomain).Append("\n");
            sb.Append("  SetEstimatedHoursManually: ").Append(SetEstimatedHoursManually).Append("\n");
            sb.Append("  EstimatedHours: ").Append(EstimatedHours).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  PermissionType: ").Append(PermissionType).Append("\n");
            sb.Append("  ReadPermissionProfiles: ").Append(ReadPermissionProfiles).Append("\n");
            sb.Append("  ReadPermissionLogins: ").Append(ReadPermissionLogins).Append("\n");
            sb.Append("  WritePermissionProfiles: ").Append(WritePermissionProfiles).Append("\n");
            sb.Append("  WritePermissionLogins: ").Append(WritePermissionLogins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskForm);
        }

        /// <summary>
        /// Returns true if TaskForm instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Topic == input.Topic ||
                    (this.Topic != null &&
                    this.Topic.Equals(input.Topic))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.ContactLegacyId == input.ContactLegacyId ||
                    (this.ContactLegacyId != null &&
                    this.ContactLegacyId.Equals(input.ContactLegacyId))
                ) && 
                (
                    this.ContactSphere == input.ContactSphere ||
                    (this.ContactSphere != null &&
                    this.ContactSphere.Equals(input.ContactSphere))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.StartDateTS == input.StartDateTS ||
                    (this.StartDateTS != null &&
                    this.StartDateTS.Equals(input.StartDateTS))
                ) && 
                (
                    this.DueDateTS == input.DueDateTS ||
                    (this.DueDateTS != null &&
                    this.DueDateTS.Equals(input.DueDateTS))
                ) && 
                (
                    this.ResponsibleContactId == input.ResponsibleContactId ||
                    (this.ResponsibleContactId != null &&
                    this.ResponsibleContactId.Equals(input.ResponsibleContactId))
                ) && 
                (
                    this.ReminderDateTS == input.ReminderDateTS ||
                    (this.ReminderDateTS != null &&
                    this.ReminderDateTS.Equals(input.ReminderDateTS))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.OutgoingInvoiceId == input.OutgoingInvoiceId ||
                    (this.OutgoingInvoiceId != null &&
                    this.OutgoingInvoiceId.Equals(input.OutgoingInvoiceId))
                ) && 
                (
                    this.Tags == input.Tags ||
                    (this.Tags != null &&
                    this.Tags.Equals(input.Tags))
                ) && 
                (
                    this.EmployeeDomain == input.EmployeeDomain ||
                    (this.EmployeeDomain != null &&
                    this.EmployeeDomain.Equals(input.EmployeeDomain))
                ) && 
                (
                    this.SetEstimatedHoursManually == input.SetEstimatedHoursManually ||
                    (this.SetEstimatedHoursManually != null &&
                    this.SetEstimatedHoursManually.Equals(input.SetEstimatedHoursManually))
                ) && 
                (
                    this.EstimatedHours == input.EstimatedHours ||
                    (this.EstimatedHours != null &&
                    this.EstimatedHours.Equals(input.EstimatedHours))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) && 
                (
                    this.PermissionType == input.PermissionType ||
                    (this.PermissionType != null &&
                    this.PermissionType.Equals(input.PermissionType))
                ) && 
                (
                    this.ReadPermissionProfiles == input.ReadPermissionProfiles ||
                    (this.ReadPermissionProfiles != null &&
                    this.ReadPermissionProfiles.Equals(input.ReadPermissionProfiles))
                ) && 
                (
                    this.ReadPermissionLogins == input.ReadPermissionLogins ||
                    (this.ReadPermissionLogins != null &&
                    this.ReadPermissionLogins.Equals(input.ReadPermissionLogins))
                ) && 
                (
                    this.WritePermissionProfiles == input.WritePermissionProfiles ||
                    (this.WritePermissionProfiles != null &&
                    this.WritePermissionProfiles.Equals(input.WritePermissionProfiles))
                ) && 
                (
                    this.WritePermissionLogins == input.WritePermissionLogins ||
                    (this.WritePermissionLogins != null &&
                    this.WritePermissionLogins.Equals(input.WritePermissionLogins))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Topic != null)
                    hashCode = hashCode * 59 + this.Topic.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.ContactLegacyId != null)
                    hashCode = hashCode * 59 + this.ContactLegacyId.GetHashCode();
                if (this.ContactSphere != null)
                    hashCode = hashCode * 59 + this.ContactSphere.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.StartDateTS != null)
                    hashCode = hashCode * 59 + this.StartDateTS.GetHashCode();
                if (this.DueDateTS != null)
                    hashCode = hashCode * 59 + this.DueDateTS.GetHashCode();
                if (this.ResponsibleContactId != null)
                    hashCode = hashCode * 59 + this.ResponsibleContactId.GetHashCode();
                if (this.ReminderDateTS != null)
                    hashCode = hashCode * 59 + this.ReminderDateTS.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                if (this.OutgoingInvoiceId != null)
                    hashCode = hashCode * 59 + this.OutgoingInvoiceId.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.EmployeeDomain != null)
                    hashCode = hashCode * 59 + this.EmployeeDomain.GetHashCode();
                if (this.SetEstimatedHoursManually != null)
                    hashCode = hashCode * 59 + this.SetEstimatedHoursManually.GetHashCode();
                if (this.EstimatedHours != null)
                    hashCode = hashCode * 59 + this.EstimatedHours.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                if (this.PermissionType != null)
                    hashCode = hashCode * 59 + this.PermissionType.GetHashCode();
                if (this.ReadPermissionProfiles != null)
                    hashCode = hashCode * 59 + this.ReadPermissionProfiles.GetHashCode();
                if (this.ReadPermissionLogins != null)
                    hashCode = hashCode * 59 + this.ReadPermissionLogins.GetHashCode();
                if (this.WritePermissionProfiles != null)
                    hashCode = hashCode * 59 + this.WritePermissionProfiles.GetHashCode();
                if (this.WritePermissionLogins != null)
                    hashCode = hashCode * 59 + this.WritePermissionLogins.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
