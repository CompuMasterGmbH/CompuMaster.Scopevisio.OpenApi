/* 
 * Scopevisio OpenScope REST API
 *
 * <p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an example application you can reach <a href='../browser/index.html'> here </a>. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a href='../browser/index.html#!/searchscope'>search specification and paging  </a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a href='../browser/index.html#!/documentation'> here </a>.</p>
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@scopevisio.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CompuMaster.Scopevisio.OpenApi.Client;

namespace CompuMaster.Scopevisio.OpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReportApi 
    {
        private CompuMaster.Scopevisio.OpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportApi(String basePath)
        {
            this.Configuration = new CompuMaster.Scopevisio.OpenApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CompuMaster.Scopevisio.OpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportApi"/> class
        /// </summary>
        /// <returns></returns>
        public ReportApi()
        {
            this.Configuration = CompuMaster.Scopevisio.OpenApi.Client.Configuration.Default;

            ExceptionFactory = CompuMaster.Scopevisio.OpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportApi(CompuMaster.Scopevisio.OpenApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CompuMaster.Scopevisio.OpenApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CompuMaster.Scopevisio.OpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        internal String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        internal void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CompuMaster.Scopevisio.OpenApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CompuMaster.Scopevisio.OpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        internal IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        internal void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Exports accounting reports Required profile(s): &lt;code&gt;Berichte, Debitoren, Kreditoren (Anzeigen)&lt;/code&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The report type to export:&lt;ul&gt;&lt;li&gt;susa_account &#x3D; SuSa Sachkonten&lt;/li&gt;&lt;li&gt;susa_debitor &#x3D; SuSa Debitorkonten&lt;/li&gt;&lt;li&gt;susa_creditor &#x3D; SuSa Kreditorkonten&lt;/li&gt;&lt;li&gt;bilanz &#x3D; Bilanz&lt;/li&gt;&lt;li&gt;guv &#x3D; Gewinn- und Verlustrechnung&lt;/li&gt;&lt;li&gt;bwa &#x3D; Betriebswirtschaftliche Auswertung&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="startDate">Start date. Format: &lt;code&gt;dd.MM.yyyy&lt;/code&gt;</param>
        /// <param name="endDate">End date. Format: &lt;code&gt;dd.MM.yyyy&lt;/code&gt;</param>
        /// <param name="reportName">Report name, applies only for type bilanz, guv, bwa (optional)</param>
        /// <param name="outputFormat">Output format (optional, default to csv)</param>
        /// <param name="includeHeader">Trigger: Include header in csv export (optional)</param>
        /// <param name="includeZeroValued">Trigger: Include zero values in export (optional)</param>
        /// <returns></returns>
        public void GetReport (string type, string startDate, string endDate, string reportName = default(string), string outputFormat = default(string), bool? includeHeader = default(bool?), bool? includeZeroValued = default(bool?))
        {
             GetReportWithHttpInfo(type, startDate, endDate, reportName, outputFormat, includeHeader, includeZeroValued);
        }

        /// <summary>
        /// Exports accounting reports Required profile(s): &lt;code&gt;Berichte, Debitoren, Kreditoren (Anzeigen)&lt;/code&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The report type to export:&lt;ul&gt;&lt;li&gt;susa_account &#x3D; SuSa Sachkonten&lt;/li&gt;&lt;li&gt;susa_debitor &#x3D; SuSa Debitorkonten&lt;/li&gt;&lt;li&gt;susa_creditor &#x3D; SuSa Kreditorkonten&lt;/li&gt;&lt;li&gt;bilanz &#x3D; Bilanz&lt;/li&gt;&lt;li&gt;guv &#x3D; Gewinn- und Verlustrechnung&lt;/li&gt;&lt;li&gt;bwa &#x3D; Betriebswirtschaftliche Auswertung&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="startDate">Start date. Format: &lt;code&gt;dd.MM.yyyy&lt;/code&gt;</param>
        /// <param name="endDate">End date. Format: &lt;code&gt;dd.MM.yyyy&lt;/code&gt;</param>
        /// <param name="reportName">Report name, applies only for type bilanz, guv, bwa (optional)</param>
        /// <param name="outputFormat">Output format (optional, default to csv)</param>
        /// <param name="includeHeader">Trigger: Include header in csv export (optional)</param>
        /// <param name="includeZeroValued">Trigger: Include zero values in export (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetReportWithHttpInfo (string type, string startDate, string endDate, string reportName = default(string), string outputFormat = default(string), bool? includeHeader = default(bool?), bool? includeZeroValued = default(bool?))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ReportApi->GetReport");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportApi->GetReport");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportApi->GetReport");

            var localVarPath = "/reports/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (reportName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reportName", reportName)); // query parameter
            if (outputFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "outputFormat", outputFormat)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (includeHeader != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHeader", includeHeader)); // query parameter
            if (includeZeroValued != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeZeroValued", includeZeroValued)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Exports accounting reports Required profile(s): &lt;code&gt;Berichte, Debitoren, Kreditoren (Anzeigen)&lt;/code&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The report type to export:&lt;ul&gt;&lt;li&gt;susa_account &#x3D; SuSa Sachkonten&lt;/li&gt;&lt;li&gt;susa_debitor &#x3D; SuSa Debitorkonten&lt;/li&gt;&lt;li&gt;susa_creditor &#x3D; SuSa Kreditorkonten&lt;/li&gt;&lt;li&gt;bilanz &#x3D; Bilanz&lt;/li&gt;&lt;li&gt;guv &#x3D; Gewinn- und Verlustrechnung&lt;/li&gt;&lt;li&gt;bwa &#x3D; Betriebswirtschaftliche Auswertung&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="startDate">Start date. Format: &lt;code&gt;dd.MM.yyyy&lt;/code&gt;</param>
        /// <param name="endDate">End date. Format: &lt;code&gt;dd.MM.yyyy&lt;/code&gt;</param>
        /// <param name="reportName">Report name, applies only for type bilanz, guv, bwa (optional)</param>
        /// <param name="outputFormat">Output format (optional, default to csv)</param>
        /// <param name="includeHeader">Trigger: Include header in csv export (optional)</param>
        /// <param name="includeZeroValued">Trigger: Include zero values in export (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetReportAsync (string type, string startDate, string endDate, string reportName = default(string), string outputFormat = default(string), bool? includeHeader = default(bool?), bool? includeZeroValued = default(bool?))
        {
             await GetReportAsyncWithHttpInfo(type, startDate, endDate, reportName, outputFormat, includeHeader, includeZeroValued);

        }

        /// <summary>
        /// Exports accounting reports Required profile(s): &lt;code&gt;Berichte, Debitoren, Kreditoren (Anzeigen)&lt;/code&gt;.
        /// </summary>
        /// <exception cref="CompuMaster.Scopevisio.OpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">The report type to export:&lt;ul&gt;&lt;li&gt;susa_account &#x3D; SuSa Sachkonten&lt;/li&gt;&lt;li&gt;susa_debitor &#x3D; SuSa Debitorkonten&lt;/li&gt;&lt;li&gt;susa_creditor &#x3D; SuSa Kreditorkonten&lt;/li&gt;&lt;li&gt;bilanz &#x3D; Bilanz&lt;/li&gt;&lt;li&gt;guv &#x3D; Gewinn- und Verlustrechnung&lt;/li&gt;&lt;li&gt;bwa &#x3D; Betriebswirtschaftliche Auswertung&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="startDate">Start date. Format: &lt;code&gt;dd.MM.yyyy&lt;/code&gt;</param>
        /// <param name="endDate">End date. Format: &lt;code&gt;dd.MM.yyyy&lt;/code&gt;</param>
        /// <param name="reportName">Report name, applies only for type bilanz, guv, bwa (optional)</param>
        /// <param name="outputFormat">Output format (optional, default to csv)</param>
        /// <param name="includeHeader">Trigger: Include header in csv export (optional)</param>
        /// <param name="includeZeroValued">Trigger: Include zero values in export (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetReportAsyncWithHttpInfo (string type, string startDate, string endDate, string reportName = default(string), string outputFormat = default(string), bool? includeHeader = default(bool?), bool? includeZeroValued = default(bool?))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ReportApi->GetReport");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportApi->GetReport");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportApi->GetReport");

            var localVarPath = "/reports/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (reportName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reportName", reportName)); // query parameter
            if (outputFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "outputFormat", outputFormat)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (includeHeader != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHeader", includeHeader)); // query parameter
            if (includeZeroValued != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeZeroValued", includeZeroValued)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
