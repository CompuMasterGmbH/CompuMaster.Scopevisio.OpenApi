// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace CompuMaster.Scopevisio.OpenScopeApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class UserForm
    {
        /// <summary>
        /// Initializes a new instance of the UserForm class.
        /// </summary>
        public UserForm() { }

        /// <summary>
        /// Initializes a new instance of the UserForm class.
        /// </summary>
        public UserForm(string firstName, string lastName, string email, string uid = default(string), string gender = default(string), string shortName = default(string), bool? administrator = default(bool?), string password = default(string), bool? changePassword = default(bool?), IList<Profile> profiles = default(IList<Profile>), IList<License> licenses = default(IList<License>), bool? buyMissingLicenses = default(bool?), string status = default(string), IList<string> specialRights = default(IList<string>), long? creationTs = default(long?), IList<TeamworkRole> teamworkRoles = default(IList<TeamworkRole>))
        {
            Uid = uid;
            FirstName = firstName;
            LastName = lastName;
            Gender = gender;
            Email = email;
            ShortName = shortName;
            Administrator = administrator;
            Password = password;
            ChangePassword = changePassword;
            Profiles = profiles;
            Licenses = licenses;
            BuyMissingLicenses = buyMissingLicenses;
            Status = status;
            SpecialRights = specialRights;
            CreationTs = creationTs;
            TeamworkRoles = teamworkRoles;
        }

        /// <summary>
        /// User ID
        /// </summary>
        [JsonProperty(PropertyName = "uid")]
        public string Uid { get; set; }

        /// <summary>
        /// First name
        /// </summary>
        [JsonProperty(PropertyName = "firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name
        /// </summary>
        [JsonProperty(PropertyName = "lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gender. Possible values include: 'MALE', 'FEMALE'
        /// </summary>
        [JsonProperty(PropertyName = "gender")]
        public string Gender { get; set; }

        /// <summary>
        /// Email address used as username
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// User signature
        /// </summary>
        [JsonProperty(PropertyName = "shortName")]
        public string ShortName { get; set; }

        /// <summary>
        /// Indicates whether this user is an administrator
        /// </summary>
        [JsonProperty(PropertyName = "administrator")]
        public bool? Administrator { get; set; }

        /// <summary>
        /// User password. Must be at least 6 characters long
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// Indicates whether the user has to change the password
        /// </summary>
        [JsonProperty(PropertyName = "changePassword")]
        public bool? ChangePassword { get; set; }

        /// <summary>
        /// User profiles to assign
        /// </summary>
        [JsonProperty(PropertyName = "profiles")]
        public IList<Profile> Profiles { get; set; }

        /// <summary>
        /// Product licenses to assign
        /// </summary>
        [JsonProperty(PropertyName = "licenses")]
        public IList<License> Licenses { get; set; }

        /// <summary>
        /// Wether to buy licenses, if not available
        /// </summary>
        [JsonProperty(PropertyName = "buyMissingLicenses")]
        public bool? BuyMissingLicenses { get; set; }

        /// <summary>
        /// User status. Possible values include: 'ACTIVE', 'INVITED',
        /// 'CHANGED', 'DISABLED', 'DELETED', 'LOCKED'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; private set; }

        /// <summary>
        /// User's special rights
        /// </summary>
        [JsonProperty(PropertyName = "specialRights")]
        public IList<string> SpecialRights { get; private set; }

        /// <summary>
        /// Creation timestamp
        /// </summary>
        [JsonProperty(PropertyName = "creationTs")]
        public long? CreationTs { get; private set; }

        /// <summary>
        /// Users role rights for teamwork.
        /// </summary>
        [JsonProperty(PropertyName = "teamworkRoles")]
        public IList<TeamworkRole> TeamworkRoles { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (FirstName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FirstName");
            }
            if (LastName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LastName");
            }
            if (Email == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Email");
            }
            if (this.Profiles != null)
            {
                foreach (var element in this.Profiles)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Licenses != null)
            {
                foreach (var element1 in this.Licenses)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (this.TeamworkRoles != null)
            {
                foreach (var element2 in this.TeamworkRoles)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
        }
    }
}
